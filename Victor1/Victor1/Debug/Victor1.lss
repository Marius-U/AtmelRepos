
Victor1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000001f6  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b8  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000696  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000040d  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008d4  00000000  00000000  00000e25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000013c  00000000  00000000  000016fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00008ee0  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000186  00000000  00000000  0000a718  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  0000a89e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00000635  00000000  00000000  0000a926  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2a c0       	rjmp	.+84     	; 0xe2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__bad_interrupt>
  92:	00 00       	nop
  94:	26 c0       	rjmp	.+76     	; 0xe2 <__bad_interrupt>
  96:	00 00       	nop
  98:	24 c0       	rjmp	.+72     	; 0xe2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	20 c0       	rjmp	.+64     	; 0xe2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <__bad_interrupt>
	...

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e6 ef       	ldi	r30, 0xF6	; 246
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 33       	cpi	r26, 0x30	; 48
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a0 e3       	ldi	r26, 0x30	; 48
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a0 33       	cpi	r26, 0x30	; 48
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	6c d0       	rcall	.+216    	; 0x1b8 <main>
  e0:	88 c0       	rjmp	.+272    	; 0x1f2 <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <pwm_init>:
#include "usart.h"

void pwm_init()
{
	//Set the direction pins as output for the motor driver.
	DDRB |= (1 << DDB4) | (1 << DDB7);
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	80 69       	ori	r24, 0x90	; 144
  e8:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << DDC7);
  ea:	3f 9a       	sbi	0x07, 7	; 7
	DDRF |= (1 << DDF7);
  ec:	87 9a       	sbi	0x10, 7	; 16
	DDRB |= (1 << DDB5)|(1 << DDB6);//PWM pins
  ee:	84 b1       	in	r24, 0x04	; 4
  f0:	80 66       	ori	r24, 0x60	; 96
  f2:	84 b9       	out	0x04, r24	; 4
	
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1);
  f4:	e0 e8       	ldi	r30, 0x80	; 128
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 6a       	ori	r24, 0xA0	; 160
  fc:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM11);
  fe:	80 81       	ld	r24, Z
 100:	82 60       	ori	r24, 0x02	; 2
 102:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 <<WGM12);
 104:	e1 e8       	ldi	r30, 0x81	; 129
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	88 61       	ori	r24, 0x18	; 24
 10c:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS10);
 10e:	80 81       	ld	r24, Z
 110:	81 60       	ori	r24, 0x01	; 1
 112:	80 83       	st	Z, r24
	ICR1=0xFF;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	90 93 87 00 	sts	0x0087, r25
 11c:	80 93 86 00 	sts	0x0086, r24
	uart_print("PWM initialization finished!\r\n");
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0a d0       	rcall	.+20     	; 0x13a <uart_print>
	uart_flush();
 126:	3b c0       	rjmp	.+118    	; 0x19e <uart_flush>
 128:	08 95       	ret

0000012a <uart_transmit>:
{
	if ( UCSR1A & ( 1 << RXC1) )
	return 1;
	
	return 0;
}
 12a:	e8 ec       	ldi	r30, 0xC8	; 200
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	90 81       	ld	r25, Z
 130:	95 ff       	sbrs	r25, 5
 132:	fd cf       	rjmp	.-6      	; 0x12e <uart_transmit+0x4>
 134:	80 93 ce 00 	sts	0x00CE, r24
 138:	08 95       	ret

0000013a <uart_print>:
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	8c 01       	movw	r16, r24
 148:	7c 01       	movw	r14, r24
 14a:	c0 e0       	ldi	r28, 0x00	; 0
 14c:	d0 e0       	ldi	r29, 0x00	; 0
 14e:	05 c0       	rjmp	.+10     	; 0x15a <uart_print+0x20>
 150:	f7 01       	movw	r30, r14
 152:	81 91       	ld	r24, Z+
 154:	7f 01       	movw	r14, r30
 156:	e9 df       	rcall	.-46     	; 0x12a <uart_transmit>
 158:	21 96       	adiw	r28, 0x01	; 1
 15a:	f8 01       	movw	r30, r16
 15c:	01 90       	ld	r0, Z+
 15e:	00 20       	and	r0, r0
 160:	e9 f7       	brne	.-6      	; 0x15c <uart_print+0x22>
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	e0 1b       	sub	r30, r16
 166:	f1 0b       	sbc	r31, r17
 168:	ce 17       	cp	r28, r30
 16a:	df 07       	cpc	r29, r31
 16c:	88 f3       	brcs	.-30     	; 0x150 <uart_print+0x16>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	ff 90       	pop	r15
 178:	ef 90       	pop	r14
 17a:	08 95       	ret

0000017c <uart_init>:
 17c:	10 92 cd 00 	sts	0x00CD, r1
 180:	80 e1       	ldi	r24, 0x10	; 16
 182:	80 93 cc 00 	sts	0x00CC, r24
 186:	e8 ec       	ldi	r30, 0xC8	; 200
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	82 60       	ori	r24, 0x02	; 2
 18e:	80 83       	st	Z, r24
 190:	88 e1       	ldi	r24, 0x18	; 24
 192:	80 93 c9 00 	sts	0x00C9, r24
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	80 93 ca 00 	sts	0x00CA, r24
 19c:	08 95       	ret

0000019e <uart_flush>:

void uart_flush(void)
{
	unsigned char dummy;
	while(UCSR1A & (1 << RXC1))
 19e:	80 91 c8 00 	lds	r24, 0x00C8
 1a2:	88 23       	and	r24, r24
 1a4:	44 f4       	brge	.+16     	; 0x1b6 <uart_flush+0x18>
	dummy = UDR1;
 1a6:	ae ec       	ldi	r26, 0xCE	; 206
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
}

void uart_flush(void)
{
	unsigned char dummy;
	while(UCSR1A & (1 << RXC1))
 1aa:	e8 ec       	ldi	r30, 0xC8	; 200
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
	dummy = UDR1;
 1ae:	8c 91       	ld	r24, X
}

void uart_flush(void)
{
	unsigned char dummy;
	while(UCSR1A & (1 << RXC1))
 1b0:	80 81       	ld	r24, Z
 1b2:	88 23       	and	r24, r24
 1b4:	e4 f3       	brlt	.-8      	; 0x1ae <uart_flush+0x10>
 1b6:	08 95       	ret

000001b8 <main>:
#include "pwm.h"


int main(void)
{
	cli();
 1b8:	f8 94       	cli
	uart_init();
 1ba:	e0 df       	rcall	.-64     	; 0x17c <uart_init>
	pwm_init();
 1bc:	93 df       	rcall	.-218    	; 0xe4 <pwm_init>
	sei();
 1be:	78 94       	sei
	
    while(1)
    {
		
		uint16_t ADC_read();
		uart_print("Fata!\r\n");
 1c0:	8f e1       	ldi	r24, 0x1F	; 31
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	ba df       	rcall	.-140    	; 0x13a <uart_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	2f ef       	ldi	r18, 0xFF	; 255
 1c8:	83 ed       	ldi	r24, 0xD3	; 211
 1ca:	90 e3       	ldi	r25, 0x30	; 48
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0x14>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x1e>
 1d6:	00 00       	nop
		_delay_ms(1000);
		uart_print("Spate!\r\n");
 1d8:	87 e2       	ldi	r24, 0x27	; 39
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	ae df       	rcall	.-164    	; 0x13a <uart_print>
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	83 ed       	ldi	r24, 0xD3	; 211
 1e2:	90 e3       	ldi	r25, 0x30	; 48
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <main+0x2c>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0x36>
 1ee:	00 00       	nop
 1f0:	e7 cf       	rjmp	.-50     	; 0x1c0 <main+0x8>

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
