
PS1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000036e  00000402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  0000040c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008fd  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000595  00000000  00000000  00000e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000623  00000000  00000000  00001416  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a4  00000000  00000000  00001a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f2  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c7  00000000  00000000  00001fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00002399  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 b5 01 	jmp	0x36a	; 0x36a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

volatile uint8_t count = 0x00u;

int main(void)
{	
	initDisplay();
  a6:	0e 94 0f 01 	call	0x21e	; 0x21e <initDisplay>
	initButtonISR();
  aa:	0e 94 37 01 	call	0x26e	; 0x26e <initButtonISR>
	initLeds();
  ae:	0e 94 1c 01 	call	0x238	; 0x238 <initLeds>
	uart_init();
  b2:	0e 94 46 01 	call	0x28c	; 0x28c <uart_init>
	initTimerB(0xF424u);
  b6:	84 e2       	ldi	r24, 0x24	; 36
  b8:	94 ef       	ldi	r25, 0xF4	; 244
  ba:	0e 94 23 01 	call	0x246	; 0x246 <initTimerB>
//	initTimerA(0xFFu);	
	uint8_t a = 0x00;
	 while(1)
    {	
		a = uart_receive();
  be:	0e 94 87 01 	call	0x30e	; 0x30e <uart_receive>
		if(a == 0x41 || a == 0x61)
  c2:	8f 7d       	andi	r24, 0xDF	; 223
  c4:	81 34       	cpi	r24, 0x41	; 65
  c6:	21 f4       	brne	.+8      	; 0xd0 <main+0x2a>
		{
			led_ON(LED_2);
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	0e 94 8f 01 	call	0x31e	; 0x31e <led_ON>
  ce:	f7 cf       	rjmp	.-18     	; 0xbe <main+0x18>
			a = 0x00;
		}
		if(a == 0x53 || a == 0x73)
  d0:	83 35       	cpi	r24, 0x53	; 83
  d2:	a9 f7       	brne	.-22     	; 0xbe <main+0x18>
		{
			led_OFF(LED_2);
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	0e 94 9b 01 	call	0x336	; 0x336 <led_OFF>
  da:	f1 cf       	rjmp	.-30     	; 0xbe <main+0x18>

000000dc <__vector_11>:
		}
    }
}

ISR (TIMER1_COMPA_vect)
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
		PORTD ^= (1 << PORTD7);
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	80 58       	subi	r24, 0x80	; 128
  ec:	8b b9       	out	0x0b, r24	; 11
}
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_14>:

ISR (TIMER0_COMPA_vect)  
{
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	4f 93       	push	r20
 10a:	5f 93       	push	r21
 10c:	6f 93       	push	r22
 10e:	7f 93       	push	r23
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	af 93       	push	r26
 116:	bf 93       	push	r27
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
	count++;
 11c:	80 91 0a 01 	lds	r24, 0x010A
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 0a 01 	sts	0x010A, r24
	if(count >= 25)
 126:	80 91 0a 01 	lds	r24, 0x010A
 12a:	89 31       	cpi	r24, 0x19	; 25
 12c:	28 f0       	brcs	.+10     	; 0x138 <__vector_14+0x3e>
	{
			togle_Led(LED_1);
 12e:	85 e0       	ldi	r24, 0x05	; 5
 130:	0e 94 a8 01 	call	0x350	; 0x350 <togle_Led>
			count = 0;
 134:	10 92 0a 01 	sts	0x010A, r1
	}
}
 138:	ff 91       	pop	r31
 13a:	ef 91       	pop	r30
 13c:	bf 91       	pop	r27
 13e:	af 91       	pop	r26
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	7f 91       	pop	r23
 146:	6f 91       	pop	r22
 148:	5f 91       	pop	r21
 14a:	4f 91       	pop	r20
 14c:	3f 91       	pop	r19
 14e:	2f 91       	pop	r18
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_4>:

ISR(PCINT1_vect) {
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	2f 93       	push	r18
 166:	3f 93       	push	r19
 168:	4f 93       	push	r20
 16a:	5f 93       	push	r21
 16c:	6f 93       	push	r22
 16e:	7f 93       	push	r23
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	af 93       	push	r26
 176:	bf 93       	push	r27
 178:	ef 93       	push	r30
 17a:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	87 ee       	ldi	r24, 0xE7	; 231
 180:	93 e0       	ldi	r25, 0x03	; 3
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <__vector_4+0x28>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <__vector_4+0x32>
 18c:	00 00       	nop
	_delay_ms(80); //debounce
	if (PINC & (0x01u)) 
 18e:	30 9b       	sbis	0x06, 0	; 6
 190:	26 c0       	rjmp	.+76     	; 0x1de <__vector_4+0x84>
	{
		//Button was pressed!
		buttonCount = eeprom_read(0x00u);
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 08 01 	call	0x210	; 0x210 <eeprom_read>
 19a:	80 93 0b 01 	sts	0x010B, r24
		if(buttonCount < 10)
 19e:	80 91 0b 01 	lds	r24, 0x010B
 1a2:	8a 30       	cpi	r24, 0x0A	; 10
 1a4:	80 f4       	brcc	.+32     	; 0x1c6 <__vector_4+0x6c>
		{	
			buttonCount++;
 1a6:	80 91 0b 01 	lds	r24, 0x010B
 1aa:	8f 5f       	subi	r24, 0xFF	; 255
 1ac:	80 93 0b 01 	sts	0x010B, r24
			eeprom_write(0x00u,buttonCount);
 1b0:	60 91 0b 01 	lds	r22, 0x010B
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 00 01 	call	0x200	; 0x200 <eeprom_write>
			display(buttonCount);
 1bc:	80 91 0b 01 	lds	r24, 0x010B
 1c0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <display>
 1c4:	0c c0       	rjmp	.+24     	; 0x1de <__vector_4+0x84>
		}
		else
		{
			buttonCount = 0x00;
 1c6:	10 92 0b 01 	sts	0x010B, r1
			eeprom_write(0x00u, buttonCount);
 1ca:	60 91 0b 01 	lds	r22, 0x010B
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 00 01 	call	0x200	; 0x200 <eeprom_write>
			display(buttonCount);
 1d6:	80 91 0b 01 	lds	r24, 0x010B
 1da:	0e 94 60 01 	call	0x2c0	; 0x2c0 <display>
		}
	} 
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <eeprom_write>:
#include "D:/AtmelRepos/PS1/PS1/Header/eeprom.h"

void eeprom_write(unsigned int address, unsigned char data)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
 200:	f9 99       	sbic	0x1f, 1	; 31
 202:	fe cf       	rjmp	.-4      	; 0x200 <eeprom_write>
	;
	/* Set up address and Data Registers */
	EEAR = address;
 204:	92 bd       	out	0x22, r25	; 34
 206:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
 208:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
 20a:	fa 9a       	sbi	0x1f, 2	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
 20c:	f9 9a       	sbi	0x1f, 1	; 31
 20e:	08 95       	ret

00000210 <eeprom_read>:
}

uint8_t eeprom_read(unsigned int address)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
 210:	f9 99       	sbic	0x1f, 1	; 31
 212:	fe cf       	rjmp	.-4      	; 0x210 <eeprom_read>
	;
	/* Set up address register */
	EEAR = address;
 214:	92 bd       	out	0x22, r25	; 34
 216:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
 218:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
 21a:	80 b5       	in	r24, 0x20	; 32
 21c:	08 95       	ret

0000021e <initDisplay>:
#include "D:/AtmelRepos/PS1/PS1/Header/eeprom.h"

void initDisplay()
{
	/* Initialize the Data Direction Registers as outputs for the 7 segments display*/
	DDRB |= (1 << DDB0) | (1 << DDB1) | (1 << DDB2) | (1 << DDB3) | (1 << DDB4) | (1 << DDB5);
 21e:	84 b1       	in	r24, 0x04	; 4
 220:	8f 63       	ori	r24, 0x3F	; 63
 222:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << DDD6) | (1 << DDD7);
 224:	8a b1       	in	r24, 0x0a	; 10
 226:	80 6c       	ori	r24, 0xC0	; 192
 228:	8a b9       	out	0x0a, r24	; 10
	display(eeprom_read(0x00u));
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 08 01 	call	0x210	; 0x210 <eeprom_read>
 232:	0e 94 60 01 	call	0x2c0	; 0x2c0 <display>
 236:	08 95       	ret

00000238 <initLeds>:
	
}
void initLeds()
{
	  DDRD |= (1 << DDD5) | (1 << DDD3) | (1 << DDD2);
 238:	8a b1       	in	r24, 0x0a	; 10
 23a:	8c 62       	ori	r24, 0x2C	; 44
 23c:	8a b9       	out	0x0a, r24	; 10
	  PORTD |= (1 << 2) | (1 << 3) | (1 << 5);
 23e:	8b b1       	in	r24, 0x0b	; 11
 240:	8c 62       	ori	r24, 0x2C	; 44
 242:	8b b9       	out	0x0b, r24	; 11
 244:	08 95       	ret

00000246 <initTimerB>:
	DDRC &= ~(1 << DDC1);
	PORTC &= ~(1 << PORTC1);
}
void initTimerB(uint16_t countValue)
{
	cli();
 246:	f8 94       	cli
	TCCR1B |= (1 << WGM12);
 248:	e1 e8       	ldi	r30, 0x81	; 129
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	20 81       	ld	r18, Z
 24e:	28 60       	ori	r18, 0x08	; 8
 250:	20 83       	st	Z, r18
	TCCR1B |= (1 << CS12);
 252:	20 81       	ld	r18, Z
 254:	24 60       	ori	r18, 0x04	; 4
 256:	20 83       	st	Z, r18
	OCR1A   = countValue;
 258:	90 93 89 00 	sts	0x0089, r25
 25c:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A);
 260:	ef e6       	ldi	r30, 0x6F	; 111
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	82 60       	ori	r24, 0x02	; 2
 268:	80 83       	st	Z, r24
	sei(); 
 26a:	78 94       	sei
 26c:	08 95       	ret

0000026e <initButtonISR>:
	TIMSK0 |= (1 << OCIE0A);    //Set the ISR COMPA vect
	sei();
}
void initButtonISR()
{
	cli();
 26e:	f8 94       	cli
	/*Initializing PC1 as input for the SW button with pull down resistor.*/
	DDRC |= (1 << DDC0);
 270:	38 9a       	sbi	0x07, 0	; 7
	PORTC &= ~(1 << PORTC0);
 272:	40 98       	cbi	0x08, 0	; 8
	
	PCICR  |= (1 << PCIE1);
 274:	e8 e6       	ldi	r30, 0x68	; 104
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	82 60       	ori	r24, 0x02	; 2
 27c:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8);
 27e:	ec e6       	ldi	r30, 0x6C	; 108
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	81 60       	ori	r24, 0x01	; 1
 286:	80 83       	st	Z, r24
	sei();
 288:	78 94       	sei
 28a:	08 95       	ret

0000028c <uart_init>:
}

void uart_init(void)
{
	cli();
 28c:	f8 94       	cli
	// set baud rate
	unsigned int baud = 207u;//BAUD_PRESCALE;
	
	UBRR0H = (unsigned char) (baud >> 8 );
 28e:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)baud;
 292:	8f ec       	ldi	r24, 0xCF	; 207
 294:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A |= (1 << U2X0);
 298:	e0 ec       	ldi	r30, 0xC0	; 192
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	82 60       	ori	r24, 0x02	; 2
 2a0:	80 83       	st	Z, r24
	// set frame format ( 8data, 1stop )
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
 2a2:	86 e0       	ldi	r24, 0x06	; 6
 2a4:	80 93 c2 00 	sts	0x00C2, r24
	// enable received and transmitter
	UCSR0B = ( 1 << RXEN0 ) | ( 1 << TXEN0 );
 2a8:	88 e1       	ldi	r24, 0x18	; 24
 2aa:	80 93 c1 00 	sts	0x00C1, r24
	
	sei();
 2ae:	78 94       	sei
 2b0:	08 95       	ret

000002b2 <clear>:
		eeprom_write(0x00u,0x00u);
	}
}
void clear()
{
	PORTB &= ~(1 << PORTB0) & ~(1 << PORTB1) & ~(1 << PORTB2) & ~(1 << PORTB3) & ~(1 << PORTB4) & ~(1 << PORTB5);
 2b2:	85 b1       	in	r24, 0x05	; 5
 2b4:	80 7c       	andi	r24, 0xC0	; 192
 2b6:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~(1 << PORTD6) & ~(1 << PORTD7);
 2b8:	8b b1       	in	r24, 0x0b	; 11
 2ba:	8f 73       	andi	r24, 0x3F	; 63
 2bc:	8b b9       	out	0x0b, r24	; 11
 2be:	08 95       	ret

000002c0 <display>:
#include "D:\AtmelRepos\PS1\PS1\Header\eeprom.h"

const uint8_t segDisplay[10] = {0x3Fu, 0x06u, 0x1Bu, 0x0Fu, 0x26u, 0x2Du, 0x3D, 0x07u, 0x3F, 0x2F};
volatile uint8_t buttonCount = 0x00u;
void display(uint8_t value)
{
 2c0:	cf 93       	push	r28
 2c2:	c8 2f       	mov	r28, r24
	clear();
 2c4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <clear>
	if(value < 10)
 2c8:	ca 30       	cpi	r28, 0x0A	; 10
 2ca:	a8 f4       	brcc	.+42     	; 0x2f6 <display+0x36>
	{
		if((value != 0x00) & (value != 0x01) & (value != 0x07))
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	c7 30       	cpi	r28, 0x07	; 7
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <display+0x14>
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	88 23       	and	r24, r24
 2d6:	31 f0       	breq	.+12     	; 0x2e4 <display+0x24>
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	c2 30       	cpi	r28, 0x02	; 2
 2dc:	08 f4       	brcc	.+2      	; 0x2e0 <display+0x20>
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	81 11       	cpse	r24, r1
		{
			PORTD |= (1 << PORTD6);
 2e2:	5e 9a       	sbi	0x0b, 6	; 11
		}
		PORTB |= segDisplay[value];
 2e4:	95 b1       	in	r25, 0x05	; 5
 2e6:	ec 2f       	mov	r30, r28
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	e0 50       	subi	r30, 0x00	; 0
 2ec:	ff 4f       	sbci	r31, 0xFF	; 255
 2ee:	80 81       	ld	r24, Z
 2f0:	89 2b       	or	r24, r25
 2f2:	85 b9       	out	0x05, r24	; 5
 2f4:	0a c0       	rjmp	.+20     	; 0x30a <display+0x4a>
	}
	else
	{
		PORTB |= segDisplay[0x00u];
 2f6:	85 b1       	in	r24, 0x05	; 5
 2f8:	8f 63       	ori	r24, 0x3F	; 63
 2fa:	85 b9       	out	0x05, r24	; 5
		buttonCount = 0x00;
 2fc:	10 92 0b 01 	sts	0x010B, r1
		eeprom_write(0x00u,0x00u);
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 00 01 	call	0x200	; 0x200 <eeprom_write>
	}
}
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <uart_receive>:
	uart_transmit(data[count]);
}
// read a char from uart
unsigned char uart_receive(void)
{
	while (!( UCSR0A & ( 1 << RXC0) ))
 30e:	e0 ec       	ldi	r30, 0xC0	; 192
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	88 23       	and	r24, r24
 316:	ec f7       	brge	.-6      	; 0x312 <uart_receive+0x4>
	;
	return UDR0;
 318:	80 91 c6 00 	lds	r24, 0x00C6
}
 31c:	08 95       	ret

0000031e <led_ON>:

#include <avr/io.h>

void led_ON(uint8_t led)
{
	PORTD &= ~(1 << led);
 31e:	9b b1       	in	r25, 0x0b	; 11
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <led_ON+0xc>
 326:	22 0f       	add	r18, r18
 328:	33 1f       	adc	r19, r19
 32a:	8a 95       	dec	r24
 32c:	e2 f7       	brpl	.-8      	; 0x326 <led_ON+0x8>
 32e:	20 95       	com	r18
 330:	92 23       	and	r25, r18
 332:	9b b9       	out	0x0b, r25	; 11
 334:	08 95       	ret

00000336 <led_OFF>:
}

void led_OFF(uint8_t led)
{
	PORTD |= (1 << led);
 336:	4b b1       	in	r20, 0x0b	; 11
 338:	21 e0       	ldi	r18, 0x01	; 1
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	b9 01       	movw	r22, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <led_OFF+0xe>
 340:	66 0f       	add	r22, r22
 342:	77 1f       	adc	r23, r23
 344:	8a 95       	dec	r24
 346:	e2 f7       	brpl	.-8      	; 0x340 <led_OFF+0xa>
 348:	cb 01       	movw	r24, r22
 34a:	84 2b       	or	r24, r20
 34c:	8b b9       	out	0x0b, r24	; 11
 34e:	08 95       	ret

00000350 <togle_Led>:
}

void togle_Led(uint8_t led)
{
	PORTD ^= (1 << led);
 350:	4b b1       	in	r20, 0x0b	; 11
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	b9 01       	movw	r22, r18
 358:	02 c0       	rjmp	.+4      	; 0x35e <togle_Led+0xe>
 35a:	66 0f       	add	r22, r22
 35c:	77 1f       	adc	r23, r23
 35e:	8a 95       	dec	r24
 360:	e2 f7       	brpl	.-8      	; 0x35a <togle_Led+0xa>
 362:	cb 01       	movw	r24, r22
 364:	84 27       	eor	r24, r20
 366:	8b b9       	out	0x0b, r24	; 11
 368:	08 95       	ret

0000036a <_exit>:
 36a:	f8 94       	cli

0000036c <__stop_program>:
 36c:	ff cf       	rjmp	.-2      	; 0x36c <__stop_program>
