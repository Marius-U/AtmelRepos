
PS1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000d0a  00000d9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  0080011a  0080011a  00000db8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000218  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001139  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d2  00000000  00000000  00002139  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009fe  00000000  00000000  00002a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000040c  00000000  00000000  0000340c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000452  00000000  00000000  00003818  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000aa7  00000000  00000000  00003c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  00004711  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 36       	cpi	r26, 0x6E	; 110
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 83 06 	jmp	0xd06	; 0xd06 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "D:/AtmelRepos/PS1/PS1/Header/eeprom.h"


int main(void)
{	
	initVirtualTimers();
  a6:	0e 94 62 04 	call	0x8c4	; 0x8c4 <initVirtualTimers>
	initDisplay();
  aa:	0e 94 6e 01 	call	0x2dc	; 0x2dc <initDisplay>
	initButtonISR();
  ae:	0e 94 a3 01 	call	0x346	; 0x346 <initButtonISR>
	initLeds();
  b2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <initLeds>
	adcInit();
  b6:	0e 94 b2 01 	call	0x364	; 0x364 <adcInit>
	uart_init();
  ba:	0e 94 c3 01 	call	0x386	; 0x386 <uart_init>
	initPWM();
  be:	0e 94 82 01 	call	0x304	; 0x304 <initPWM>
	initPeriodical();
  c2:	0e 94 8d 01 	call	0x31a	; 0x31a <initPeriodical>
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <main+0x20>

000000c8 <adcRead>:
#include "D:\AtmelRepos\PS1\PS1\Header\adc.h"

uint16_t adcRead(uint8_t input)
{
	uint16_t value;
	if(input == TEMP_SENZOR)
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	49 f4       	brne	.+18     	; 0xde <adcRead+0x16>
	{
		ADMUX &= ~(0x02);
  cc:	ec e7       	ldi	r30, 0x7C	; 124
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8d 7f       	andi	r24, 0xFD	; 253
  d4:	80 83       	st	Z, r24
		ADMUX |= input;
  d6:	80 81       	ld	r24, Z
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	80 83       	st	Z, r24
  dc:	07 c0       	rjmp	.+14     	; 0xec <adcRead+0x24>
	}
	else if(input == REF_TEMP)
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	29 f4       	brne	.+10     	; 0xec <adcRead+0x24>
	{
		ADMUX |= input;
  e2:	ec e7       	ldi	r30, 0x7C	; 124
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	83 60       	ori	r24, 0x03	; 3
  ea:	80 83       	st	Z, r24
	}

	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
  ec:	ea e7       	ldi	r30, 0x7A	; 122
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADSC));      // Thanks T, this line waits for the ADC to finish
  f6:	80 81       	ld	r24, Z
  f8:	86 fd       	sbrc	r24, 6
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <adcRead+0x2e>


	value = ADCL;
  fc:	80 91 78 00 	lds	r24, 0x0078
	value |= (ADCH << 8);    // ADCH is read so ADC can be updated again
 100:	20 91 79 00 	lds	r18, 0x0079
 104:	90 e0       	ldi	r25, 0x00	; 0

	return value;
}
 106:	92 2b       	or	r25, r18
 108:	08 95       	ret

0000010a <adcGetPrescription>:
{
	return (rawADC * 50000)/1023; // 5V resolution, LM35 Linear + 10-mV/°C 
}
uint16_t adcGetPrescription(uint16_t rawADC)
{
	return (rawADC * 5000)/1023;
 10a:	28 e8       	ldi	r18, 0x88	; 136
 10c:	33 e1       	ldi	r19, 0x13	; 19
 10e:	ac 01       	movw	r20, r24
 110:	42 9f       	mul	r20, r18
 112:	c0 01       	movw	r24, r0
 114:	43 9f       	mul	r20, r19
 116:	90 0d       	add	r25, r0
 118:	52 9f       	mul	r21, r18
 11a:	90 0d       	add	r25, r0
 11c:	11 24       	eor	r1, r1
 11e:	6f ef       	ldi	r22, 0xFF	; 255
 120:	73 e0       	ldi	r23, 0x03	; 3
 122:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__udivmodhi4>
 126:	cb 01       	movw	r24, r22
}
 128:	08 95       	ret

0000012a <adc_printValue>:
void adc_printValue(uint16_t rawAdc)
{
 12a:	cf 92       	push	r12
 12c:	df 92       	push	r13
 12e:	ef 92       	push	r14
 130:	ff 92       	push	r15
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29

	return value;
}
uint16_t adcToCelsius(uint16_t rawADC)
{
	return (rawADC * 50000)/1023; // 5V resolution, LM35 Linear + 10-mV/°C 
 13a:	9c 01       	movw	r18, r24
 13c:	a0 e5       	ldi	r26, 0x50	; 80
 13e:	b3 ec       	ldi	r27, 0xC3	; 195
 140:	0e 94 52 06 	call	0xca4	; 0xca4 <__umulhisi3>
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	33 e0       	ldi	r19, 0x03	; 3
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	0e 94 33 06 	call	0xc66	; 0xc66 <__divmodsi4>
 150:	69 01       	movw	r12, r18
 152:	7a 01       	movw	r14, r20
void adc_printValue(uint16_t rawAdc)
{
	uint16_t value = adcToCelsius(rawAdc);
	
	uint8_t uartData[4];
	uartData[3] = value%10;
 154:	ad ec       	ldi	r26, 0xCD	; 205
 156:	bc ec       	ldi	r27, 0xCC	; 204
 158:	0e 94 52 06 	call	0xca4	; 0xca4 <__umulhisi3>
 15c:	96 95       	lsr	r25
 15e:	87 95       	ror	r24
 160:	96 95       	lsr	r25
 162:	87 95       	ror	r24
 164:	96 95       	lsr	r25
 166:	87 95       	ror	r24
 168:	9c 01       	movw	r18, r24
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	82 0f       	add	r24, r18
 17c:	93 1f       	adc	r25, r19
 17e:	e6 01       	movw	r28, r12
 180:	c8 1b       	sub	r28, r24
 182:	d9 0b       	sbc	r29, r25
	value /= 10;
 184:	96 01       	movw	r18, r12
 186:	0e 94 52 06 	call	0xca4	; 0xca4 <__umulhisi3>
 18a:	ac 01       	movw	r20, r24
 18c:	56 95       	lsr	r21
 18e:	47 95       	ror	r20
 190:	56 95       	lsr	r21
 192:	47 95       	ror	r20
 194:	56 95       	lsr	r21
 196:	47 95       	ror	r20
	uartData[2] = value%10;
 198:	9a 01       	movw	r18, r20
 19a:	0e 94 52 06 	call	0xca4	; 0xca4 <__umulhisi3>
 19e:	96 95       	lsr	r25
 1a0:	87 95       	ror	r24
 1a2:	96 95       	lsr	r25
 1a4:	87 95       	ror	r24
 1a6:	96 95       	lsr	r25
 1a8:	87 95       	ror	r24
 1aa:	9c 01       	movw	r18, r24
 1ac:	22 0f       	add	r18, r18
 1ae:	33 1f       	adc	r19, r19
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	82 0f       	add	r24, r18
 1be:	93 1f       	adc	r25, r19
 1c0:	8a 01       	movw	r16, r20
 1c2:	08 1b       	sub	r16, r24
 1c4:	19 0b       	sbc	r17, r25
	value /= 10;
 1c6:	9a 01       	movw	r18, r20
 1c8:	0e 94 52 06 	call	0xca4	; 0xca4 <__umulhisi3>
 1cc:	ac 01       	movw	r20, r24
 1ce:	56 95       	lsr	r21
 1d0:	47 95       	ror	r20
 1d2:	56 95       	lsr	r21
 1d4:	47 95       	ror	r20
 1d6:	56 95       	lsr	r21
 1d8:	47 95       	ror	r20
	uartData[1] = value%10;
 1da:	9a 01       	movw	r18, r20
 1dc:	0e 94 52 06 	call	0xca4	; 0xca4 <__umulhisi3>
 1e0:	96 95       	lsr	r25
 1e2:	87 95       	ror	r24
 1e4:	96 95       	lsr	r25
 1e6:	87 95       	ror	r24
 1e8:	96 95       	lsr	r25
 1ea:	87 95       	ror	r24
 1ec:	9c 01       	movw	r18, r24
 1ee:	22 0f       	add	r18, r18
 1f0:	33 1f       	adc	r19, r19
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	82 0f       	add	r24, r18
 200:	93 1f       	adc	r25, r19
 202:	7a 01       	movw	r14, r20
 204:	e8 1a       	sub	r14, r24
 206:	f9 0a       	sbc	r15, r25
	value /= 10;
 208:	9a 01       	movw	r18, r20
 20a:	0e 94 52 06 	call	0xca4	; 0xca4 <__umulhisi3>
 20e:	ac 01       	movw	r20, r24
 210:	56 95       	lsr	r21
 212:	47 95       	ror	r20
 214:	56 95       	lsr	r21
 216:	47 95       	ror	r20
 218:	56 95       	lsr	r21
 21a:	47 95       	ror	r20
	uartData[0] = value%10;
 21c:	9a 01       	movw	r18, r20
 21e:	0e 94 52 06 	call	0xca4	; 0xca4 <__umulhisi3>
 222:	9c 01       	movw	r18, r24
 224:	36 95       	lsr	r19
 226:	27 95       	ror	r18
 228:	36 95       	lsr	r19
 22a:	27 95       	ror	r18
 22c:	36 95       	lsr	r19
 22e:	27 95       	ror	r18
 230:	c9 01       	movw	r24, r18
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	22 0f       	add	r18, r18
 238:	33 1f       	adc	r19, r19
 23a:	22 0f       	add	r18, r18
 23c:	33 1f       	adc	r19, r19
 23e:	22 0f       	add	r18, r18
 240:	33 1f       	adc	r19, r19
 242:	28 0f       	add	r18, r24
 244:	39 1f       	adc	r19, r25
 246:	ca 01       	movw	r24, r20
 248:	82 1b       	sub	r24, r18
 24a:	93 0b       	sbc	r25, r19
	
	if(uartData[0])
 24c:	88 23       	and	r24, r24
 24e:	c9 f0       	breq	.+50     	; 0x282 <adc_printValue+0x158>
	{
		uart_transmit(uartData[0]+48);
 250:	80 5d       	subi	r24, 0xD0	; 208
 252:	0e 94 0b 04 	call	0x816	; 0x816 <uart_transmit>
		uart_transmit(uartData[1]+48);
 256:	80 e3       	ldi	r24, 0x30	; 48
 258:	8e 0d       	add	r24, r14
 25a:	0e 94 0b 04 	call	0x816	; 0x816 <uart_transmit>
		uart_transmit(',');
 25e:	8c e2       	ldi	r24, 0x2C	; 44
 260:	0e 94 0b 04 	call	0x816	; 0x816 <uart_transmit>
		uart_transmit(uartData[2]+48);
 264:	80 e3       	ldi	r24, 0x30	; 48
 266:	80 0f       	add	r24, r16
 268:	0e 94 0b 04 	call	0x816	; 0x816 <uart_transmit>
		uart_transmit(uartData[3]+48);
 26c:	8c 2f       	mov	r24, r28
 26e:	80 5d       	subi	r24, 0xD0	; 208
 270:	0e 94 0b 04 	call	0x816	; 0x816 <uart_transmit>
		uart_transmit('\r');
 274:	8d e0       	ldi	r24, 0x0D	; 13
 276:	0e 94 0b 04 	call	0x816	; 0x816 <uart_transmit>
		uart_transmit('\n');
 27a:	8a e0       	ldi	r24, 0x0A	; 10
 27c:	0e 94 0b 04 	call	0x816	; 0x816 <uart_transmit>
 280:	15 c0       	rjmp	.+42     	; 0x2ac <adc_printValue+0x182>
	}
	else
	{
		uart_transmit(uartData[1]+48);
 282:	80 e3       	ldi	r24, 0x30	; 48
 284:	8e 0d       	add	r24, r14
 286:	0e 94 0b 04 	call	0x816	; 0x816 <uart_transmit>
		uart_transmit(',');
 28a:	8c e2       	ldi	r24, 0x2C	; 44
 28c:	0e 94 0b 04 	call	0x816	; 0x816 <uart_transmit>
		uart_transmit(uartData[2]+48);
 290:	80 e3       	ldi	r24, 0x30	; 48
 292:	80 0f       	add	r24, r16
 294:	0e 94 0b 04 	call	0x816	; 0x816 <uart_transmit>
		uart_transmit(uartData[3]+48);
 298:	8c 2f       	mov	r24, r28
 29a:	80 5d       	subi	r24, 0xD0	; 208
 29c:	0e 94 0b 04 	call	0x816	; 0x816 <uart_transmit>
		uart_transmit('\r');
 2a0:	8d e0       	ldi	r24, 0x0D	; 13
 2a2:	0e 94 0b 04 	call	0x816	; 0x816 <uart_transmit>
		uart_transmit('\n');
 2a6:	8a e0       	ldi	r24, 0x0A	; 10
 2a8:	0e 94 0b 04 	call	0x816	; 0x816 <uart_transmit>
	}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	ff 90       	pop	r15
 2b6:	ef 90       	pop	r14
 2b8:	df 90       	pop	r13
 2ba:	cf 90       	pop	r12
 2bc:	08 95       	ret

000002be <eeprom_write>:
#include "D:/AtmelRepos/PS1/PS1/Header/eeprom.h"

void eeprom_write(unsigned int address, unsigned char data)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
 2be:	f9 99       	sbic	0x1f, 1	; 31
 2c0:	fe cf       	rjmp	.-4      	; 0x2be <eeprom_write>
	;
	/* Set up address and Data Registers */
	EEAR = address;
 2c2:	92 bd       	out	0x22, r25	; 34
 2c4:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
 2c6:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
 2c8:	fa 9a       	sbi	0x1f, 2	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
 2ca:	f9 9a       	sbi	0x1f, 1	; 31
 2cc:	08 95       	ret

000002ce <eeprom_read>:
}

uint8_t eeprom_read(unsigned int address)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
 2ce:	f9 99       	sbic	0x1f, 1	; 31
 2d0:	fe cf       	rjmp	.-4      	; 0x2ce <eeprom_read>
	;
	/* Set up address register */
	EEAR = address;
 2d2:	92 bd       	out	0x22, r25	; 34
 2d4:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
 2d6:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
 2d8:	80 b5       	in	r24, 0x20	; 32
 2da:	08 95       	ret

000002dc <initDisplay>:
#include "D:/AtmelRepos/PS1/PS1/Header/eeprom.h"

void initDisplay()
{
	/* Initialize the Data Direction Registers as outputs for the 7 segments display*/
	DDRB |= (1 << DDB0) | (1 << DDB1) | (1 << DDB2) | (1 << DDB3) | (1 << DDB4) | (1 << DDB5);
 2dc:	84 b1       	in	r24, 0x04	; 4
 2de:	8f 63       	ori	r24, 0x3F	; 63
 2e0:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << DDD6) | (1 << DDD7);
 2e2:	8a b1       	in	r24, 0x0a	; 10
 2e4:	80 6c       	ori	r24, 0xC0	; 192
 2e6:	8a b9       	out	0x0a, r24	; 10
	display(eeprom_read(0x00u));
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 67 01 	call	0x2ce	; 0x2ce <eeprom_read>
 2f0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <display>
 2f4:	08 95       	ret

000002f6 <initLeds>:
	
}
void initLeds()
{
	  DDRD |= (1 << DDD5) | (1 << DDD3) | (1 << DDD2);
 2f6:	8a b1       	in	r24, 0x0a	; 10
 2f8:	8c 62       	ori	r24, 0x2C	; 44
 2fa:	8a b9       	out	0x0a, r24	; 10
	  PORTD |= (1 << 2) | (1 << 3) | (1 << 5);
 2fc:	8b b1       	in	r24, 0x0b	; 11
 2fe:	8c 62       	ori	r24, 0x2C	; 44
 300:	8b b9       	out	0x0b, r24	; 11
 302:	08 95       	ret

00000304 <initPWM>:
	TIMSK1 |= (1 << OCIE1A);
	sei(); 
}
void initPWM()
{
	OCR0B = 0x00;
 304:	18 bc       	out	0x28, r1	; 40
	// set PWM for 00% duty cycle

	TCCR0A |= (1 << COM0B1);
 306:	84 b5       	in	r24, 0x24	; 36
 308:	80 62       	ori	r24, 0x20	; 32
 30a:	84 bd       	out	0x24, r24	; 36
	// set none-inverting mode

	TCCR0A |= (1 << WGM01) | (1 << WGM00);
 30c:	84 b5       	in	r24, 0x24	; 36
 30e:	83 60       	ori	r24, 0x03	; 3
 310:	84 bd       	out	0x24, r24	; 36
	// set fast PWM Mode

	TCCR0B |= (1 << CS01);
 312:	85 b5       	in	r24, 0x25	; 37
 314:	82 60       	ori	r24, 0x02	; 2
 316:	85 bd       	out	0x25, r24	; 37
 318:	08 95       	ret

0000031a <initPeriodical>:
	// set prescaler to 8 and starts PWM
}
void initPeriodical()
{
		cli();
 31a:	f8 94       	cli
		TCCR1B |= (1 << WGM12);
 31c:	e1 e8       	ldi	r30, 0x81	; 129
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	88 60       	ori	r24, 0x08	; 8
 324:	80 83       	st	Z, r24
		TCCR1B |= (1 << CS12);
 326:	80 81       	ld	r24, Z
 328:	84 60       	ori	r24, 0x04	; 4
 32a:	80 83       	st	Z, r24
		OCR1A   = 0x3F;
 32c:	8f e3       	ldi	r24, 0x3F	; 63
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	90 93 89 00 	sts	0x0089, r25
 334:	80 93 88 00 	sts	0x0088, r24
		TIMSK1 |= (1 << OCIE1A);
 338:	ef e6       	ldi	r30, 0x6F	; 111
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	82 60       	ori	r24, 0x02	; 2
 340:	80 83       	st	Z, r24
		sei();
 342:	78 94       	sei
 344:	08 95       	ret

00000346 <initButtonISR>:
	TIMSK0 |= (1 << OCIE0A);					//Set the ISR COMPA vect
	sei();
}
void initButtonISR()
{
	cli();
 346:	f8 94       	cli
	/*Initializing PC1 as input for the SW button with pull down resistor.*/
	DDRC |= (1 << DDC0);
 348:	38 9a       	sbi	0x07, 0	; 7
	PORTC &= ~(1 << PORTC0);
 34a:	40 98       	cbi	0x08, 0	; 8
	
	PCICR  |= (1 << PCIE1);
 34c:	e8 e6       	ldi	r30, 0x68	; 104
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	82 60       	ori	r24, 0x02	; 2
 354:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8);
 356:	ec e6       	ldi	r30, 0x6C	; 108
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	81 60       	ori	r24, 0x01	; 1
 35e:	80 83       	st	Z, r24
	sei();
 360:	78 94       	sei
 362:	08 95       	ret

00000364 <adcInit>:
}

void adcInit()
{
	ADMUX |= (1 << REFS0);    // use AVcc as the reference
 364:	ec e7       	ldi	r30, 0x7C	; 124
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	80 64       	ori	r24, 0x40	; 64
 36c:	80 83       	st	Z, r24
	ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
 36e:	80 81       	ld	r24, Z
 370:	8f 7d       	andi	r24, 0xDF	; 223
 372:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);    // 128 prescale for 8Mhz
 374:	ea e7       	ldi	r30, 0x7A	; 122
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	87 60       	ori	r24, 0x07	; 7
 37c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);    // Enable the ADC
 37e:	80 81       	ld	r24, Z
 380:	80 68       	ori	r24, 0x80	; 128
 382:	80 83       	st	Z, r24
 384:	08 95       	ret

00000386 <uart_init>:
}

void uart_init(void)
{
	cli();
 386:	f8 94       	cli
	// set baud rate
	unsigned int baud = 207u;//BAUD_PRESCALE;
	
	UBRR0H = (unsigned char) (baud >> 8 );
 388:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)baud;
 38c:	8f ec       	ldi	r24, 0xCF	; 207
 38e:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A |= (1 << U2X0);
 392:	e0 ec       	ldi	r30, 0xC0	; 192
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
 398:	82 60       	ori	r24, 0x02	; 2
 39a:	80 83       	st	Z, r24
	// set frame format ( 8data, 1stop )
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 39c:	e2 ec       	ldi	r30, 0xC2	; 194
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	86 60       	ori	r24, 0x06	; 6
 3a4:	80 83       	st	Z, r24
	// Enable reciever interrupt
	UCSR0B |= (1 << RXCIE0);                    
 3a6:	e1 ec       	ldi	r30, 0xC1	; 193
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	80 68       	ori	r24, 0x80	; 128
 3ae:	80 83       	st	Z, r24
	// enable received and transmitter
	UCSR0B |= ( 1 << RXEN0 ) | ( 1 << TXEN0 );
 3b0:	80 81       	ld	r24, Z
 3b2:	88 61       	ori	r24, 0x18	; 24
 3b4:	80 83       	st	Z, r24
	
	sei();
 3b6:	78 94       	sei
 3b8:	08 95       	ret

000003ba <__vector_18>:
volatile uint16_t count = 0x00u;
volatile uint8_t led3;
uint8_t flags[10];

ISR (USART_RX_vect)
{
 3ba:	1f 92       	push	r1
 3bc:	0f 92       	push	r0
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	0f 92       	push	r0
 3c2:	11 24       	eor	r1, r1
 3c4:	8f 93       	push	r24
	led3 = UDR0;
 3c6:	80 91 c6 00 	lds	r24, 0x00C6
 3ca:	80 93 2d 01 	sts	0x012D, r24
}
 3ce:	8f 91       	pop	r24
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <__vector_11>:

ISR (TIMER1_COMPA_vect)
{
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	2f 93       	push	r18
 3e6:	3f 93       	push	r19
 3e8:	4f 93       	push	r20
 3ea:	5f 93       	push	r21
 3ec:	6f 93       	push	r22
 3ee:	7f 93       	push	r23
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
 3f4:	af 93       	push	r26
 3f6:	bf 93       	push	r27
 3f8:	ef 93       	push	r30
 3fa:	ff 93       	push	r31
	count++;
 3fc:	80 91 1a 01 	lds	r24, 0x011A
 400:	90 91 1b 01 	lds	r25, 0x011B
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	90 93 1b 01 	sts	0x011B, r25
 40a:	80 93 1a 01 	sts	0x011A, r24
	scheduler();
 40e:	0e 94 a2 02 	call	0x544	; 0x544 <scheduler>
}
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	0f 90       	pop	r0
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	0f 90       	pop	r0
 430:	1f 90       	pop	r1
 432:	18 95       	reti

00000434 <__vector_14>:

ISR (TIMER0_COMPA_vect)
{
 434:	1f 92       	push	r1
 436:	0f 92       	push	r0
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	0f 92       	push	r0
 43c:	11 24       	eor	r1, r1
	//count++;
	//scheduler();
}
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <__vector_4>:

ISR(PCINT1_vect) {
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	8f 93       	push	r24
	
	if (PINC & (0x01u))
 454:	30 9b       	sbis	0x06, 0	; 6
 456:	03 c0       	rjmp	.+6      	; 0x45e <__vector_4+0x16>
	{
		flags[BUTTON_SHORT_PRESS_FLAG] = FLAG_SET;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	80 93 22 01 	sts	0x0122, r24
	}
 45e:	8f 91       	pop	r24
 460:	0f 90       	pop	r0
 462:	0f be       	out	0x3f, r0	; 63
 464:	0f 90       	pop	r0
 466:	1f 90       	pop	r1
 468:	18 95       	reti

0000046a <incrementDisplay>:
		index += 0x01u;
	}
}
void incrementDisplay()
{
	if (PINC & (0x01u))
 46a:	30 9b       	sbis	0x06, 0	; 6
 46c:	26 c0       	rjmp	.+76     	; 0x4ba <incrementDisplay+0x50>
	{
		//Button was pressed!
		buttonCount = eeprom_read(0x00u);
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 67 01 	call	0x2ce	; 0x2ce <eeprom_read>
 476:	80 93 2c 01 	sts	0x012C, r24
		if(buttonCount < 10)
 47a:	80 91 2c 01 	lds	r24, 0x012C
 47e:	8a 30       	cpi	r24, 0x0A	; 10
 480:	80 f4       	brcc	.+32     	; 0x4a2 <incrementDisplay+0x38>
		{
			buttonCount++;
 482:	80 91 2c 01 	lds	r24, 0x012C
 486:	8f 5f       	subi	r24, 0xFF	; 255
 488:	80 93 2c 01 	sts	0x012C, r24
			eeprom_write(0x00u,buttonCount);
 48c:	60 91 2c 01 	lds	r22, 0x012C
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 5f 01 	call	0x2be	; 0x2be <eeprom_write>
			display(buttonCount);
 498:	80 91 2c 01 	lds	r24, 0x012C
 49c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <display>
 4a0:	08 95       	ret
		}
		else
		{
			buttonCount = 0x00;
 4a2:	10 92 2c 01 	sts	0x012C, r1
			eeprom_write(0x00u, buttonCount);
 4a6:	60 91 2c 01 	lds	r22, 0x012C
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 5f 01 	call	0x2be	; 0x2be <eeprom_write>
			display(buttonCount);
 4b2:	80 91 2c 01 	lds	r24, 0x012C
 4b6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <display>
 4ba:	08 95       	ret

000004bc <checkVirtualTimers>:

		checkVirtualTimers();
		
}
void checkVirtualTimers()
{
 4bc:	bf 92       	push	r11
 4be:	cf 92       	push	r12
 4c0:	df 92       	push	r13
 4c2:	ef 92       	push	r14
 4c4:	ff 92       	push	r15
 4c6:	0f 93       	push	r16
 4c8:	1f 93       	push	r17
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	c7 e3       	ldi	r28, 0x37	; 55
 4d0:	d1 e0       	ldi	r29, 0x01	; 1
 4d2:	02 e3       	ldi	r16, 0x32	; 50
 4d4:	11 e0       	ldi	r17, 0x01	; 1
 4d6:	0f 2e       	mov	r0, r31
 4d8:	f3 e7       	ldi	r31, 0x73	; 115
 4da:	cf 2e       	mov	r12, r31
 4dc:	f1 e0       	ldi	r31, 0x01	; 1
 4de:	df 2e       	mov	r13, r31
 4e0:	f0 2d       	mov	r31, r0
				timers[index].f();
				timers[index].flag = TIMER_EXPIRED;
			}
			else
			{
				flags[timers[index].module] = FLAG_SET;
 4e2:	bb 24       	eor	r11, r11
 4e4:	b3 94       	inc	r11
{
	uint8_t index = 0x00u;
	
	while(10 > index)
	{
		if(timers[index].flag)
 4e6:	88 81       	ld	r24, Y
 4e8:	88 23       	and	r24, r24
 4ea:	e1 f0       	breq	.+56     	; 0x524 <checkVirtualTimers+0x68>
		{
			if (timers[index].period)
 4ec:	d8 01       	movw	r26, r16
 4ee:	8d 91       	ld	r24, X+
 4f0:	9c 91       	ld	r25, X
 4f2:	11 97       	sbiw	r26, 0x01	; 1
 4f4:	00 97       	sbiw	r24, 0x00	; 0
 4f6:	21 f0       	breq	.+8      	; 0x500 <checkVirtualTimers+0x44>
			{
				timers[index].period -= 0x01u;
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	8d 93       	st	X+, r24
 4fc:	9c 93       	st	X, r25
 4fe:	12 c0       	rjmp	.+36     	; 0x524 <checkVirtualTimers+0x68>
			}
			else if((TIMER_EXPIRED == timers[index].period) && (0x00u != timers[index].f))
 500:	d8 01       	movw	r26, r16
 502:	13 96       	adiw	r26, 0x03	; 3
 504:	ed 91       	ld	r30, X+
 506:	fc 91       	ld	r31, X
 508:	14 97       	sbiw	r26, 0x04	; 4
 50a:	30 97       	sbiw	r30, 0x00	; 0
 50c:	19 f0       	breq	.+6      	; 0x514 <checkVirtualTimers+0x58>
			{
				
				timers[index].f();
 50e:	09 95       	icall
				timers[index].flag = TIMER_EXPIRED;
 510:	18 82       	st	Y, r1
 512:	08 c0       	rjmp	.+16     	; 0x524 <checkVirtualTimers+0x68>
 514:	fe 01       	movw	r30, r28
 516:	33 97       	sbiw	r30, 0x03	; 3
			}
			else
			{
				flags[timers[index].module] = FLAG_SET;
 518:	e0 81       	ld	r30, Z
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	ee 5d       	subi	r30, 0xDE	; 222
 51e:	fe 4f       	sbci	r31, 0xFE	; 254
 520:	b0 82       	st	Z, r11
				timers[index].flag = TIMER_EXPIRED;
 522:	18 82       	st	Y, r1
 524:	26 96       	adiw	r28, 0x06	; 6
 526:	0a 5f       	subi	r16, 0xFA	; 250
 528:	1f 4f       	sbci	r17, 0xFF	; 255
}
void checkVirtualTimers()
{
	uint8_t index = 0x00u;
	
	while(10 > index)
 52a:	cc 15       	cp	r28, r12
 52c:	dd 05       	cpc	r29, r13
 52e:	d9 f6       	brne	.-74     	; 0x4e6 <checkVirtualTimers+0x2a>
				timers[index].flag = TIMER_EXPIRED;
			}
		}
		index += 0x01u;
	}
}
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	1f 91       	pop	r17
 536:	0f 91       	pop	r16
 538:	ff 90       	pop	r15
 53a:	ef 90       	pop	r14
 53c:	df 90       	pop	r13
 53e:	cf 90       	pop	r12
 540:	bf 90       	pop	r11
 542:	08 95       	ret

00000544 <scheduler>:
	
volatile uint8_t buttonCount;

void scheduler(void)
{
	if(count == 1000)
 544:	80 91 1a 01 	lds	r24, 0x011A
 548:	90 91 1b 01 	lds	r25, 0x011B
 54c:	88 3e       	cpi	r24, 0xE8	; 232
 54e:	93 40       	sbci	r25, 0x03	; 3
 550:	11 f5       	brne	.+68     	; 0x596 <scheduler+0x52>
	{			
		//set mode for LED_1
		count = 0x0000u;
 552:	10 92 1b 01 	sts	0x011B, r1
 556:	10 92 1a 01 	sts	0x011A, r1
		if(ledMode < 3)
 55a:	80 91 2e 01 	lds	r24, 0x012E
 55e:	83 30       	cpi	r24, 0x03	; 3
 560:	20 f4       	brcc	.+8      	; 0x56a <scheduler+0x26>
		{
			ledMode += 0x01u;
 562:	8f 5f       	subi	r24, 0xFF	; 255
 564:	80 93 2e 01 	sts	0x012E, r24
 568:	02 c0       	rjmp	.+4      	; 0x56e <scheduler+0x2a>
		}
		else
		{
			ledMode = 0x00u;
 56a:	10 92 2e 01 	sts	0x012E, r1
		}
		uart_print("VALUE: ");
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	91 e0       	ldi	r25, 0x01	; 1
 572:	0e 94 13 04 	call	0x826	; 0x826 <uart_print>
		adc_printValue(temp);
 576:	80 91 1c 01 	lds	r24, 0x011C
 57a:	90 91 1d 01 	lds	r25, 0x011D
 57e:	0e 94 95 00 	call	0x12a	; 0x12a <adc_printValue>
		uart_print("PRECS: ");
 582:	88 e0       	ldi	r24, 0x08	; 8
 584:	91 e0       	ldi	r25, 0x01	; 1
 586:	0e 94 13 04 	call	0x826	; 0x826 <uart_print>
		adc_printValue(prescTemp);
 58a:	80 91 30 01 	lds	r24, 0x0130
 58e:	90 91 31 01 	lds	r25, 0x0131
 592:	0e 94 95 00 	call	0x12a	; 0x12a <adc_printValue>
	}
	if((count % 4) &&(count >=4))
 596:	80 91 1a 01 	lds	r24, 0x011A
 59a:	90 91 1b 01 	lds	r25, 0x011B
 59e:	83 70       	andi	r24, 0x03	; 3
 5a0:	99 27       	eor	r25, r25
 5a2:	89 2b       	or	r24, r25
 5a4:	81 f1       	breq	.+96     	; 0x606 <scheduler+0xc2>
 5a6:	80 91 1a 01 	lds	r24, 0x011A
 5aa:	90 91 1b 01 	lds	r25, 0x011B
 5ae:	04 97       	sbiw	r24, 0x04	; 4
 5b0:	50 f1       	brcs	.+84     	; 0x606 <scheduler+0xc2>
	{	
		if((LED_MODE_INCREMENT == ledMode) && (OCR0B < 255))
 5b2:	80 91 2e 01 	lds	r24, 0x012E
 5b6:	81 30       	cpi	r24, 0x01	; 1
 5b8:	39 f4       	brne	.+14     	; 0x5c8 <scheduler+0x84>
 5ba:	88 b5       	in	r24, 0x28	; 40
 5bc:	8f 3f       	cpi	r24, 0xFF	; 255
 5be:	a9 f0       	breq	.+42     	; 0x5ea <scheduler+0xa6>
		{
			OCR0B += 0x01u;
 5c0:	88 b5       	in	r24, 0x28	; 40
 5c2:	8f 5f       	subi	r24, 0xFF	; 255
 5c4:	88 bd       	out	0x28, r24	; 40
 5c6:	11 c0       	rjmp	.+34     	; 0x5ea <scheduler+0xa6>
		}
		else if((LED_MODE_DECREMENT == ledMode) && (OCR0B > 0))
 5c8:	83 30       	cpi	r24, 0x03	; 3
 5ca:	39 f4       	brne	.+14     	; 0x5da <scheduler+0x96>
 5cc:	88 b5       	in	r24, 0x28	; 40
 5ce:	88 23       	and	r24, r24
 5d0:	61 f0       	breq	.+24     	; 0x5ea <scheduler+0xa6>
		{
			OCR0B -= 0x01u;
 5d2:	88 b5       	in	r24, 0x28	; 40
 5d4:	81 50       	subi	r24, 0x01	; 1
 5d6:	88 bd       	out	0x28, r24	; 40
 5d8:	08 c0       	rjmp	.+16     	; 0x5ea <scheduler+0xa6>
		}
		else if(LED_MODE_HIGH == ledMode)
 5da:	82 30       	cpi	r24, 0x02	; 2
 5dc:	19 f4       	brne	.+6      	; 0x5e4 <scheduler+0xa0>
		{
			OCR0B = 0xFFu;
 5de:	8f ef       	ldi	r24, 0xFF	; 255
 5e0:	88 bd       	out	0x28, r24	; 40
 5e2:	03 c0       	rjmp	.+6      	; 0x5ea <scheduler+0xa6>
		}
		else if(LED_MODE_STOP == ledMode)
 5e4:	81 11       	cpse	r24, r1
 5e6:	01 c0       	rjmp	.+2      	; 0x5ea <scheduler+0xa6>
		{
			OCR0B = 0x00u;
 5e8:	18 bc       	out	0x28, r1	; 40
		}
		if(flags[BUTTON_SHORT_PRESS_FLAG])
 5ea:	80 91 22 01 	lds	r24, 0x0122
 5ee:	88 23       	and	r24, r24
 5f0:	51 f0       	breq	.+20     	; 0x606 <scheduler+0xc2>
		{
			startNewVirtualTimer(30,BUTTON_MODULE,incrementDisplay,1);
 5f2:	21 e0       	ldi	r18, 0x01	; 1
 5f4:	45 e3       	ldi	r20, 0x35	; 53
 5f6:	52 e0       	ldi	r21, 0x02	; 2
 5f8:	61 e0       	ldi	r22, 0x01	; 1
 5fa:	8e e1       	ldi	r24, 0x1E	; 30
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <startNewVirtualTimer>
			flags[BUTTON_SHORT_PRESS_FLAG] = FLAG_CLEAR;
 602:	10 92 22 01 	sts	0x0122, r1
		}
	}
	if((count % 5 == 0) && (count >= 5))
 606:	40 91 1a 01 	lds	r20, 0x011A
 60a:	50 91 1b 01 	lds	r21, 0x011B
 60e:	9a 01       	movw	r18, r20
 610:	ad ec       	ldi	r26, 0xCD	; 205
 612:	bc ec       	ldi	r27, 0xCC	; 204
 614:	0e 94 52 06 	call	0xca4	; 0xca4 <__umulhisi3>
 618:	96 95       	lsr	r25
 61a:	87 95       	ror	r24
 61c:	96 95       	lsr	r25
 61e:	87 95       	ror	r24
 620:	9c 01       	movw	r18, r24
 622:	22 0f       	add	r18, r18
 624:	33 1f       	adc	r19, r19
 626:	22 0f       	add	r18, r18
 628:	33 1f       	adc	r19, r19
 62a:	82 0f       	add	r24, r18
 62c:	93 1f       	adc	r25, r19
 62e:	48 17       	cp	r20, r24
 630:	59 07       	cpc	r21, r25
 632:	09 f0       	breq	.+2      	; 0x636 <scheduler+0xf2>
 634:	4b c0       	rjmp	.+150    	; 0x6cc <scheduler+0x188>
 636:	80 91 1a 01 	lds	r24, 0x011A
 63a:	90 91 1b 01 	lds	r25, 0x011B
 63e:	05 97       	sbiw	r24, 0x05	; 5
 640:	08 f4       	brcc	.+2      	; 0x644 <scheduler+0x100>
 642:	44 c0       	rjmp	.+136    	; 0x6cc <scheduler+0x188>
	{
		if(tempCount < 25)
 644:	80 91 2f 01 	lds	r24, 0x012F
 648:	89 31       	cpi	r24, 0x19	; 25
 64a:	10 f5       	brcc	.+68     	; 0x690 <scheduler+0x14c>
		{
			sum += adcRead(TEMP_SENZOR);
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	0e 94 64 00 	call	0xc8	; 0xc8 <adcRead>
 652:	bc 01       	movw	r22, r24
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	0e 94 91 05 	call	0xb22	; 0xb22 <__floatunsisf>
 65c:	9b 01       	movw	r18, r22
 65e:	ac 01       	movw	r20, r24
 660:	60 91 1e 01 	lds	r22, 0x011E
 664:	70 91 1f 01 	lds	r23, 0x011F
 668:	80 91 20 01 	lds	r24, 0x0120
 66c:	90 91 21 01 	lds	r25, 0x0121
 670:	0e 94 99 04 	call	0x932	; 0x932 <__addsf3>
 674:	60 93 1e 01 	sts	0x011E, r22
 678:	70 93 1f 01 	sts	0x011F, r23
 67c:	80 93 20 01 	sts	0x0120, r24
 680:	90 93 21 01 	sts	0x0121, r25
			tempCount +=1;
 684:	80 91 2f 01 	lds	r24, 0x012F
 688:	8f 5f       	subi	r24, 0xFF	; 255
 68a:	80 93 2f 01 	sts	0x012F, r24
 68e:	1e c0       	rjmp	.+60     	; 0x6cc <scheduler+0x188>
		}
		else
		{
			temp = sum / 25;
 690:	20 e0       	ldi	r18, 0x00	; 0
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	48 ec       	ldi	r20, 0xC8	; 200
 696:	51 e4       	ldi	r21, 0x41	; 65
 698:	60 91 1e 01 	lds	r22, 0x011E
 69c:	70 91 1f 01 	lds	r23, 0x011F
 6a0:	80 91 20 01 	lds	r24, 0x0120
 6a4:	90 91 21 01 	lds	r25, 0x0121
 6a8:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__divsf3>
 6ac:	0e 94 65 05 	call	0xaca	; 0xaca <__fixunssfsi>
 6b0:	70 93 1d 01 	sts	0x011D, r23
 6b4:	60 93 1c 01 	sts	0x011C, r22
			sum = 0x00u;
 6b8:	10 92 1e 01 	sts	0x011E, r1
 6bc:	10 92 1f 01 	sts	0x011F, r1
 6c0:	10 92 20 01 	sts	0x0120, r1
 6c4:	10 92 21 01 	sts	0x0121, r1
			tempCount = 0x00u;
 6c8:	10 92 2f 01 	sts	0x012F, r1
		}
	}
	 if((count % 10 == 0) && (count >= 10)) // every 10 ms check temperature
 6cc:	40 91 1a 01 	lds	r20, 0x011A
 6d0:	50 91 1b 01 	lds	r21, 0x011B
 6d4:	9a 01       	movw	r18, r20
 6d6:	ad ec       	ldi	r26, 0xCD	; 205
 6d8:	bc ec       	ldi	r27, 0xCC	; 204
 6da:	0e 94 52 06 	call	0xca4	; 0xca4 <__umulhisi3>
 6de:	96 95       	lsr	r25
 6e0:	87 95       	ror	r24
 6e2:	96 95       	lsr	r25
 6e4:	87 95       	ror	r24
 6e6:	96 95       	lsr	r25
 6e8:	87 95       	ror	r24
 6ea:	9c 01       	movw	r18, r24
 6ec:	22 0f       	add	r18, r18
 6ee:	33 1f       	adc	r19, r19
 6f0:	88 0f       	add	r24, r24
 6f2:	99 1f       	adc	r25, r25
 6f4:	88 0f       	add	r24, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	88 0f       	add	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	82 0f       	add	r24, r18
 6fe:	93 1f       	adc	r25, r19
 700:	48 17       	cp	r20, r24
 702:	59 07       	cpc	r21, r25
 704:	09 f5       	brne	.+66     	; 0x748 <scheduler+0x204>
 706:	80 91 1a 01 	lds	r24, 0x011A
 70a:	90 91 1b 01 	lds	r25, 0x011B
 70e:	0a 97       	sbiw	r24, 0x0a	; 10
 710:	d8 f0       	brcs	.+54     	; 0x748 <scheduler+0x204>
	{
		prescTemp = adcGetPrescription(adcRead(REF_TEMP))+50;
 712:	83 e0       	ldi	r24, 0x03	; 3
 714:	0e 94 64 00 	call	0xc8	; 0xc8 <adcRead>
 718:	0e 94 85 00 	call	0x10a	; 0x10a <adcGetPrescription>
 71c:	c2 96       	adiw	r24, 0x32	; 50
 71e:	90 93 31 01 	sts	0x0131, r25
 722:	80 93 30 01 	sts	0x0130, r24
		if(temp > (prescTemp))
 726:	20 91 1c 01 	lds	r18, 0x011C
 72a:	30 91 1d 01 	lds	r19, 0x011D
 72e:	82 17       	cp	r24, r18
 730:	93 07       	cpc	r25, r19
 732:	20 f4       	brcc	.+8      	; 0x73c <scheduler+0x1f8>
		{
			led_ON(LED_2);
 734:	82 e0       	ldi	r24, 0x02	; 2
 736:	0e 94 2e 04 	call	0x85c	; 0x85c <led_ON>
 73a:	06 c0       	rjmp	.+12     	; 0x748 <scheduler+0x204>
		}
		else if(temp < (prescTemp))
 73c:	28 17       	cp	r18, r24
 73e:	39 07       	cpc	r19, r25
 740:	18 f4       	brcc	.+6      	; 0x748 <scheduler+0x204>
		{
			led_OFF(LED_2);
 742:	82 e0       	ldi	r24, 0x02	; 2
 744:	0e 94 3a 04 	call	0x874	; 0x874 <led_OFF>
		}
	}
	 if(count % 20 == 0) // every 20 ms check if A or S was pressed
 748:	40 91 1a 01 	lds	r20, 0x011A
 74c:	50 91 1b 01 	lds	r21, 0x011B
 750:	9a 01       	movw	r18, r20
 752:	ad ec       	ldi	r26, 0xCD	; 205
 754:	bc ec       	ldi	r27, 0xCC	; 204
 756:	0e 94 52 06 	call	0xca4	; 0xca4 <__umulhisi3>
 75a:	92 95       	swap	r25
 75c:	82 95       	swap	r24
 75e:	8f 70       	andi	r24, 0x0F	; 15
 760:	89 27       	eor	r24, r25
 762:	9f 70       	andi	r25, 0x0F	; 15
 764:	89 27       	eor	r24, r25
 766:	64 e1       	ldi	r22, 0x14	; 20
 768:	68 9f       	mul	r22, r24
 76a:	90 01       	movw	r18, r0
 76c:	69 9f       	mul	r22, r25
 76e:	30 0d       	add	r19, r0
 770:	11 24       	eor	r1, r1
 772:	42 17       	cp	r20, r18
 774:	53 07       	cpc	r21, r19
 776:	11 f4       	brne	.+4      	; 0x77c <scheduler+0x238>
	{
		check_Led3();
 778:	0e 94 47 04 	call	0x88e	; 0x88e <check_Led3>
	}
	if((count % 100 == 0) && (count > 100))
 77c:	40 91 1a 01 	lds	r20, 0x011A
 780:	50 91 1b 01 	lds	r21, 0x011B
 784:	9a 01       	movw	r18, r20
 786:	36 95       	lsr	r19
 788:	27 95       	ror	r18
 78a:	36 95       	lsr	r19
 78c:	27 95       	ror	r18
 78e:	ab e7       	ldi	r26, 0x7B	; 123
 790:	b4 e1       	ldi	r27, 0x14	; 20
 792:	0e 94 52 06 	call	0xca4	; 0xca4 <__umulhisi3>
 796:	96 95       	lsr	r25
 798:	87 95       	ror	r24
 79a:	64 e6       	ldi	r22, 0x64	; 100
 79c:	68 9f       	mul	r22, r24
 79e:	90 01       	movw	r18, r0
 7a0:	69 9f       	mul	r22, r25
 7a2:	30 0d       	add	r19, r0
 7a4:	11 24       	eor	r1, r1
 7a6:	42 17       	cp	r20, r18
 7a8:	53 07       	cpc	r21, r19
 7aa:	21 f4       	brne	.+8      	; 0x7b4 <scheduler+0x270>
 7ac:	80 91 1a 01 	lds	r24, 0x011A
 7b0:	90 91 1b 01 	lds	r25, 0x011B
	{

	}

		checkVirtualTimers();
 7b4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <checkVirtualTimers>
 7b8:	08 95       	ret

000007ba <clear>:
		eeprom_write(0x00u,0x00u);
	}
}
void clear()
{
	PORTB &= ~(1 << PORTB0) & ~(1 << PORTB1) & ~(1 << PORTB2) & ~(1 << PORTB3) & ~(1 << PORTB4) & ~(1 << PORTB5);
 7ba:	85 b1       	in	r24, 0x05	; 5
 7bc:	80 7c       	andi	r24, 0xC0	; 192
 7be:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~(1 << PORTD6) & ~(1 << PORTD7);
 7c0:	8b b1       	in	r24, 0x0b	; 11
 7c2:	8f 73       	andi	r24, 0x3F	; 63
 7c4:	8b b9       	out	0x0b, r24	; 11
 7c6:	08 95       	ret

000007c8 <display>:
#include "D:\AtmelRepos\PS1\PS1\Header\eeprom.h"

const uint8_t segDisplay[10] = {0x3Fu, 0x06u, 0x1Bu, 0x0Fu, 0x26u, 0x2Du, 0x3D, 0x07u, 0x3F, 0x2F};
volatile uint8_t buttonCount = 0x00u;
void display(uint8_t value)
{
 7c8:	cf 93       	push	r28
 7ca:	c8 2f       	mov	r28, r24
	clear();
 7cc:	0e 94 dd 03 	call	0x7ba	; 0x7ba <clear>
	if(value < 10)
 7d0:	ca 30       	cpi	r28, 0x0A	; 10
 7d2:	a8 f4       	brcc	.+42     	; 0x7fe <display+0x36>
	{
		if((value != 0x00) & (value != 0x01) & (value != 0x07))
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	c7 30       	cpi	r28, 0x07	; 7
 7d8:	09 f4       	brne	.+2      	; 0x7dc <display+0x14>
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	88 23       	and	r24, r24
 7de:	31 f0       	breq	.+12     	; 0x7ec <display+0x24>
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	c2 30       	cpi	r28, 0x02	; 2
 7e4:	08 f4       	brcc	.+2      	; 0x7e8 <display+0x20>
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	81 11       	cpse	r24, r1
		{
			PORTD |= (1 << PORTD6);
 7ea:	5e 9a       	sbi	0x0b, 6	; 11
		}
		PORTB |= segDisplay[value];
 7ec:	95 b1       	in	r25, 0x05	; 5
 7ee:	ec 2f       	mov	r30, r28
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	e0 5f       	subi	r30, 0xF0	; 240
 7f4:	fe 4f       	sbci	r31, 0xFE	; 254
 7f6:	80 81       	ld	r24, Z
 7f8:	89 2b       	or	r24, r25
 7fa:	85 b9       	out	0x05, r24	; 5
 7fc:	0a c0       	rjmp	.+20     	; 0x812 <display+0x4a>
	}
	else
	{
		PORTB |= segDisplay[0x00u];
 7fe:	85 b1       	in	r24, 0x05	; 5
 800:	8f 63       	ori	r24, 0x3F	; 63
 802:	85 b9       	out	0x05, r24	; 5
		buttonCount = 0x00;
 804:	10 92 2c 01 	sts	0x012C, r1
		eeprom_write(0x00u,0x00u);
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	0e 94 5f 01 	call	0x2be	; 0x2be <eeprom_write>
	}
}
 812:	cf 91       	pop	r28
 814:	08 95       	ret

00000816 <uart_transmit>:

// transmit a char to uart
void uart_transmit( unsigned char data )
{
	// wait for empty transmit buffer
	while ( ! ( UCSR0A & ( 1 << UDRE0 ) ) )
 816:	e0 ec       	ldi	r30, 0xC0	; 192
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	90 81       	ld	r25, Z
 81c:	95 ff       	sbrs	r25, 5
 81e:	fd cf       	rjmp	.-6      	; 0x81a <uart_transmit+0x4>
	;
	// put data into buffer, sends data
	UDR0 = data;
 820:	80 93 c6 00 	sts	0x00C6, r24
 824:	08 95       	ret

00000826 <uart_print>:
}
// write a string to the uart
void uart_print( char data[] )
{
 826:	0f 93       	push	r16
 828:	1f 93       	push	r17
 82a:	cf 93       	push	r28
 82c:	df 93       	push	r29
	uint8_t count = 0;
	uint8_t length = strlen(data);
 82e:	fc 01       	movw	r30, r24
 830:	01 90       	ld	r0, Z+
 832:	00 20       	and	r0, r0
 834:	e9 f7       	brne	.-6      	; 0x830 <uart_print+0xa>
 836:	31 97       	sbiw	r30, 0x01	; 1
 838:	1e 2f       	mov	r17, r30
 83a:	18 1b       	sub	r17, r24
	
	for ( count = 0; count < length; count++ )
 83c:	51 f0       	breq	.+20     	; 0x852 <uart_print+0x2c>
 83e:	08 2f       	mov	r16, r24
 840:	c0 2f       	mov	r28, r16
 842:	d9 2f       	mov	r29, r25
	uart_transmit(data[count]);
 844:	89 91       	ld	r24, Y+
 846:	0e 94 0b 04 	call	0x816	; 0x816 <uart_transmit>
 84a:	8c 2f       	mov	r24, r28
 84c:	80 1b       	sub	r24, r16
void uart_print( char data[] )
{
	uint8_t count = 0;
	uint8_t length = strlen(data);
	
	for ( count = 0; count < length; count++ )
 84e:	81 17       	cp	r24, r17
 850:	c8 f3       	brcs	.-14     	; 0x844 <uart_print+0x1e>
	uart_transmit(data[count]);
}
 852:	df 91       	pop	r29
 854:	cf 91       	pop	r28
 856:	1f 91       	pop	r17
 858:	0f 91       	pop	r16
 85a:	08 95       	ret

0000085c <led_ON>:

volatile uint8_t led3 ;

void led_ON(uint8_t led)
{
	PORTD &= ~(1 << led);
 85c:	9b b1       	in	r25, 0x0b	; 11
 85e:	21 e0       	ldi	r18, 0x01	; 1
 860:	30 e0       	ldi	r19, 0x00	; 0
 862:	02 c0       	rjmp	.+4      	; 0x868 <led_ON+0xc>
 864:	22 0f       	add	r18, r18
 866:	33 1f       	adc	r19, r19
 868:	8a 95       	dec	r24
 86a:	e2 f7       	brpl	.-8      	; 0x864 <led_ON+0x8>
 86c:	20 95       	com	r18
 86e:	92 23       	and	r25, r18
 870:	9b b9       	out	0x0b, r25	; 11
 872:	08 95       	ret

00000874 <led_OFF>:
}

void led_OFF(uint8_t led)
{
	PORTD |= (1 << led);
 874:	4b b1       	in	r20, 0x0b	; 11
 876:	21 e0       	ldi	r18, 0x01	; 1
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	b9 01       	movw	r22, r18
 87c:	02 c0       	rjmp	.+4      	; 0x882 <led_OFF+0xe>
 87e:	66 0f       	add	r22, r22
 880:	77 1f       	adc	r23, r23
 882:	8a 95       	dec	r24
 884:	e2 f7       	brpl	.-8      	; 0x87e <led_OFF+0xa>
 886:	cb 01       	movw	r24, r22
 888:	84 2b       	or	r24, r20
 88a:	8b b9       	out	0x0b, r24	; 11
 88c:	08 95       	ret

0000088e <check_Led3>:
	PORTD ^= (1 << led);
}

void check_Led3(void)
{
	if(led3 == 0x41 || led3 == 0x61)
 88e:	80 91 2d 01 	lds	r24, 0x012D
 892:	81 34       	cpi	r24, 0x41	; 65
 894:	21 f0       	breq	.+8      	; 0x89e <check_Led3+0x10>
 896:	80 91 2d 01 	lds	r24, 0x012D
 89a:	81 36       	cpi	r24, 0x61	; 97
 89c:	29 f4       	brne	.+10     	; 0x8a8 <check_Led3+0x1a>
	{
		led_ON(LED_3);
 89e:	83 e0       	ldi	r24, 0x03	; 3
 8a0:	0e 94 2e 04 	call	0x85c	; 0x85c <led_ON>
		led3 = 0x00;
 8a4:	10 92 2d 01 	sts	0x012D, r1
	}
	if(led3 == 0x53 || led3 == 0x73)
 8a8:	80 91 2d 01 	lds	r24, 0x012D
 8ac:	83 35       	cpi	r24, 0x53	; 83
 8ae:	21 f0       	breq	.+8      	; 0x8b8 <check_Led3+0x2a>
 8b0:	80 91 2d 01 	lds	r24, 0x012D
 8b4:	83 37       	cpi	r24, 0x73	; 115
 8b6:	29 f4       	brne	.+10     	; 0x8c2 <check_Led3+0x34>
	{
		led_OFF(LED_3);
 8b8:	83 e0       	ldi	r24, 0x03	; 3
 8ba:	0e 94 3a 04 	call	0x874	; 0x874 <led_OFF>
		led3 = 0x00;
 8be:	10 92 2d 01 	sts	0x012D, r1
 8c2:	08 95       	ret

000008c4 <initVirtualTimers>:
#include "D:/AtmelRepos/PS1/PS1/Header/util.h"

virtualTimer_T timers[10];

void initVirtualTimers()
{
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	e4 e3       	ldi	r30, 0x34	; 52
 8ca:	f1 e0       	ldi	r31, 0x01	; 1
 8cc:	a7 e3       	ldi	r26, 0x37	; 55
 8ce:	b1 e0       	ldi	r27, 0x01	; 1
 8d0:	86 e7       	ldi	r24, 0x76	; 118
 8d2:	91 e0       	ldi	r25, 0x01	; 1
 8d4:	ef 01       	movw	r28, r30
 8d6:	22 97       	sbiw	r28, 0x02	; 2
	uint8_t index = 0x00u;
	for(index = 0x00u; index < 0x0Bu; index++)
	{
		timers[index].period = TIMER_EXPIRED;
 8d8:	19 82       	std	Y+1, r1	; 0x01
 8da:	18 82       	st	Y, r1
		timers[index].module = SHEDULER_MODULE;
 8dc:	10 82       	st	Z, r1
		timers[index].f		 = 0x00u;
 8de:	12 82       	std	Z+2, r1	; 0x02
 8e0:	11 82       	std	Z+1, r1	; 0x01
		timers[index].flag   = FLAG_CLEAR;
 8e2:	1c 92       	st	X, r1
 8e4:	36 96       	adiw	r30, 0x06	; 6
 8e6:	16 96       	adiw	r26, 0x06	; 6
virtualTimer_T timers[10];

void initVirtualTimers()
{
	uint8_t index = 0x00u;
	for(index = 0x00u; index < 0x0Bu; index++)
 8e8:	e8 17       	cp	r30, r24
 8ea:	f9 07       	cpc	r31, r25
 8ec:	99 f7       	brne	.-26     	; 0x8d4 <initVirtualTimers+0x10>
		timers[index].period = TIMER_EXPIRED;
		timers[index].module = SHEDULER_MODULE;
		timers[index].f		 = 0x00u;
		timers[index].flag   = FLAG_CLEAR;
	}
}
 8ee:	df 91       	pop	r29
 8f0:	cf 91       	pop	r28
 8f2:	08 95       	ret

000008f4 <startNewVirtualTimer>:
uint8_t startNewVirtualTimer(uint16_t time, uint8_t module, callback fnc, uint8_t flag)
{
 8f4:	a7 e3       	ldi	r26, 0x37	; 55
 8f6:	b1 e0       	ldi	r27, 0x01	; 1
 8f8:	e0 e0       	ldi	r30, 0x00	; 0
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t index = 0;
	uint8_t timerStarted = 0x00u;
	while(index < 11)
	{
		if(TIMER_EMPTY == timers[index].flag)
 8fc:	9f 01       	movw	r18, r30
 8fe:	7c 91       	ld	r23, X
 900:	77 23       	and	r23, r23
 902:	19 f0       	breq	.+6      	; 0x90a <__stack+0xb>
 904:	31 96       	adiw	r30, 0x01	; 1
 906:	16 96       	adiw	r26, 0x06	; 6
 908:	f9 cf       	rjmp	.-14     	; 0x8fc <startNewVirtualTimer+0x8>
		{
			timerStarted = 0x01u;
			timers[index].flag = 0x01u;
 90a:	df 01       	movw	r26, r30
 90c:	aa 0f       	add	r26, r26
 90e:	bb 1f       	adc	r27, r27
 910:	fd 01       	movw	r30, r26
 912:	e2 0f       	add	r30, r18
 914:	f3 1f       	adc	r31, r19
 916:	ee 0f       	add	r30, r30
 918:	ff 1f       	adc	r31, r31
 91a:	ee 5c       	subi	r30, 0xCE	; 206
 91c:	fe 4f       	sbci	r31, 0xFE	; 254
 91e:	71 e0       	ldi	r23, 0x01	; 1
 920:	75 83       	std	Z+5, r23	; 0x05
			timers[index].period = time;
 922:	91 83       	std	Z+1, r25	; 0x01
 924:	80 83       	st	Z, r24
			timers[index].module = module;
 926:	62 83       	std	Z+2, r22	; 0x02
			timers[index].f = fnc;
 928:	54 83       	std	Z+4, r21	; 0x04
 92a:	43 83       	std	Z+3, r20	; 0x03
	}
	else
	{
		return 0x00u;
	}
}
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	08 95       	ret

00000930 <__subsf3>:
 930:	50 58       	subi	r21, 0x80	; 128

00000932 <__addsf3>:
 932:	bb 27       	eor	r27, r27
 934:	aa 27       	eor	r26, r26
 936:	0e d0       	rcall	.+28     	; 0x954 <__addsf3x>
 938:	48 c1       	rjmp	.+656    	; 0xbca <__fp_round>
 93a:	39 d1       	rcall	.+626    	; 0xbae <__fp_pscA>
 93c:	30 f0       	brcs	.+12     	; 0x94a <__addsf3+0x18>
 93e:	3e d1       	rcall	.+636    	; 0xbbc <__fp_pscB>
 940:	20 f0       	brcs	.+8      	; 0x94a <__addsf3+0x18>
 942:	31 f4       	brne	.+12     	; 0x950 <__addsf3+0x1e>
 944:	9f 3f       	cpi	r25, 0xFF	; 255
 946:	11 f4       	brne	.+4      	; 0x94c <__addsf3+0x1a>
 948:	1e f4       	brtc	.+6      	; 0x950 <__addsf3+0x1e>
 94a:	2e c1       	rjmp	.+604    	; 0xba8 <__fp_nan>
 94c:	0e f4       	brtc	.+2      	; 0x950 <__addsf3+0x1e>
 94e:	e0 95       	com	r30
 950:	e7 fb       	bst	r30, 7
 952:	24 c1       	rjmp	.+584    	; 0xb9c <__fp_inf>

00000954 <__addsf3x>:
 954:	e9 2f       	mov	r30, r25
 956:	4a d1       	rcall	.+660    	; 0xbec <__fp_split3>
 958:	80 f3       	brcs	.-32     	; 0x93a <__addsf3+0x8>
 95a:	ba 17       	cp	r27, r26
 95c:	62 07       	cpc	r22, r18
 95e:	73 07       	cpc	r23, r19
 960:	84 07       	cpc	r24, r20
 962:	95 07       	cpc	r25, r21
 964:	18 f0       	brcs	.+6      	; 0x96c <__addsf3x+0x18>
 966:	71 f4       	brne	.+28     	; 0x984 <__addsf3x+0x30>
 968:	9e f5       	brtc	.+102    	; 0x9d0 <__addsf3x+0x7c>
 96a:	62 c1       	rjmp	.+708    	; 0xc30 <__fp_zero>
 96c:	0e f4       	brtc	.+2      	; 0x970 <__addsf3x+0x1c>
 96e:	e0 95       	com	r30
 970:	0b 2e       	mov	r0, r27
 972:	ba 2f       	mov	r27, r26
 974:	a0 2d       	mov	r26, r0
 976:	0b 01       	movw	r0, r22
 978:	b9 01       	movw	r22, r18
 97a:	90 01       	movw	r18, r0
 97c:	0c 01       	movw	r0, r24
 97e:	ca 01       	movw	r24, r20
 980:	a0 01       	movw	r20, r0
 982:	11 24       	eor	r1, r1
 984:	ff 27       	eor	r31, r31
 986:	59 1b       	sub	r21, r25
 988:	99 f0       	breq	.+38     	; 0x9b0 <__addsf3x+0x5c>
 98a:	59 3f       	cpi	r21, 0xF9	; 249
 98c:	50 f4       	brcc	.+20     	; 0x9a2 <__addsf3x+0x4e>
 98e:	50 3e       	cpi	r21, 0xE0	; 224
 990:	68 f1       	brcs	.+90     	; 0x9ec <__addsf3x+0x98>
 992:	1a 16       	cp	r1, r26
 994:	f0 40       	sbci	r31, 0x00	; 0
 996:	a2 2f       	mov	r26, r18
 998:	23 2f       	mov	r18, r19
 99a:	34 2f       	mov	r19, r20
 99c:	44 27       	eor	r20, r20
 99e:	58 5f       	subi	r21, 0xF8	; 248
 9a0:	f3 cf       	rjmp	.-26     	; 0x988 <__addsf3x+0x34>
 9a2:	46 95       	lsr	r20
 9a4:	37 95       	ror	r19
 9a6:	27 95       	ror	r18
 9a8:	a7 95       	ror	r26
 9aa:	f0 40       	sbci	r31, 0x00	; 0
 9ac:	53 95       	inc	r21
 9ae:	c9 f7       	brne	.-14     	; 0x9a2 <__addsf3x+0x4e>
 9b0:	7e f4       	brtc	.+30     	; 0x9d0 <__addsf3x+0x7c>
 9b2:	1f 16       	cp	r1, r31
 9b4:	ba 0b       	sbc	r27, r26
 9b6:	62 0b       	sbc	r22, r18
 9b8:	73 0b       	sbc	r23, r19
 9ba:	84 0b       	sbc	r24, r20
 9bc:	ba f0       	brmi	.+46     	; 0x9ec <__addsf3x+0x98>
 9be:	91 50       	subi	r25, 0x01	; 1
 9c0:	a1 f0       	breq	.+40     	; 0x9ea <__addsf3x+0x96>
 9c2:	ff 0f       	add	r31, r31
 9c4:	bb 1f       	adc	r27, r27
 9c6:	66 1f       	adc	r22, r22
 9c8:	77 1f       	adc	r23, r23
 9ca:	88 1f       	adc	r24, r24
 9cc:	c2 f7       	brpl	.-16     	; 0x9be <__addsf3x+0x6a>
 9ce:	0e c0       	rjmp	.+28     	; 0x9ec <__addsf3x+0x98>
 9d0:	ba 0f       	add	r27, r26
 9d2:	62 1f       	adc	r22, r18
 9d4:	73 1f       	adc	r23, r19
 9d6:	84 1f       	adc	r24, r20
 9d8:	48 f4       	brcc	.+18     	; 0x9ec <__addsf3x+0x98>
 9da:	87 95       	ror	r24
 9dc:	77 95       	ror	r23
 9de:	67 95       	ror	r22
 9e0:	b7 95       	ror	r27
 9e2:	f7 95       	ror	r31
 9e4:	9e 3f       	cpi	r25, 0xFE	; 254
 9e6:	08 f0       	brcs	.+2      	; 0x9ea <__addsf3x+0x96>
 9e8:	b3 cf       	rjmp	.-154    	; 0x950 <__addsf3+0x1e>
 9ea:	93 95       	inc	r25
 9ec:	88 0f       	add	r24, r24
 9ee:	08 f0       	brcs	.+2      	; 0x9f2 <__addsf3x+0x9e>
 9f0:	99 27       	eor	r25, r25
 9f2:	ee 0f       	add	r30, r30
 9f4:	97 95       	ror	r25
 9f6:	87 95       	ror	r24
 9f8:	08 95       	ret

000009fa <__divsf3>:
 9fa:	0c d0       	rcall	.+24     	; 0xa14 <__divsf3x>
 9fc:	e6 c0       	rjmp	.+460    	; 0xbca <__fp_round>
 9fe:	de d0       	rcall	.+444    	; 0xbbc <__fp_pscB>
 a00:	40 f0       	brcs	.+16     	; 0xa12 <__divsf3+0x18>
 a02:	d5 d0       	rcall	.+426    	; 0xbae <__fp_pscA>
 a04:	30 f0       	brcs	.+12     	; 0xa12 <__divsf3+0x18>
 a06:	21 f4       	brne	.+8      	; 0xa10 <__divsf3+0x16>
 a08:	5f 3f       	cpi	r21, 0xFF	; 255
 a0a:	19 f0       	breq	.+6      	; 0xa12 <__divsf3+0x18>
 a0c:	c7 c0       	rjmp	.+398    	; 0xb9c <__fp_inf>
 a0e:	51 11       	cpse	r21, r1
 a10:	10 c1       	rjmp	.+544    	; 0xc32 <__fp_szero>
 a12:	ca c0       	rjmp	.+404    	; 0xba8 <__fp_nan>

00000a14 <__divsf3x>:
 a14:	eb d0       	rcall	.+470    	; 0xbec <__fp_split3>
 a16:	98 f3       	brcs	.-26     	; 0x9fe <__divsf3+0x4>

00000a18 <__divsf3_pse>:
 a18:	99 23       	and	r25, r25
 a1a:	c9 f3       	breq	.-14     	; 0xa0e <__divsf3+0x14>
 a1c:	55 23       	and	r21, r21
 a1e:	b1 f3       	breq	.-20     	; 0xa0c <__divsf3+0x12>
 a20:	95 1b       	sub	r25, r21
 a22:	55 0b       	sbc	r21, r21
 a24:	bb 27       	eor	r27, r27
 a26:	aa 27       	eor	r26, r26
 a28:	62 17       	cp	r22, r18
 a2a:	73 07       	cpc	r23, r19
 a2c:	84 07       	cpc	r24, r20
 a2e:	38 f0       	brcs	.+14     	; 0xa3e <__divsf3_pse+0x26>
 a30:	9f 5f       	subi	r25, 0xFF	; 255
 a32:	5f 4f       	sbci	r21, 0xFF	; 255
 a34:	22 0f       	add	r18, r18
 a36:	33 1f       	adc	r19, r19
 a38:	44 1f       	adc	r20, r20
 a3a:	aa 1f       	adc	r26, r26
 a3c:	a9 f3       	breq	.-22     	; 0xa28 <__divsf3_pse+0x10>
 a3e:	33 d0       	rcall	.+102    	; 0xaa6 <__divsf3_pse+0x8e>
 a40:	0e 2e       	mov	r0, r30
 a42:	3a f0       	brmi	.+14     	; 0xa52 <__divsf3_pse+0x3a>
 a44:	e0 e8       	ldi	r30, 0x80	; 128
 a46:	30 d0       	rcall	.+96     	; 0xaa8 <__divsf3_pse+0x90>
 a48:	91 50       	subi	r25, 0x01	; 1
 a4a:	50 40       	sbci	r21, 0x00	; 0
 a4c:	e6 95       	lsr	r30
 a4e:	00 1c       	adc	r0, r0
 a50:	ca f7       	brpl	.-14     	; 0xa44 <__divsf3_pse+0x2c>
 a52:	29 d0       	rcall	.+82     	; 0xaa6 <__divsf3_pse+0x8e>
 a54:	fe 2f       	mov	r31, r30
 a56:	27 d0       	rcall	.+78     	; 0xaa6 <__divsf3_pse+0x8e>
 a58:	66 0f       	add	r22, r22
 a5a:	77 1f       	adc	r23, r23
 a5c:	88 1f       	adc	r24, r24
 a5e:	bb 1f       	adc	r27, r27
 a60:	26 17       	cp	r18, r22
 a62:	37 07       	cpc	r19, r23
 a64:	48 07       	cpc	r20, r24
 a66:	ab 07       	cpc	r26, r27
 a68:	b0 e8       	ldi	r27, 0x80	; 128
 a6a:	09 f0       	breq	.+2      	; 0xa6e <__divsf3_pse+0x56>
 a6c:	bb 0b       	sbc	r27, r27
 a6e:	80 2d       	mov	r24, r0
 a70:	bf 01       	movw	r22, r30
 a72:	ff 27       	eor	r31, r31
 a74:	93 58       	subi	r25, 0x83	; 131
 a76:	5f 4f       	sbci	r21, 0xFF	; 255
 a78:	2a f0       	brmi	.+10     	; 0xa84 <__divsf3_pse+0x6c>
 a7a:	9e 3f       	cpi	r25, 0xFE	; 254
 a7c:	51 05       	cpc	r21, r1
 a7e:	68 f0       	brcs	.+26     	; 0xa9a <__divsf3_pse+0x82>
 a80:	8d c0       	rjmp	.+282    	; 0xb9c <__fp_inf>
 a82:	d7 c0       	rjmp	.+430    	; 0xc32 <__fp_szero>
 a84:	5f 3f       	cpi	r21, 0xFF	; 255
 a86:	ec f3       	brlt	.-6      	; 0xa82 <__divsf3_pse+0x6a>
 a88:	98 3e       	cpi	r25, 0xE8	; 232
 a8a:	dc f3       	brlt	.-10     	; 0xa82 <__divsf3_pse+0x6a>
 a8c:	86 95       	lsr	r24
 a8e:	77 95       	ror	r23
 a90:	67 95       	ror	r22
 a92:	b7 95       	ror	r27
 a94:	f7 95       	ror	r31
 a96:	9f 5f       	subi	r25, 0xFF	; 255
 a98:	c9 f7       	brne	.-14     	; 0xa8c <__divsf3_pse+0x74>
 a9a:	88 0f       	add	r24, r24
 a9c:	91 1d       	adc	r25, r1
 a9e:	96 95       	lsr	r25
 aa0:	87 95       	ror	r24
 aa2:	97 f9       	bld	r25, 7
 aa4:	08 95       	ret
 aa6:	e1 e0       	ldi	r30, 0x01	; 1
 aa8:	66 0f       	add	r22, r22
 aaa:	77 1f       	adc	r23, r23
 aac:	88 1f       	adc	r24, r24
 aae:	bb 1f       	adc	r27, r27
 ab0:	62 17       	cp	r22, r18
 ab2:	73 07       	cpc	r23, r19
 ab4:	84 07       	cpc	r24, r20
 ab6:	ba 07       	cpc	r27, r26
 ab8:	20 f0       	brcs	.+8      	; 0xac2 <__divsf3_pse+0xaa>
 aba:	62 1b       	sub	r22, r18
 abc:	73 0b       	sbc	r23, r19
 abe:	84 0b       	sbc	r24, r20
 ac0:	ba 0b       	sbc	r27, r26
 ac2:	ee 1f       	adc	r30, r30
 ac4:	88 f7       	brcc	.-30     	; 0xaa8 <__divsf3_pse+0x90>
 ac6:	e0 95       	com	r30
 ac8:	08 95       	ret

00000aca <__fixunssfsi>:
 aca:	98 d0       	rcall	.+304    	; 0xbfc <__fp_splitA>
 acc:	88 f0       	brcs	.+34     	; 0xaf0 <__fixunssfsi+0x26>
 ace:	9f 57       	subi	r25, 0x7F	; 127
 ad0:	90 f0       	brcs	.+36     	; 0xaf6 <__fixunssfsi+0x2c>
 ad2:	b9 2f       	mov	r27, r25
 ad4:	99 27       	eor	r25, r25
 ad6:	b7 51       	subi	r27, 0x17	; 23
 ad8:	a0 f0       	brcs	.+40     	; 0xb02 <__fixunssfsi+0x38>
 ada:	d1 f0       	breq	.+52     	; 0xb10 <__fixunssfsi+0x46>
 adc:	66 0f       	add	r22, r22
 ade:	77 1f       	adc	r23, r23
 ae0:	88 1f       	adc	r24, r24
 ae2:	99 1f       	adc	r25, r25
 ae4:	1a f0       	brmi	.+6      	; 0xaec <__fixunssfsi+0x22>
 ae6:	ba 95       	dec	r27
 ae8:	c9 f7       	brne	.-14     	; 0xadc <__fixunssfsi+0x12>
 aea:	12 c0       	rjmp	.+36     	; 0xb10 <__fixunssfsi+0x46>
 aec:	b1 30       	cpi	r27, 0x01	; 1
 aee:	81 f0       	breq	.+32     	; 0xb10 <__fixunssfsi+0x46>
 af0:	9f d0       	rcall	.+318    	; 0xc30 <__fp_zero>
 af2:	b1 e0       	ldi	r27, 0x01	; 1
 af4:	08 95       	ret
 af6:	9c c0       	rjmp	.+312    	; 0xc30 <__fp_zero>
 af8:	67 2f       	mov	r22, r23
 afa:	78 2f       	mov	r23, r24
 afc:	88 27       	eor	r24, r24
 afe:	b8 5f       	subi	r27, 0xF8	; 248
 b00:	39 f0       	breq	.+14     	; 0xb10 <__fixunssfsi+0x46>
 b02:	b9 3f       	cpi	r27, 0xF9	; 249
 b04:	cc f3       	brlt	.-14     	; 0xaf8 <__fixunssfsi+0x2e>
 b06:	86 95       	lsr	r24
 b08:	77 95       	ror	r23
 b0a:	67 95       	ror	r22
 b0c:	b3 95       	inc	r27
 b0e:	d9 f7       	brne	.-10     	; 0xb06 <__fixunssfsi+0x3c>
 b10:	3e f4       	brtc	.+14     	; 0xb20 <__fixunssfsi+0x56>
 b12:	90 95       	com	r25
 b14:	80 95       	com	r24
 b16:	70 95       	com	r23
 b18:	61 95       	neg	r22
 b1a:	7f 4f       	sbci	r23, 0xFF	; 255
 b1c:	8f 4f       	sbci	r24, 0xFF	; 255
 b1e:	9f 4f       	sbci	r25, 0xFF	; 255
 b20:	08 95       	ret

00000b22 <__floatunsisf>:
 b22:	e8 94       	clt
 b24:	09 c0       	rjmp	.+18     	; 0xb38 <__floatsisf+0x12>

00000b26 <__floatsisf>:
 b26:	97 fb       	bst	r25, 7
 b28:	3e f4       	brtc	.+14     	; 0xb38 <__floatsisf+0x12>
 b2a:	90 95       	com	r25
 b2c:	80 95       	com	r24
 b2e:	70 95       	com	r23
 b30:	61 95       	neg	r22
 b32:	7f 4f       	sbci	r23, 0xFF	; 255
 b34:	8f 4f       	sbci	r24, 0xFF	; 255
 b36:	9f 4f       	sbci	r25, 0xFF	; 255
 b38:	99 23       	and	r25, r25
 b3a:	a9 f0       	breq	.+42     	; 0xb66 <__floatsisf+0x40>
 b3c:	f9 2f       	mov	r31, r25
 b3e:	96 e9       	ldi	r25, 0x96	; 150
 b40:	bb 27       	eor	r27, r27
 b42:	93 95       	inc	r25
 b44:	f6 95       	lsr	r31
 b46:	87 95       	ror	r24
 b48:	77 95       	ror	r23
 b4a:	67 95       	ror	r22
 b4c:	b7 95       	ror	r27
 b4e:	f1 11       	cpse	r31, r1
 b50:	f8 cf       	rjmp	.-16     	; 0xb42 <__floatsisf+0x1c>
 b52:	fa f4       	brpl	.+62     	; 0xb92 <__floatsisf+0x6c>
 b54:	bb 0f       	add	r27, r27
 b56:	11 f4       	brne	.+4      	; 0xb5c <__floatsisf+0x36>
 b58:	60 ff       	sbrs	r22, 0
 b5a:	1b c0       	rjmp	.+54     	; 0xb92 <__floatsisf+0x6c>
 b5c:	6f 5f       	subi	r22, 0xFF	; 255
 b5e:	7f 4f       	sbci	r23, 0xFF	; 255
 b60:	8f 4f       	sbci	r24, 0xFF	; 255
 b62:	9f 4f       	sbci	r25, 0xFF	; 255
 b64:	16 c0       	rjmp	.+44     	; 0xb92 <__floatsisf+0x6c>
 b66:	88 23       	and	r24, r24
 b68:	11 f0       	breq	.+4      	; 0xb6e <__floatsisf+0x48>
 b6a:	96 e9       	ldi	r25, 0x96	; 150
 b6c:	11 c0       	rjmp	.+34     	; 0xb90 <__floatsisf+0x6a>
 b6e:	77 23       	and	r23, r23
 b70:	21 f0       	breq	.+8      	; 0xb7a <__floatsisf+0x54>
 b72:	9e e8       	ldi	r25, 0x8E	; 142
 b74:	87 2f       	mov	r24, r23
 b76:	76 2f       	mov	r23, r22
 b78:	05 c0       	rjmp	.+10     	; 0xb84 <__floatsisf+0x5e>
 b7a:	66 23       	and	r22, r22
 b7c:	71 f0       	breq	.+28     	; 0xb9a <__floatsisf+0x74>
 b7e:	96 e8       	ldi	r25, 0x86	; 134
 b80:	86 2f       	mov	r24, r22
 b82:	70 e0       	ldi	r23, 0x00	; 0
 b84:	60 e0       	ldi	r22, 0x00	; 0
 b86:	2a f0       	brmi	.+10     	; 0xb92 <__floatsisf+0x6c>
 b88:	9a 95       	dec	r25
 b8a:	66 0f       	add	r22, r22
 b8c:	77 1f       	adc	r23, r23
 b8e:	88 1f       	adc	r24, r24
 b90:	da f7       	brpl	.-10     	; 0xb88 <__floatsisf+0x62>
 b92:	88 0f       	add	r24, r24
 b94:	96 95       	lsr	r25
 b96:	87 95       	ror	r24
 b98:	97 f9       	bld	r25, 7
 b9a:	08 95       	ret

00000b9c <__fp_inf>:
 b9c:	97 f9       	bld	r25, 7
 b9e:	9f 67       	ori	r25, 0x7F	; 127
 ba0:	80 e8       	ldi	r24, 0x80	; 128
 ba2:	70 e0       	ldi	r23, 0x00	; 0
 ba4:	60 e0       	ldi	r22, 0x00	; 0
 ba6:	08 95       	ret

00000ba8 <__fp_nan>:
 ba8:	9f ef       	ldi	r25, 0xFF	; 255
 baa:	80 ec       	ldi	r24, 0xC0	; 192
 bac:	08 95       	ret

00000bae <__fp_pscA>:
 bae:	00 24       	eor	r0, r0
 bb0:	0a 94       	dec	r0
 bb2:	16 16       	cp	r1, r22
 bb4:	17 06       	cpc	r1, r23
 bb6:	18 06       	cpc	r1, r24
 bb8:	09 06       	cpc	r0, r25
 bba:	08 95       	ret

00000bbc <__fp_pscB>:
 bbc:	00 24       	eor	r0, r0
 bbe:	0a 94       	dec	r0
 bc0:	12 16       	cp	r1, r18
 bc2:	13 06       	cpc	r1, r19
 bc4:	14 06       	cpc	r1, r20
 bc6:	05 06       	cpc	r0, r21
 bc8:	08 95       	ret

00000bca <__fp_round>:
 bca:	09 2e       	mov	r0, r25
 bcc:	03 94       	inc	r0
 bce:	00 0c       	add	r0, r0
 bd0:	11 f4       	brne	.+4      	; 0xbd6 <__fp_round+0xc>
 bd2:	88 23       	and	r24, r24
 bd4:	52 f0       	brmi	.+20     	; 0xbea <__fp_round+0x20>
 bd6:	bb 0f       	add	r27, r27
 bd8:	40 f4       	brcc	.+16     	; 0xbea <__fp_round+0x20>
 bda:	bf 2b       	or	r27, r31
 bdc:	11 f4       	brne	.+4      	; 0xbe2 <__fp_round+0x18>
 bde:	60 ff       	sbrs	r22, 0
 be0:	04 c0       	rjmp	.+8      	; 0xbea <__fp_round+0x20>
 be2:	6f 5f       	subi	r22, 0xFF	; 255
 be4:	7f 4f       	sbci	r23, 0xFF	; 255
 be6:	8f 4f       	sbci	r24, 0xFF	; 255
 be8:	9f 4f       	sbci	r25, 0xFF	; 255
 bea:	08 95       	ret

00000bec <__fp_split3>:
 bec:	57 fd       	sbrc	r21, 7
 bee:	90 58       	subi	r25, 0x80	; 128
 bf0:	44 0f       	add	r20, r20
 bf2:	55 1f       	adc	r21, r21
 bf4:	59 f0       	breq	.+22     	; 0xc0c <__fp_splitA+0x10>
 bf6:	5f 3f       	cpi	r21, 0xFF	; 255
 bf8:	71 f0       	breq	.+28     	; 0xc16 <__fp_splitA+0x1a>
 bfa:	47 95       	ror	r20

00000bfc <__fp_splitA>:
 bfc:	88 0f       	add	r24, r24
 bfe:	97 fb       	bst	r25, 7
 c00:	99 1f       	adc	r25, r25
 c02:	61 f0       	breq	.+24     	; 0xc1c <__fp_splitA+0x20>
 c04:	9f 3f       	cpi	r25, 0xFF	; 255
 c06:	79 f0       	breq	.+30     	; 0xc26 <__fp_splitA+0x2a>
 c08:	87 95       	ror	r24
 c0a:	08 95       	ret
 c0c:	12 16       	cp	r1, r18
 c0e:	13 06       	cpc	r1, r19
 c10:	14 06       	cpc	r1, r20
 c12:	55 1f       	adc	r21, r21
 c14:	f2 cf       	rjmp	.-28     	; 0xbfa <__fp_split3+0xe>
 c16:	46 95       	lsr	r20
 c18:	f1 df       	rcall	.-30     	; 0xbfc <__fp_splitA>
 c1a:	08 c0       	rjmp	.+16     	; 0xc2c <__fp_splitA+0x30>
 c1c:	16 16       	cp	r1, r22
 c1e:	17 06       	cpc	r1, r23
 c20:	18 06       	cpc	r1, r24
 c22:	99 1f       	adc	r25, r25
 c24:	f1 cf       	rjmp	.-30     	; 0xc08 <__fp_splitA+0xc>
 c26:	86 95       	lsr	r24
 c28:	71 05       	cpc	r23, r1
 c2a:	61 05       	cpc	r22, r1
 c2c:	08 94       	sec
 c2e:	08 95       	ret

00000c30 <__fp_zero>:
 c30:	e8 94       	clt

00000c32 <__fp_szero>:
 c32:	bb 27       	eor	r27, r27
 c34:	66 27       	eor	r22, r22
 c36:	77 27       	eor	r23, r23
 c38:	cb 01       	movw	r24, r22
 c3a:	97 f9       	bld	r25, 7
 c3c:	08 95       	ret

00000c3e <__udivmodhi4>:
 c3e:	aa 1b       	sub	r26, r26
 c40:	bb 1b       	sub	r27, r27
 c42:	51 e1       	ldi	r21, 0x11	; 17
 c44:	07 c0       	rjmp	.+14     	; 0xc54 <__udivmodhi4_ep>

00000c46 <__udivmodhi4_loop>:
 c46:	aa 1f       	adc	r26, r26
 c48:	bb 1f       	adc	r27, r27
 c4a:	a6 17       	cp	r26, r22
 c4c:	b7 07       	cpc	r27, r23
 c4e:	10 f0       	brcs	.+4      	; 0xc54 <__udivmodhi4_ep>
 c50:	a6 1b       	sub	r26, r22
 c52:	b7 0b       	sbc	r27, r23

00000c54 <__udivmodhi4_ep>:
 c54:	88 1f       	adc	r24, r24
 c56:	99 1f       	adc	r25, r25
 c58:	5a 95       	dec	r21
 c5a:	a9 f7       	brne	.-22     	; 0xc46 <__udivmodhi4_loop>
 c5c:	80 95       	com	r24
 c5e:	90 95       	com	r25
 c60:	bc 01       	movw	r22, r24
 c62:	cd 01       	movw	r24, r26
 c64:	08 95       	ret

00000c66 <__divmodsi4>:
 c66:	05 2e       	mov	r0, r21
 c68:	97 fb       	bst	r25, 7
 c6a:	1e f4       	brtc	.+6      	; 0xc72 <__divmodsi4+0xc>
 c6c:	00 94       	com	r0
 c6e:	0e 94 4a 06 	call	0xc94	; 0xc94 <__negsi2>
 c72:	57 fd       	sbrc	r21, 7
 c74:	07 d0       	rcall	.+14     	; 0xc84 <__divmodsi4_neg2>
 c76:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__udivmodsi4>
 c7a:	07 fc       	sbrc	r0, 7
 c7c:	03 d0       	rcall	.+6      	; 0xc84 <__divmodsi4_neg2>
 c7e:	4e f4       	brtc	.+18     	; 0xc92 <__divmodsi4_exit>
 c80:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__negsi2>

00000c84 <__divmodsi4_neg2>:
 c84:	50 95       	com	r21
 c86:	40 95       	com	r20
 c88:	30 95       	com	r19
 c8a:	21 95       	neg	r18
 c8c:	3f 4f       	sbci	r19, 0xFF	; 255
 c8e:	4f 4f       	sbci	r20, 0xFF	; 255
 c90:	5f 4f       	sbci	r21, 0xFF	; 255

00000c92 <__divmodsi4_exit>:
 c92:	08 95       	ret

00000c94 <__negsi2>:
 c94:	90 95       	com	r25
 c96:	80 95       	com	r24
 c98:	70 95       	com	r23
 c9a:	61 95       	neg	r22
 c9c:	7f 4f       	sbci	r23, 0xFF	; 255
 c9e:	8f 4f       	sbci	r24, 0xFF	; 255
 ca0:	9f 4f       	sbci	r25, 0xFF	; 255
 ca2:	08 95       	ret

00000ca4 <__umulhisi3>:
 ca4:	a2 9f       	mul	r26, r18
 ca6:	b0 01       	movw	r22, r0
 ca8:	b3 9f       	mul	r27, r19
 caa:	c0 01       	movw	r24, r0
 cac:	a3 9f       	mul	r26, r19
 cae:	70 0d       	add	r23, r0
 cb0:	81 1d       	adc	r24, r1
 cb2:	11 24       	eor	r1, r1
 cb4:	91 1d       	adc	r25, r1
 cb6:	b2 9f       	mul	r27, r18
 cb8:	70 0d       	add	r23, r0
 cba:	81 1d       	adc	r24, r1
 cbc:	11 24       	eor	r1, r1
 cbe:	91 1d       	adc	r25, r1
 cc0:	08 95       	ret

00000cc2 <__udivmodsi4>:
 cc2:	a1 e2       	ldi	r26, 0x21	; 33
 cc4:	1a 2e       	mov	r1, r26
 cc6:	aa 1b       	sub	r26, r26
 cc8:	bb 1b       	sub	r27, r27
 cca:	fd 01       	movw	r30, r26
 ccc:	0d c0       	rjmp	.+26     	; 0xce8 <__udivmodsi4_ep>

00000cce <__udivmodsi4_loop>:
 cce:	aa 1f       	adc	r26, r26
 cd0:	bb 1f       	adc	r27, r27
 cd2:	ee 1f       	adc	r30, r30
 cd4:	ff 1f       	adc	r31, r31
 cd6:	a2 17       	cp	r26, r18
 cd8:	b3 07       	cpc	r27, r19
 cda:	e4 07       	cpc	r30, r20
 cdc:	f5 07       	cpc	r31, r21
 cde:	20 f0       	brcs	.+8      	; 0xce8 <__udivmodsi4_ep>
 ce0:	a2 1b       	sub	r26, r18
 ce2:	b3 0b       	sbc	r27, r19
 ce4:	e4 0b       	sbc	r30, r20
 ce6:	f5 0b       	sbc	r31, r21

00000ce8 <__udivmodsi4_ep>:
 ce8:	66 1f       	adc	r22, r22
 cea:	77 1f       	adc	r23, r23
 cec:	88 1f       	adc	r24, r24
 cee:	99 1f       	adc	r25, r25
 cf0:	1a 94       	dec	r1
 cf2:	69 f7       	brne	.-38     	; 0xcce <__udivmodsi4_loop>
 cf4:	60 95       	com	r22
 cf6:	70 95       	com	r23
 cf8:	80 95       	com	r24
 cfa:	90 95       	com	r25
 cfc:	9b 01       	movw	r18, r22
 cfe:	ac 01       	movw	r20, r24
 d00:	bd 01       	movw	r22, r26
 d02:	cf 01       	movw	r24, r30
 d04:	08 95       	ret

00000d06 <_exit>:
 d06:	f8 94       	cli

00000d08 <__stop_program>:
 d08:	ff cf       	rjmp	.-2      	; 0xd08 <__stop_program>
