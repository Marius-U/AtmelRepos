
PS1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000e7c  00000f10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  00800120  00800120  00000f30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000230  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000132f  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c5  00000000  00000000  000024bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001ecd  00000000  00000000  00002d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000470  00000000  00000000  00004c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00007225  00000000  00000000  000050c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000881  00000000  00000000  0000c2e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000190  00000000  00000000  0000cb6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002f85  00000000  00000000  0000ccfa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	23 c2       	rjmp	.+1094   	; 0x458 <__vector_4>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	df c1       	rjmp	.+958    	; 0x3ec <__vector_11>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	05 c2       	rjmp	.+1034   	; 0x444 <__vector_14>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	b4 c1       	rjmp	.+872    	; 0x3b2 <__vector_18>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 38       	cpi	r26, 0x80	; 128
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	02 d0       	rcall	.+4      	; 0xa0 <main>
  9c:	ed c6       	rjmp	.+3546   	; 0xe78 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <main>:
#include "D:\Repos\AtmelRepos\PS1\PS1\Header\eeprom.h"


int main(void)
{	
	initVirtualTimers();
  a0:	70 d4       	rcall	.+2272   	; 0x982 <initVirtualTimers>
	initDisplay();
  a2:	1a d1       	rcall	.+564    	; 0x2d8 <initDisplay>
	initButtonISR();
  a4:	4c d1       	rcall	.+664    	; 0x33e <initButtonISR>
	initLeds();
  a6:	23 d1       	rcall	.+582    	; 0x2ee <initLeds>
	adcInit();
  a8:	59 d1       	rcall	.+690    	; 0x35c <adcInit>
	uart_init();
  aa:	69 d1       	rcall	.+722    	; 0x37e <uart_init>
	initPWM();
  ac:	27 d1       	rcall	.+590    	; 0x2fc <initPWM>
	initPeriodical();
  ae:	31 d1       	rcall	.+610    	; 0x312 <initPeriodical>
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <main+0x10>

000000b2 <adcRead>:
#include "D:\Repos\AtmelRepos\PS1\PS1\Header\adc.h"

uint16_t adcRead(uint8_t input)
{
	uint16_t value;
	if(input == TEMP_SENZOR)
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	49 f4       	brne	.+18     	; 0xc8 <adcRead+0x16>
	{
		ADMUX &= ~(0x02);
  b6:	ec e7       	ldi	r30, 0x7C	; 124
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	8d 7f       	andi	r24, 0xFD	; 253
  be:	80 83       	st	Z, r24
		ADMUX |= input;
  c0:	80 81       	ld	r24, Z
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	80 83       	st	Z, r24
  c6:	07 c0       	rjmp	.+14     	; 0xd6 <adcRead+0x24>
	}
	else if(input == REF_TEMP)
  c8:	83 30       	cpi	r24, 0x03	; 3
  ca:	29 f4       	brne	.+10     	; 0xd6 <adcRead+0x24>
	{
		ADMUX |= input;
  cc:	ec e7       	ldi	r30, 0x7C	; 124
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	83 60       	ori	r24, 0x03	; 3
  d4:	80 83       	st	Z, r24
	}

	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
  d6:	ea e7       	ldi	r30, 0x7A	; 122
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADSC)); 
  e0:	80 81       	ld	r24, Z
  e2:	86 fd       	sbrc	r24, 6
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <adcRead+0x2e>


	value = ADCL;
  e6:	80 91 78 00 	lds	r24, 0x0078
	value |= (ADCH << 8);    // ADCH is read so ADC can be updated again
  ea:	20 91 79 00 	lds	r18, 0x0079
  ee:	90 e0       	ldi	r25, 0x00	; 0

	return value;
}
  f0:	92 2b       	or	r25, r18
  f2:	08 95       	ret

000000f4 <adcToCelsius>:
float adcToCelsius(uint16_t rawADC)
{
	return (rawADC * 0.488f); // 5V resolution, LM35 Linear + 10-mV/°C 
  f4:	bc 01       	movw	r22, r24
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	96 d5       	rcall	.+2860   	; 0xc28 <__floatunsisf>
  fc:	23 e2       	ldi	r18, 0x23	; 35
  fe:	3b ed       	ldi	r19, 0xDB	; 219
 100:	49 ef       	ldi	r20, 0xF9	; 249
 102:	5e e3       	ldi	r21, 0x3E	; 62
 104:	47 c6       	rjmp	.+3214   	; 0xd94 <__mulsf3>
}
 106:	08 95       	ret

00000108 <adcGetPrescription>:
float adcGetPrescription(uint16_t rawADC)
{
	return (rawADC * 0.145f);
 108:	bc 01       	movw	r22, r24
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	8c d5       	rcall	.+2840   	; 0xc28 <__floatunsisf>
 110:	21 ee       	ldi	r18, 0xE1	; 225
 112:	3a e7       	ldi	r19, 0x7A	; 122
 114:	44 e1       	ldi	r20, 0x14	; 20
 116:	5e e3       	ldi	r21, 0x3E	; 62
 118:	3d c6       	rjmp	.+3194   	; 0xd94 <__mulsf3>
}
 11a:	08 95       	ret

0000011c <adc_printValue>:
void adc_printValue(float temp)
{
 11c:	cf 92       	push	r12
 11e:	df 92       	push	r13
 120:	ef 92       	push	r14
 122:	ff 92       	push	r15
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
	uint16_t value = (uint16_t)(temp * 100);
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	48 ec       	ldi	r20, 0xC8	; 200
 132:	52 e4       	ldi	r21, 0x42	; 66
 134:	2f d6       	rcall	.+3166   	; 0xd94 <__mulsf3>
 136:	4c d5       	rcall	.+2712   	; 0xbd0 <__fixunssfsi>
 138:	6b 01       	movw	r12, r22
 13a:	7c 01       	movw	r14, r24
	
	uint8_t uartData[5];
	uartData[4] = value%10;
 13c:	9b 01       	movw	r18, r22
 13e:	ad ec       	ldi	r26, 0xCD	; 205
 140:	bc ec       	ldi	r27, 0xCC	; 204
 142:	8b d6       	rcall	.+3350   	; 0xe5a <__umulhisi3>
 144:	96 95       	lsr	r25
 146:	87 95       	ror	r24
 148:	96 95       	lsr	r25
 14a:	87 95       	ror	r24
 14c:	96 95       	lsr	r25
 14e:	87 95       	ror	r24
 150:	9c 01       	movw	r18, r24
 152:	22 0f       	add	r18, r18
 154:	33 1f       	adc	r19, r19
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	82 0f       	add	r24, r18
 164:	93 1f       	adc	r25, r19
 166:	e6 01       	movw	r28, r12
 168:	c8 1b       	sub	r28, r24
 16a:	d9 0b       	sbc	r29, r25
	value /= 10;
 16c:	96 01       	movw	r18, r12
 16e:	75 d6       	rcall	.+3306   	; 0xe5a <__umulhisi3>
 170:	ac 01       	movw	r20, r24
 172:	56 95       	lsr	r21
 174:	47 95       	ror	r20
 176:	56 95       	lsr	r21
 178:	47 95       	ror	r20
 17a:	56 95       	lsr	r21
 17c:	47 95       	ror	r20
	uartData[3] = value%10;
 17e:	9a 01       	movw	r18, r20
 180:	6c d6       	rcall	.+3288   	; 0xe5a <__umulhisi3>
 182:	96 95       	lsr	r25
 184:	87 95       	ror	r24
 186:	96 95       	lsr	r25
 188:	87 95       	ror	r24
 18a:	96 95       	lsr	r25
 18c:	87 95       	ror	r24
 18e:	9c 01       	movw	r18, r24
 190:	22 0f       	add	r18, r18
 192:	33 1f       	adc	r19, r19
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	82 0f       	add	r24, r18
 1a2:	93 1f       	adc	r25, r19
 1a4:	8a 01       	movw	r16, r20
 1a6:	08 1b       	sub	r16, r24
 1a8:	19 0b       	sbc	r17, r25
	value /= 10;
 1aa:	9a 01       	movw	r18, r20
 1ac:	56 d6       	rcall	.+3244   	; 0xe5a <__umulhisi3>
 1ae:	ac 01       	movw	r20, r24
 1b0:	56 95       	lsr	r21
 1b2:	47 95       	ror	r20
 1b4:	56 95       	lsr	r21
 1b6:	47 95       	ror	r20
 1b8:	56 95       	lsr	r21
 1ba:	47 95       	ror	r20
	uartData[2] = value%10;
 1bc:	9a 01       	movw	r18, r20
 1be:	4d d6       	rcall	.+3226   	; 0xe5a <__umulhisi3>
 1c0:	96 95       	lsr	r25
 1c2:	87 95       	ror	r24
 1c4:	96 95       	lsr	r25
 1c6:	87 95       	ror	r24
 1c8:	96 95       	lsr	r25
 1ca:	87 95       	ror	r24
 1cc:	9c 01       	movw	r18, r24
 1ce:	22 0f       	add	r18, r18
 1d0:	33 1f       	adc	r19, r19
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	82 0f       	add	r24, r18
 1e0:	93 1f       	adc	r25, r19
 1e2:	7a 01       	movw	r14, r20
 1e4:	e8 1a       	sub	r14, r24
 1e6:	f9 0a       	sbc	r15, r25
	value /= 10;
 1e8:	9a 01       	movw	r18, r20
 1ea:	37 d6       	rcall	.+3182   	; 0xe5a <__umulhisi3>
 1ec:	ac 01       	movw	r20, r24
 1ee:	56 95       	lsr	r21
 1f0:	47 95       	ror	r20
 1f2:	56 95       	lsr	r21
 1f4:	47 95       	ror	r20
 1f6:	56 95       	lsr	r21
 1f8:	47 95       	ror	r20
	uartData[1] = value%10;
 1fa:	9a 01       	movw	r18, r20
 1fc:	2e d6       	rcall	.+3164   	; 0xe5a <__umulhisi3>
 1fe:	96 95       	lsr	r25
 200:	87 95       	ror	r24
 202:	96 95       	lsr	r25
 204:	87 95       	ror	r24
 206:	96 95       	lsr	r25
 208:	87 95       	ror	r24
 20a:	9c 01       	movw	r18, r24
 20c:	22 0f       	add	r18, r18
 20e:	33 1f       	adc	r19, r19
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	82 0f       	add	r24, r18
 21e:	93 1f       	adc	r25, r19
 220:	6a 01       	movw	r12, r20
 222:	c8 1a       	sub	r12, r24
 224:	d9 0a       	sbc	r13, r25
	value /= 10;
 226:	9a 01       	movw	r18, r20
 228:	18 d6       	rcall	.+3120   	; 0xe5a <__umulhisi3>
 22a:	ac 01       	movw	r20, r24
 22c:	56 95       	lsr	r21
 22e:	47 95       	ror	r20
 230:	56 95       	lsr	r21
 232:	47 95       	ror	r20
 234:	56 95       	lsr	r21
 236:	47 95       	ror	r20
	uartData[0] = value%10;
 238:	9a 01       	movw	r18, r20
 23a:	0f d6       	rcall	.+3102   	; 0xe5a <__umulhisi3>
 23c:	96 95       	lsr	r25
 23e:	87 95       	ror	r24
 240:	96 95       	lsr	r25
 242:	87 95       	ror	r24
 244:	96 95       	lsr	r25
 246:	87 95       	ror	r24
 248:	9c 01       	movw	r18, r24
 24a:	22 0f       	add	r18, r18
 24c:	33 1f       	adc	r19, r19
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	82 0f       	add	r24, r18
 25c:	93 1f       	adc	r25, r19
 25e:	9a 01       	movw	r18, r20
 260:	28 1b       	sub	r18, r24
 262:	39 0b       	sbc	r19, r25
 264:	c9 01       	movw	r24, r18
	
	if(uartData[0])
 266:	22 23       	and	r18, r18
 268:	89 f0       	breq	.+34     	; 0x28c <adc_printValue+0x170>
	{
		uart_transmit(uartData[0]+48);
 26a:	80 5d       	subi	r24, 0xD0	; 208
 26c:	37 d3       	rcall	.+1646   	; 0x8dc <uart_transmit>
		uart_transmit(uartData[1]+48);
 26e:	80 e3       	ldi	r24, 0x30	; 48
 270:	8c 0d       	add	r24, r12
 272:	34 d3       	rcall	.+1640   	; 0x8dc <uart_transmit>
		uart_transmit(uartData[2]+48);
 274:	80 e3       	ldi	r24, 0x30	; 48
 276:	8e 0d       	add	r24, r14
 278:	31 d3       	rcall	.+1634   	; 0x8dc <uart_transmit>
		uart_transmit(',');
 27a:	8c e2       	ldi	r24, 0x2C	; 44
 27c:	2f d3       	rcall	.+1630   	; 0x8dc <uart_transmit>
		uart_transmit(uartData[3]+48);
 27e:	80 e3       	ldi	r24, 0x30	; 48
 280:	80 0f       	add	r24, r16
 282:	2c d3       	rcall	.+1624   	; 0x8dc <uart_transmit>
		uart_transmit(uartData[4]+48);
 284:	8c 2f       	mov	r24, r28
 286:	80 5d       	subi	r24, 0xD0	; 208
 288:	29 d3       	rcall	.+1618   	; 0x8dc <uart_transmit>
 28a:	0e c0       	rjmp	.+28     	; 0x2a8 <adc_printValue+0x18c>
	}
	else
	{
		uart_transmit(uartData[1]+48);
 28c:	80 e3       	ldi	r24, 0x30	; 48
 28e:	8c 0d       	add	r24, r12
 290:	25 d3       	rcall	.+1610   	; 0x8dc <uart_transmit>
		uart_transmit(uartData[2]+48);
 292:	80 e3       	ldi	r24, 0x30	; 48
 294:	8e 0d       	add	r24, r14
 296:	22 d3       	rcall	.+1604   	; 0x8dc <uart_transmit>
		uart_transmit(',');
 298:	8c e2       	ldi	r24, 0x2C	; 44
 29a:	20 d3       	rcall	.+1600   	; 0x8dc <uart_transmit>
		uart_transmit(uartData[3]+48);
 29c:	80 e3       	ldi	r24, 0x30	; 48
 29e:	80 0f       	add	r24, r16
 2a0:	1d d3       	rcall	.+1594   	; 0x8dc <uart_transmit>
		uart_transmit(uartData[4]+48);
 2a2:	8c 2f       	mov	r24, r28
 2a4:	80 5d       	subi	r24, 0xD0	; 208
 2a6:	1a d3       	rcall	.+1588   	; 0x8dc <uart_transmit>
	}
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	1f 91       	pop	r17
 2ae:	0f 91       	pop	r16
 2b0:	ff 90       	pop	r15
 2b2:	ef 90       	pop	r14
 2b4:	df 90       	pop	r13
 2b6:	cf 90       	pop	r12
 2b8:	08 95       	ret

000002ba <eeprom_write>:
#include "D:\Repos\AtmelRepos\PS1\PS1\Header\eeprom.h"

void eeprom_write(unsigned int address, unsigned char data)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
 2ba:	f9 99       	sbic	0x1f, 1	; 31
 2bc:	fe cf       	rjmp	.-4      	; 0x2ba <eeprom_write>
	;
	/* Set up address and Data Registers */
	EEAR = address;
 2be:	92 bd       	out	0x22, r25	; 34
 2c0:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
 2c2:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
 2c4:	fa 9a       	sbi	0x1f, 2	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
 2c6:	f9 9a       	sbi	0x1f, 1	; 31
 2c8:	08 95       	ret

000002ca <eeprom_read>:
}

uint8_t eeprom_read(unsigned int address)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
 2ca:	f9 99       	sbic	0x1f, 1	; 31
 2cc:	fe cf       	rjmp	.-4      	; 0x2ca <eeprom_read>
	;
	/* Set up address register */
	EEAR = address;
 2ce:	92 bd       	out	0x22, r25	; 34
 2d0:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
 2d2:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
 2d4:	80 b5       	in	r24, 0x20	; 32
 2d6:	08 95       	ret

000002d8 <initDisplay>:
	cli();
	TCCR0A |= (1 << WGM01);						// Set the Timer Mode to CTC
	TCCR0B |= (1 << CS02);						// set prescaler to 256 and start the timer (0.016 ms => 62.5 incremts = 1ms) 
	OCR0A   = 0x3F;								// Count to 1.008 ms
	TIMSK0 |= (1 << OCIE0A);					//Set the ISR COMPA vect
	sei();
 2d8:	84 b1       	in	r24, 0x04	; 4
 2da:	8f 63       	ori	r24, 0x3F	; 63
 2dc:	84 b9       	out	0x04, r24	; 4
 2de:	8a b1       	in	r24, 0x0a	; 10
 2e0:	80 6c       	ori	r24, 0xC0	; 192
 2e2:	8a b9       	out	0x0a, r24	; 10
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	f0 df       	rcall	.-32     	; 0x2ca <eeprom_read>
 2ea:	d3 c2       	rjmp	.+1446   	; 0x892 <display>
 2ec:	08 95       	ret

000002ee <initLeds>:
 2ee:	8a b1       	in	r24, 0x0a	; 10
 2f0:	8c 62       	ori	r24, 0x2C	; 44
 2f2:	8a b9       	out	0x0a, r24	; 10
 2f4:	8b b1       	in	r24, 0x0b	; 11
 2f6:	8c 62       	ori	r24, 0x2C	; 44
 2f8:	8b b9       	out	0x0b, r24	; 11
 2fa:	08 95       	ret

000002fc <initPWM>:
 2fc:	18 bc       	out	0x28, r1	; 40
 2fe:	84 b5       	in	r24, 0x24	; 36
 300:	80 62       	ori	r24, 0x20	; 32
 302:	84 bd       	out	0x24, r24	; 36
 304:	84 b5       	in	r24, 0x24	; 36
 306:	83 60       	ori	r24, 0x03	; 3
 308:	84 bd       	out	0x24, r24	; 36
 30a:	85 b5       	in	r24, 0x25	; 37
 30c:	82 60       	ori	r24, 0x02	; 2
 30e:	85 bd       	out	0x25, r24	; 37
 310:	08 95       	ret

00000312 <initPeriodical>:
 312:	f8 94       	cli
 314:	e1 e8       	ldi	r30, 0x81	; 129
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	88 60       	ori	r24, 0x08	; 8
 31c:	80 83       	st	Z, r24
 31e:	80 81       	ld	r24, Z
 320:	84 60       	ori	r24, 0x04	; 4
 322:	80 83       	st	Z, r24
 324:	8f e3       	ldi	r24, 0x3F	; 63
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	90 93 89 00 	sts	0x0089, r25
 32c:	80 93 88 00 	sts	0x0088, r24
 330:	ef e6       	ldi	r30, 0x6F	; 111
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	82 60       	ori	r24, 0x02	; 2
 338:	80 83       	st	Z, r24
 33a:	78 94       	sei
 33c:	08 95       	ret

0000033e <initButtonISR>:
}
void initButtonISR()
{
	cli();
 33e:	f8 94       	cli
	/*Initializing PC1 as input for the SW button with pull down resistor.*/
	DDRC |= (1 << DDC0);
 340:	38 9a       	sbi	0x07, 0	; 7
	PORTC &= ~(1 << PORTC0);
 342:	40 98       	cbi	0x08, 0	; 8
	
	PCICR  |= (1 << PCIE1);
 344:	e8 e6       	ldi	r30, 0x68	; 104
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	82 60       	ori	r24, 0x02	; 2
 34c:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8);
 34e:	ec e6       	ldi	r30, 0x6C	; 108
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	81 60       	ori	r24, 0x01	; 1
 356:	80 83       	st	Z, r24
	sei();
 358:	78 94       	sei
 35a:	08 95       	ret

0000035c <adcInit>:
}

void adcInit()
{
	ADMUX |= (1 << REFS0);    // use AVcc as the reference
 35c:	ec e7       	ldi	r30, 0x7C	; 124
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	80 64       	ori	r24, 0x40	; 64
 364:	80 83       	st	Z, r24
	ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
 366:	80 81       	ld	r24, Z
 368:	8f 7d       	andi	r24, 0xDF	; 223
 36a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);    // 128 prescale for 8Mhz
 36c:	ea e7       	ldi	r30, 0x7A	; 122
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	87 60       	ori	r24, 0x07	; 7
 374:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);    // Enable the ADC
 376:	80 81       	ld	r24, Z
 378:	80 68       	ori	r24, 0x80	; 128
 37a:	80 83       	st	Z, r24
 37c:	08 95       	ret

0000037e <uart_init>:
}

void uart_init(void)
{
	cli();
 37e:	f8 94       	cli
	// set baud rate
	unsigned int baud = 207u;//BAUD_PRESCALE;
	
	UBRR0H = (unsigned char) (baud >> 8 );
 380:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)baud;
 384:	8f ec       	ldi	r24, 0xCF	; 207
 386:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A |= (1 << U2X0);
 38a:	e0 ec       	ldi	r30, 0xC0	; 192
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	82 60       	ori	r24, 0x02	; 2
 392:	80 83       	st	Z, r24
	// set frame format ( 8data, 1stop )
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 394:	e2 ec       	ldi	r30, 0xC2	; 194
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	86 60       	ori	r24, 0x06	; 6
 39c:	80 83       	st	Z, r24
	// Enable reciever interrupt
	UCSR0B |= (1 << RXCIE0);                    
 39e:	e1 ec       	ldi	r30, 0xC1	; 193
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	80 68       	ori	r24, 0x80	; 128
 3a6:	80 83       	st	Z, r24
	// enable received and transmitter
	UCSR0B |= ( 1 << RXEN0 ) | ( 1 << TXEN0 );
 3a8:	80 81       	ld	r24, Z
 3aa:	88 61       	ori	r24, 0x18	; 24
 3ac:	80 83       	st	Z, r24
	
	sei();
 3ae:	78 94       	sei
 3b0:	08 95       	ret

000003b2 <__vector_18>:
volatile uint8_t connected;

uint8_t flags[10];

ISR (USART_RX_vect)
{
 3b2:	1f 92       	push	r1
 3b4:	0f 92       	push	r0
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	0f 92       	push	r0
 3ba:	11 24       	eor	r1, r1
 3bc:	8f 93       	push	r24
	led3 = UDR0;
 3be:	80 91 c6 00 	lds	r24, 0x00C6
 3c2:	80 93 32 01 	sts	0x0132, r24
	
	if(led3 == 'c' || led3 == 'C')
 3c6:	80 91 32 01 	lds	r24, 0x0132
 3ca:	83 36       	cpi	r24, 0x63	; 99
 3cc:	21 f0       	breq	.+8      	; 0x3d6 <__vector_18+0x24>
 3ce:	80 91 32 01 	lds	r24, 0x0132
 3d2:	83 34       	cpi	r24, 0x43	; 67
 3d4:	29 f4       	brne	.+10     	; 0x3e0 <__vector_18+0x2e>
	{
		connected = 0x01u;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	80 93 31 01 	sts	0x0131, r24
		led3 = 0x00u;
 3dc:	10 92 32 01 	sts	0x0132, r1
	}
}
 3e0:	8f 91       	pop	r24
 3e2:	0f 90       	pop	r0
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	0f 90       	pop	r0
 3e8:	1f 90       	pop	r1
 3ea:	18 95       	reti

000003ec <__vector_11>:

ISR (TIMER1_COMPA_vect)
{
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	2f 93       	push	r18
 3f8:	3f 93       	push	r19
 3fa:	4f 93       	push	r20
 3fc:	5f 93       	push	r21
 3fe:	6f 93       	push	r22
 400:	7f 93       	push	r23
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
	count++;
 40e:	80 91 20 01 	lds	r24, 0x0120
 412:	90 91 21 01 	lds	r25, 0x0121
 416:	01 96       	adiw	r24, 0x01	; 1
 418:	90 93 21 01 	sts	0x0121, r25
 41c:	80 93 20 01 	sts	0x0120, r24
	scheduler();
 420:	ae d0       	rcall	.+348    	; 0x57e <scheduler>
}
 422:	ff 91       	pop	r31
 424:	ef 91       	pop	r30
 426:	bf 91       	pop	r27
 428:	af 91       	pop	r26
 42a:	9f 91       	pop	r25
 42c:	8f 91       	pop	r24
 42e:	7f 91       	pop	r23
 430:	6f 91       	pop	r22
 432:	5f 91       	pop	r21
 434:	4f 91       	pop	r20
 436:	3f 91       	pop	r19
 438:	2f 91       	pop	r18
 43a:	0f 90       	pop	r0
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <__vector_14>:

ISR (TIMER0_COMPA_vect)
{
 444:	1f 92       	push	r1
 446:	0f 92       	push	r0
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	0f 92       	push	r0
 44c:	11 24       	eor	r1, r1
	//count++;
	//scheduler();
}
 44e:	0f 90       	pop	r0
 450:	0f be       	out	0x3f, r0	; 63
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

00000458 <__vector_4>:

ISR(PCINT1_vect) {
 458:	1f 92       	push	r1
 45a:	0f 92       	push	r0
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	0f 92       	push	r0
 460:	11 24       	eor	r1, r1
 462:	8f 93       	push	r24
	
	if (PINC & (0x01u))
 464:	30 9b       	sbis	0x06, 0	; 6
 466:	03 c0       	rjmp	.+6      	; 0x46e <__vector_4+0x16>
	{
		flags[BUTTON_SHORT_PRESS_FLAG] = FLAG_SET;
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	80 93 26 01 	sts	0x0126, r24
	}
 46e:	8f 91       	pop	r24
 470:	0f 90       	pop	r0
 472:	0f be       	out	0x3f, r0	; 63
 474:	0f 90       	pop	r0
 476:	1f 90       	pop	r1
 478:	18 95       	reti

0000047a <resetDisplay>:
		stopVirtualTimer(BUTTON_MODULE,resetDisplay,1);
	}
}
void resetDisplay()
{
		if (PINC & (0x01u))
 47a:	30 9b       	sbis	0x06, 0	; 6
 47c:	0a c0       	rjmp	.+20     	; 0x492 <resetDisplay+0x18>
		{
			buttonCount = 0x00u;
 47e:	10 92 30 01 	sts	0x0130, r1
			eeprom_write(0x00u,buttonCount);
 482:	60 91 30 01 	lds	r22, 0x0130
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	17 df       	rcall	.-466    	; 0x2ba <eeprom_write>
			display(buttonCount);
 48c:	80 91 30 01 	lds	r24, 0x0130
 490:	00 c2       	rjmp	.+1024   	; 0x892 <display>
 492:	08 95       	ret

00000494 <incrementDisplay>:
	}
}

void incrementDisplay()
{
	if (PINC & (0x01u))
 494:	30 9b       	sbis	0x06, 0	; 6
 496:	29 c0       	rjmp	.+82     	; 0x4ea <incrementDisplay+0x56>
	{
		//Button was pressed!
		buttonCount = eeprom_read(0x00u);
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	16 df       	rcall	.-468    	; 0x2ca <eeprom_read>
 49e:	80 93 30 01 	sts	0x0130, r24
		if(buttonCount < 10)
 4a2:	80 91 30 01 	lds	r24, 0x0130
 4a6:	8a 30       	cpi	r24, 0x0A	; 10
 4a8:	70 f4       	brcc	.+28     	; 0x4c6 <incrementDisplay+0x32>
		{
			buttonCount++;
 4aa:	80 91 30 01 	lds	r24, 0x0130
 4ae:	8f 5f       	subi	r24, 0xFF	; 255
 4b0:	80 93 30 01 	sts	0x0130, r24
			eeprom_write(0x00u,buttonCount);
 4b4:	60 91 30 01 	lds	r22, 0x0130
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	fe de       	rcall	.-516    	; 0x2ba <eeprom_write>
			display(buttonCount);
 4be:	80 91 30 01 	lds	r24, 0x0130
 4c2:	e7 d1       	rcall	.+974    	; 0x892 <display>
 4c4:	0a c0       	rjmp	.+20     	; 0x4da <incrementDisplay+0x46>
		}
		else
		{
			buttonCount = 0x00;
 4c6:	10 92 30 01 	sts	0x0130, r1
			eeprom_write(0x00u, buttonCount);
 4ca:	60 91 30 01 	lds	r22, 0x0130
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	f3 de       	rcall	.-538    	; 0x2ba <eeprom_write>
			display(buttonCount);
 4d4:	80 91 30 01 	lds	r24, 0x0130
 4d8:	dc d1       	rcall	.+952    	; 0x892 <display>
		}
		startNewVirtualTimer(3000,BUTTON_MODULE,resetDisplay,1);
 4da:	21 e0       	ldi	r18, 0x01	; 1
 4dc:	4d e3       	ldi	r20, 0x3D	; 61
 4de:	52 e0       	ldi	r21, 0x02	; 2
 4e0:	61 e0       	ldi	r22, 0x01	; 1
 4e2:	88 eb       	ldi	r24, 0xB8	; 184
 4e4:	9b e0       	ldi	r25, 0x0B	; 11
 4e6:	6a c2       	rjmp	.+1236   	; 0x9bc <startNewVirtualTimer>
 4e8:	08 95       	ret
	}
	else
	{
		stopVirtualTimer(BUTTON_MODULE,resetDisplay,1);
 4ea:	41 e0       	ldi	r20, 0x01	; 1
 4ec:	6d e3       	ldi	r22, 0x3D	; 61
 4ee:	72 e0       	ldi	r23, 0x02	; 2
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	87 c2       	rjmp	.+1294   	; 0xa02 <stopVirtualTimer>
 4f4:	08 95       	ret

000004f6 <checkVirtualTimers>:

		checkVirtualTimers();
		
}
void checkVirtualTimers()
{
 4f6:	bf 92       	push	r11
 4f8:	cf 92       	push	r12
 4fa:	df 92       	push	r13
 4fc:	ef 92       	push	r14
 4fe:	ff 92       	push	r15
 500:	0f 93       	push	r16
 502:	1f 93       	push	r17
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	cf e3       	ldi	r28, 0x3F	; 63
 50a:	d1 e0       	ldi	r29, 0x01	; 1
 50c:	0a e3       	ldi	r16, 0x3A	; 58
 50e:	11 e0       	ldi	r17, 0x01	; 1
 510:	0f 2e       	mov	r0, r31
 512:	f5 e8       	ldi	r31, 0x85	; 133
 514:	cf 2e       	mov	r12, r31
 516:	f1 e0       	ldi	r31, 0x01	; 1
 518:	df 2e       	mov	r13, r31
 51a:	f0 2d       	mov	r31, r0
				timers[index].timerStarted = TIMER_EXPIRED;
			}
			else if(TIMER_EXPIRED == timers[index].period)
			{
				//if timer expired and there is no callback function, set action flag
				flags[timers[index].module] = FLAG_SET;
 51c:	bb 24       	eor	r11, r11
 51e:	b3 94       	inc	r11
{
	uint8_t index = 0x00u;
	
	while(10 > index)
	{
		if(timers[index].timerStarted)
 520:	88 81       	ld	r24, Y
 522:	88 23       	and	r24, r24
 524:	e1 f0       	breq	.+56     	; 0x55e <checkVirtualTimers+0x68>
		{
			if (timers[index].period)
 526:	d8 01       	movw	r26, r16
 528:	8d 91       	ld	r24, X+
 52a:	9c 91       	ld	r25, X
 52c:	11 97       	sbiw	r26, 0x01	; 1
 52e:	00 97       	sbiw	r24, 0x00	; 0
 530:	21 f0       	breq	.+8      	; 0x53a <checkVirtualTimers+0x44>
			{
				timers[index].period -= 0x01u;
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	8d 93       	st	X+, r24
 536:	9c 93       	st	X, r25
 538:	12 c0       	rjmp	.+36     	; 0x55e <checkVirtualTimers+0x68>
			}
			else if((TIMER_EXPIRED == timers[index].period) && (0x00u != timers[index].f))
 53a:	d8 01       	movw	r26, r16
 53c:	13 96       	adiw	r26, 0x03	; 3
 53e:	ed 91       	ld	r30, X+
 540:	fc 91       	ld	r31, X
 542:	14 97       	sbiw	r26, 0x04	; 4
 544:	30 97       	sbiw	r30, 0x00	; 0
 546:	19 f0       	breq	.+6      	; 0x54e <checkVirtualTimers+0x58>
			{
				//if timer expired call the callback function
				timers[index].f();
 548:	09 95       	icall
				timers[index].timerStarted = TIMER_EXPIRED;
 54a:	18 82       	st	Y, r1
 54c:	08 c0       	rjmp	.+16     	; 0x55e <checkVirtualTimers+0x68>
 54e:	fe 01       	movw	r30, r28
 550:	33 97       	sbiw	r30, 0x03	; 3
			}
			else if(TIMER_EXPIRED == timers[index].period)
			{
				//if timer expired and there is no callback function, set action flag
				flags[timers[index].module] = FLAG_SET;
 552:	e0 81       	ld	r30, Z
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	ea 5d       	subi	r30, 0xDA	; 218
 558:	fe 4f       	sbci	r31, 0xFE	; 254
 55a:	b0 82       	st	Z, r11
				timers[index].timerStarted = TIMER_EXPIRED;
 55c:	18 82       	st	Y, r1
 55e:	27 96       	adiw	r28, 0x07	; 7
 560:	09 5f       	subi	r16, 0xF9	; 249
 562:	1f 4f       	sbci	r17, 0xFF	; 255
}
void checkVirtualTimers()
{
	uint8_t index = 0x00u;
	
	while(10 > index)
 564:	cc 15       	cp	r28, r12
 566:	dd 05       	cpc	r29, r13
 568:	d9 f6       	brne	.-74     	; 0x520 <checkVirtualTimers+0x2a>
				timers[index].timerStarted = TIMER_EXPIRED;
			}
		}
		index += 0x01u;
	}
}
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	1f 91       	pop	r17
 570:	0f 91       	pop	r16
 572:	ff 90       	pop	r15
 574:	ef 90       	pop	r14
 576:	df 90       	pop	r13
 578:	cf 90       	pop	r12
 57a:	bf 90       	pop	r11
 57c:	08 95       	ret

0000057e <scheduler>:
volatile uint8_t buttonCount;
volatile uint8_t led3State ;
volatile uint8_t connected ;

void scheduler(void)
{
 57e:	8f 92       	push	r8
 580:	9f 92       	push	r9
 582:	af 92       	push	r10
 584:	bf 92       	push	r11
 586:	cf 92       	push	r12
 588:	df 92       	push	r13
 58a:	ef 92       	push	r14
 58c:	ff 92       	push	r15
	if(count == 1000)
 58e:	80 91 20 01 	lds	r24, 0x0120
 592:	90 91 21 01 	lds	r25, 0x0121
 596:	88 3e       	cpi	r24, 0xE8	; 232
 598:	93 40       	sbci	r25, 0x03	; 3
 59a:	71 f4       	brne	.+28     	; 0x5b8 <scheduler+0x3a>
	{			
		//set mode for LED_1
		count = 0x0000u;
 59c:	10 92 21 01 	sts	0x0121, r1
 5a0:	10 92 20 01 	sts	0x0120, r1
		if(ledMode < 3)
 5a4:	80 91 33 01 	lds	r24, 0x0133
 5a8:	83 30       	cpi	r24, 0x03	; 3
 5aa:	20 f4       	brcc	.+8      	; 0x5b4 <scheduler+0x36>
		{
			ledMode += 0x01u;
 5ac:	8f 5f       	subi	r24, 0xFF	; 255
 5ae:	80 93 33 01 	sts	0x0133, r24
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <scheduler+0x3a>
		}
		else
		{
			ledMode = 0x00u;
 5b4:	10 92 33 01 	sts	0x0133, r1
		
		}
	}
	if((count % 4 == 0) &&(count >=4))
 5b8:	80 91 20 01 	lds	r24, 0x0120
 5bc:	90 91 21 01 	lds	r25, 0x0121
 5c0:	83 70       	andi	r24, 0x03	; 3
 5c2:	99 27       	eor	r25, r25
 5c4:	89 2b       	or	r24, r25
 5c6:	79 f5       	brne	.+94     	; 0x626 <scheduler+0xa8>
 5c8:	80 91 20 01 	lds	r24, 0x0120
 5cc:	90 91 21 01 	lds	r25, 0x0121
 5d0:	04 97       	sbiw	r24, 0x04	; 4
 5d2:	48 f1       	brcs	.+82     	; 0x626 <scheduler+0xa8>
	{	
		if((LED_MODE_INCREMENT == ledMode) && (OCR0B < 255))
 5d4:	80 91 33 01 	lds	r24, 0x0133
 5d8:	81 30       	cpi	r24, 0x01	; 1
 5da:	39 f4       	brne	.+14     	; 0x5ea <scheduler+0x6c>
 5dc:	88 b5       	in	r24, 0x28	; 40
 5de:	8f 3f       	cpi	r24, 0xFF	; 255
 5e0:	a9 f0       	breq	.+42     	; 0x60c <scheduler+0x8e>
		{
			OCR0B += 0x01u;
 5e2:	88 b5       	in	r24, 0x28	; 40
 5e4:	8f 5f       	subi	r24, 0xFF	; 255
 5e6:	88 bd       	out	0x28, r24	; 40
 5e8:	11 c0       	rjmp	.+34     	; 0x60c <scheduler+0x8e>
		}
		else if((LED_MODE_DECREMENT == ledMode) && (OCR0B > 0))
 5ea:	83 30       	cpi	r24, 0x03	; 3
 5ec:	39 f4       	brne	.+14     	; 0x5fc <scheduler+0x7e>
 5ee:	88 b5       	in	r24, 0x28	; 40
 5f0:	88 23       	and	r24, r24
 5f2:	61 f0       	breq	.+24     	; 0x60c <scheduler+0x8e>
		{
			OCR0B -= 0x01u;
 5f4:	88 b5       	in	r24, 0x28	; 40
 5f6:	81 50       	subi	r24, 0x01	; 1
 5f8:	88 bd       	out	0x28, r24	; 40
 5fa:	08 c0       	rjmp	.+16     	; 0x60c <scheduler+0x8e>
		}
		else if(LED_MODE_HIGH == ledMode)
 5fc:	82 30       	cpi	r24, 0x02	; 2
 5fe:	19 f4       	brne	.+6      	; 0x606 <scheduler+0x88>
		{
			OCR0B = 0xFFu;
 600:	8f ef       	ldi	r24, 0xFF	; 255
 602:	88 bd       	out	0x28, r24	; 40
 604:	03 c0       	rjmp	.+6      	; 0x60c <scheduler+0x8e>
		}
		else if(LED_MODE_STOP == ledMode)
 606:	81 11       	cpse	r24, r1
 608:	01 c0       	rjmp	.+2      	; 0x60c <scheduler+0x8e>
		{
			OCR0B = 0x00u;
 60a:	18 bc       	out	0x28, r1	; 40
		}
		
		if(flags[BUTTON_SHORT_PRESS_FLAG])
 60c:	80 91 26 01 	lds	r24, 0x0126
 610:	88 23       	and	r24, r24
 612:	49 f0       	breq	.+18     	; 0x626 <scheduler+0xa8>
		{
			startNewVirtualTimer(30,BUTTON_MODULE,incrementDisplay,1);
 614:	21 e0       	ldi	r18, 0x01	; 1
 616:	4a e4       	ldi	r20, 0x4A	; 74
 618:	52 e0       	ldi	r21, 0x02	; 2
 61a:	61 e0       	ldi	r22, 0x01	; 1
 61c:	8e e1       	ldi	r24, 0x1E	; 30
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	cd d1       	rcall	.+922    	; 0x9bc <startNewVirtualTimer>
			flags[BUTTON_SHORT_PRESS_FLAG] = FLAG_CLEAR;
 622:	10 92 26 01 	sts	0x0126, r1
		}
	}
	if((count % 5 == 0) && (count >= 5))
 626:	40 91 20 01 	lds	r20, 0x0120
 62a:	50 91 21 01 	lds	r21, 0x0121
 62e:	9a 01       	movw	r18, r20
 630:	ad ec       	ldi	r26, 0xCD	; 205
 632:	bc ec       	ldi	r27, 0xCC	; 204
 634:	12 d4       	rcall	.+2084   	; 0xe5a <__umulhisi3>
 636:	96 95       	lsr	r25
 638:	87 95       	ror	r24
 63a:	96 95       	lsr	r25
 63c:	87 95       	ror	r24
 63e:	9c 01       	movw	r18, r24
 640:	22 0f       	add	r18, r18
 642:	33 1f       	adc	r19, r19
 644:	22 0f       	add	r18, r18
 646:	33 1f       	adc	r19, r19
 648:	82 0f       	add	r24, r18
 64a:	93 1f       	adc	r25, r19
 64c:	48 17       	cp	r20, r24
 64e:	59 07       	cpc	r21, r25
 650:	09 f0       	breq	.+2      	; 0x654 <scheduler+0xd6>
 652:	4c c0       	rjmp	.+152    	; 0x6ec <scheduler+0x16e>
 654:	80 91 20 01 	lds	r24, 0x0120
 658:	90 91 21 01 	lds	r25, 0x0121
 65c:	05 97       	sbiw	r24, 0x05	; 5
 65e:	08 f4       	brcc	.+2      	; 0x662 <scheduler+0xe4>
 660:	45 c0       	rjmp	.+138    	; 0x6ec <scheduler+0x16e>
	{
		if(tempCount < 25)
 662:	80 91 34 01 	lds	r24, 0x0134
 666:	89 31       	cpi	r24, 0x19	; 25
 668:	f8 f4       	brcc	.+62     	; 0x6a8 <scheduler+0x12a>
		{
			sum += adcRead(TEMP_SENZOR);
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	22 dd       	rcall	.-1468   	; 0xb2 <adcRead>
 66e:	bc 01       	movw	r22, r24
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	d9 d2       	rcall	.+1458   	; 0xc28 <__floatunsisf>
 676:	9b 01       	movw	r18, r22
 678:	ac 01       	movw	r20, r24
 67a:	60 91 22 01 	lds	r22, 0x0122
 67e:	70 91 23 01 	lds	r23, 0x0123
 682:	80 91 24 01 	lds	r24, 0x0124
 686:	90 91 25 01 	lds	r25, 0x0125
 68a:	d2 d1       	rcall	.+932    	; 0xa30 <__addsf3>
 68c:	60 93 22 01 	sts	0x0122, r22
 690:	70 93 23 01 	sts	0x0123, r23
 694:	80 93 24 01 	sts	0x0124, r24
 698:	90 93 25 01 	sts	0x0125, r25
			tempCount +=1;
 69c:	80 91 34 01 	lds	r24, 0x0134
 6a0:	8f 5f       	subi	r24, 0xFF	; 255
 6a2:	80 93 34 01 	sts	0x0134, r24
 6a6:	22 c0       	rjmp	.+68     	; 0x6ec <scheduler+0x16e>
		}
		else
		{
			temp = adcToCelsius(sum / 24);
 6a8:	20 e0       	ldi	r18, 0x00	; 0
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	40 ec       	ldi	r20, 0xC0	; 192
 6ae:	51 e4       	ldi	r21, 0x41	; 65
 6b0:	60 91 22 01 	lds	r22, 0x0122
 6b4:	70 91 23 01 	lds	r23, 0x0123
 6b8:	80 91 24 01 	lds	r24, 0x0124
 6bc:	90 91 25 01 	lds	r25, 0x0125
 6c0:	1f d2       	rcall	.+1086   	; 0xb00 <__divsf3>
 6c2:	86 d2       	rcall	.+1292   	; 0xbd0 <__fixunssfsi>
 6c4:	cb 01       	movw	r24, r22
 6c6:	16 dd       	rcall	.-1492   	; 0xf4 <adcToCelsius>
 6c8:	60 93 00 01 	sts	0x0100, r22
 6cc:	70 93 01 01 	sts	0x0101, r23
 6d0:	80 93 02 01 	sts	0x0102, r24
 6d4:	90 93 03 01 	sts	0x0103, r25
			sum = 0x00u;
 6d8:	10 92 22 01 	sts	0x0122, r1
 6dc:	10 92 23 01 	sts	0x0123, r1
 6e0:	10 92 24 01 	sts	0x0124, r1
 6e4:	10 92 25 01 	sts	0x0125, r1
			tempCount = 0x00u;
 6e8:	10 92 34 01 	sts	0x0134, r1
		}
	}
	 if((count % 10 == 0) && (count >= 10)) // every 10 ms check temperature
 6ec:	40 91 20 01 	lds	r20, 0x0120
 6f0:	50 91 21 01 	lds	r21, 0x0121
 6f4:	9a 01       	movw	r18, r20
 6f6:	ad ec       	ldi	r26, 0xCD	; 205
 6f8:	bc ec       	ldi	r27, 0xCC	; 204
 6fa:	af d3       	rcall	.+1886   	; 0xe5a <__umulhisi3>
 6fc:	96 95       	lsr	r25
 6fe:	87 95       	ror	r24
 700:	96 95       	lsr	r25
 702:	87 95       	ror	r24
 704:	96 95       	lsr	r25
 706:	87 95       	ror	r24
 708:	9c 01       	movw	r18, r24
 70a:	22 0f       	add	r18, r18
 70c:	33 1f       	adc	r19, r19
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	88 0f       	add	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	88 0f       	add	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	82 0f       	add	r24, r18
 71c:	93 1f       	adc	r25, r19
 71e:	48 17       	cp	r20, r24
 720:	59 07       	cpc	r21, r25
 722:	69 f5       	brne	.+90     	; 0x77e <scheduler+0x200>
 724:	80 91 20 01 	lds	r24, 0x0120
 728:	90 91 21 01 	lds	r25, 0x0121
 72c:	0a 97       	sbiw	r24, 0x0a	; 10
 72e:	38 f1       	brcs	.+78     	; 0x77e <scheduler+0x200>
	{
		prescTemp = adcGetPrescription(adcRead(REF_TEMP)+25); // +25  = + 5 grade C
 730:	83 e0       	ldi	r24, 0x03	; 3
 732:	bf dc       	rcall	.-1666   	; 0xb2 <adcRead>
 734:	49 96       	adiw	r24, 0x19	; 25
 736:	e8 dc       	rcall	.-1584   	; 0x108 <adcGetPrescription>
 738:	6b 01       	movw	r12, r22
 73a:	7c 01       	movw	r14, r24
 73c:	60 93 35 01 	sts	0x0135, r22
 740:	70 93 36 01 	sts	0x0136, r23
 744:	80 93 37 01 	sts	0x0137, r24
 748:	90 93 38 01 	sts	0x0138, r25
		
		if(temp > prescTemp)
 74c:	80 90 00 01 	lds	r8, 0x0100
 750:	90 90 01 01 	lds	r9, 0x0101
 754:	a0 90 02 01 	lds	r10, 0x0102
 758:	b0 90 03 01 	lds	r11, 0x0103
 75c:	a5 01       	movw	r20, r10
 75e:	94 01       	movw	r18, r8
 760:	cb d1       	rcall	.+918    	; 0xaf8 <__cmpsf2>
 762:	88 23       	and	r24, r24
 764:	1c f4       	brge	.+6      	; 0x76c <scheduler+0x1ee>
		{
			led_ON(LED_2);
 766:	82 e0       	ldi	r24, 0x02	; 2
 768:	db d0       	rcall	.+438    	; 0x920 <led_ON>
 76a:	09 c0       	rjmp	.+18     	; 0x77e <scheduler+0x200>
		}
		else if(temp < prescTemp)
 76c:	a5 01       	movw	r20, r10
 76e:	94 01       	movw	r18, r8
 770:	c7 01       	movw	r24, r14
 772:	b6 01       	movw	r22, r12
 774:	0b d3       	rcall	.+1558   	; 0xd8c <__gesf2>
 776:	18 16       	cp	r1, r24
 778:	14 f4       	brge	.+4      	; 0x77e <scheduler+0x200>
		{
			led_OFF(LED_2);
 77a:	82 e0       	ldi	r24, 0x02	; 2
 77c:	dd d0       	rcall	.+442    	; 0x938 <led_OFF>
		}
	}
	 if(count % 20 == 0) // every 20 ms check if A or S was pressed
 77e:	40 91 20 01 	lds	r20, 0x0120
 782:	50 91 21 01 	lds	r21, 0x0121
 786:	9a 01       	movw	r18, r20
 788:	ad ec       	ldi	r26, 0xCD	; 205
 78a:	bc ec       	ldi	r27, 0xCC	; 204
 78c:	66 d3       	rcall	.+1740   	; 0xe5a <__umulhisi3>
 78e:	92 95       	swap	r25
 790:	82 95       	swap	r24
 792:	8f 70       	andi	r24, 0x0F	; 15
 794:	89 27       	eor	r24, r25
 796:	9f 70       	andi	r25, 0x0F	; 15
 798:	89 27       	eor	r24, r25
 79a:	64 e1       	ldi	r22, 0x14	; 20
 79c:	68 9f       	mul	r22, r24
 79e:	90 01       	movw	r18, r0
 7a0:	69 9f       	mul	r22, r25
 7a2:	30 0d       	add	r19, r0
 7a4:	11 24       	eor	r1, r1
 7a6:	42 17       	cp	r20, r18
 7a8:	53 07       	cpc	r21, r19
 7aa:	09 f4       	brne	.+2      	; 0x7ae <scheduler+0x230>
	{
		check_Led3();
 7ac:	d2 d0       	rcall	.+420    	; 0x952 <check_Led3>
	}
	if((count % 100 == 0) && (count > 100))
 7ae:	40 91 20 01 	lds	r20, 0x0120
 7b2:	50 91 21 01 	lds	r21, 0x0121
 7b6:	9a 01       	movw	r18, r20
 7b8:	36 95       	lsr	r19
 7ba:	27 95       	ror	r18
 7bc:	36 95       	lsr	r19
 7be:	27 95       	ror	r18
 7c0:	ab e7       	ldi	r26, 0x7B	; 123
 7c2:	b4 e1       	ldi	r27, 0x14	; 20
 7c4:	4a d3       	rcall	.+1684   	; 0xe5a <__umulhisi3>
 7c6:	96 95       	lsr	r25
 7c8:	87 95       	ror	r24
 7ca:	64 e6       	ldi	r22, 0x64	; 100
 7cc:	68 9f       	mul	r22, r24
 7ce:	90 01       	movw	r18, r0
 7d0:	69 9f       	mul	r22, r25
 7d2:	30 0d       	add	r19, r0
 7d4:	11 24       	eor	r1, r1
 7d6:	42 17       	cp	r20, r18
 7d8:	53 07       	cpc	r21, r19
 7da:	09 f0       	breq	.+2      	; 0x7de <scheduler+0x260>
 7dc:	49 c0       	rjmp	.+146    	; 0x870 <scheduler+0x2f2>
 7de:	80 91 20 01 	lds	r24, 0x0120
 7e2:	90 91 21 01 	lds	r25, 0x0121
 7e6:	85 36       	cpi	r24, 0x65	; 101
 7e8:	91 05       	cpc	r25, r1
 7ea:	08 f4       	brcc	.+2      	; 0x7ee <scheduler+0x270>
 7ec:	41 c0       	rjmp	.+130    	; 0x870 <scheduler+0x2f2>
	{
		if(connected)
 7ee:	80 91 31 01 	lds	r24, 0x0131
 7f2:	88 23       	and	r24, r24
 7f4:	09 f4       	brne	.+2      	; 0x7f8 <scheduler+0x27a>
 7f6:	3c c0       	rjmp	.+120    	; 0x870 <scheduler+0x2f2>
		{
			adc_printValue(temp);
 7f8:	60 91 00 01 	lds	r22, 0x0100
 7fc:	70 91 01 01 	lds	r23, 0x0101
 800:	80 91 02 01 	lds	r24, 0x0102
 804:	90 91 03 01 	lds	r25, 0x0103
 808:	89 dc       	rcall	.-1774   	; 0x11c <adc_printValue>
			uart_transmit(' ');
 80a:	80 e2       	ldi	r24, 0x20	; 32
 80c:	67 d0       	rcall	.+206    	; 0x8dc <uart_transmit>
			adc_printValue(prescTemp);
 80e:	60 91 35 01 	lds	r22, 0x0135
 812:	70 91 36 01 	lds	r23, 0x0136
 816:	80 91 37 01 	lds	r24, 0x0137
 81a:	90 91 38 01 	lds	r25, 0x0138
 81e:	7e dc       	rcall	.-1796   	; 0x11c <adc_printValue>
			uart_transmit(' ');
 820:	80 e2       	ldi	r24, 0x20	; 32
 822:	5c d0       	rcall	.+184    	; 0x8dc <uart_transmit>
			led3State = getLedState();
 824:	ab d0       	rcall	.+342    	; 0x97c <getLedState>
 826:	80 93 39 01 	sts	0x0139, r24
			if(led3State == 0x41 || led3State == 0x61)
 82a:	80 91 39 01 	lds	r24, 0x0139
 82e:	81 34       	cpi	r24, 0x41	; 65
 830:	21 f0       	breq	.+8      	; 0x83a <scheduler+0x2bc>
 832:	80 91 39 01 	lds	r24, 0x0139
 836:	81 36       	cpi	r24, 0x61	; 97
 838:	21 f4       	brne	.+8      	; 0x842 <scheduler+0x2c4>
			{
				uart_print("Aprins ");	
 83a:	84 e0       	ldi	r24, 0x04	; 4
 83c:	91 e0       	ldi	r25, 0x01	; 1
 83e:	56 d0       	rcall	.+172    	; 0x8ec <uart_print>
 840:	0f c0       	rjmp	.+30     	; 0x860 <scheduler+0x2e2>
			}
			else if(led3State == 0x53 || led3State == 0x73 || led3State == 0x00)
 842:	80 91 39 01 	lds	r24, 0x0139
 846:	83 35       	cpi	r24, 0x53	; 83
 848:	41 f0       	breq	.+16     	; 0x85a <scheduler+0x2dc>
 84a:	80 91 39 01 	lds	r24, 0x0139
 84e:	83 37       	cpi	r24, 0x73	; 115
 850:	21 f0       	breq	.+8      	; 0x85a <scheduler+0x2dc>
 852:	80 91 39 01 	lds	r24, 0x0139
 856:	81 11       	cpse	r24, r1
 858:	03 c0       	rjmp	.+6      	; 0x860 <scheduler+0x2e2>
			{
				uart_print("Stins ");	
 85a:	8c e0       	ldi	r24, 0x0C	; 12
 85c:	91 e0       	ldi	r25, 0x01	; 1
 85e:	46 d0       	rcall	.+140    	; 0x8ec <uart_print>
			}
			uart_transmit(eeprom_read(0x00u)+48);
 860:	80 e0       	ldi	r24, 0x00	; 0
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	32 dd       	rcall	.-1436   	; 0x2ca <eeprom_read>
 866:	80 5d       	subi	r24, 0xD0	; 208
 868:	39 d0       	rcall	.+114    	; 0x8dc <uart_transmit>
			uart_print("\r\n");
 86a:	83 e1       	ldi	r24, 0x13	; 19
 86c:	91 e0       	ldi	r25, 0x01	; 1
 86e:	3e d0       	rcall	.+124    	; 0x8ec <uart_print>
		}	
	}

		checkVirtualTimers();
 870:	42 de       	rcall	.-892    	; 0x4f6 <checkVirtualTimers>
		
}
 872:	ff 90       	pop	r15
 874:	ef 90       	pop	r14
 876:	df 90       	pop	r13
 878:	cf 90       	pop	r12
 87a:	bf 90       	pop	r11
 87c:	af 90       	pop	r10
 87e:	9f 90       	pop	r9
 880:	8f 90       	pop	r8
 882:	08 95       	ret

00000884 <clear>:
		eeprom_write(0x00u,0x00u);
	}
}
void clear()
{
	PORTB &= ~(1 << PORTB0) & ~(1 << PORTB1) & ~(1 << PORTB2) & ~(1 << PORTB3) & ~(1 << PORTB4) & ~(1 << PORTB5);
 884:	85 b1       	in	r24, 0x05	; 5
 886:	80 7c       	andi	r24, 0xC0	; 192
 888:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~(1 << PORTD6) & ~(1 << PORTD7);
 88a:	8b b1       	in	r24, 0x0b	; 11
 88c:	8f 73       	andi	r24, 0x3F	; 63
 88e:	8b b9       	out	0x0b, r24	; 11
 890:	08 95       	ret

00000892 <display>:
#include "D:\Repos\AtmelRepos\PS1\PS1\Header\eeprom.h"

const uint8_t segDisplay[10] = {0x3Fu, 0x06u, 0x1Bu, 0x0Fu, 0x26u, 0x2Du, 0x3D, 0x07u, 0x3F, 0x2F};
volatile uint8_t buttonCount = 0x00u;
void display(uint8_t value)
{
 892:	cf 93       	push	r28
 894:	c8 2f       	mov	r28, r24
	clear();
 896:	f6 df       	rcall	.-20     	; 0x884 <clear>
	if(value < 10)
 898:	ca 30       	cpi	r28, 0x0A	; 10
 89a:	a8 f4       	brcc	.+42     	; 0x8c6 <display+0x34>
	{
		if((value != 0x00) & (value != 0x01) & (value != 0x07))
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	c7 30       	cpi	r28, 0x07	; 7
 8a0:	09 f4       	brne	.+2      	; 0x8a4 <display+0x12>
 8a2:	80 e0       	ldi	r24, 0x00	; 0
 8a4:	88 23       	and	r24, r24
 8a6:	31 f0       	breq	.+12     	; 0x8b4 <display+0x22>
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	c2 30       	cpi	r28, 0x02	; 2
 8ac:	08 f4       	brcc	.+2      	; 0x8b0 <display+0x1e>
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	81 11       	cpse	r24, r1
		{
			PORTD |= (1 << PORTD6);
 8b2:	5e 9a       	sbi	0x0b, 6	; 11
		}
		PORTB |= segDisplay[value];
 8b4:	95 b1       	in	r25, 0x05	; 5
 8b6:	ec 2f       	mov	r30, r28
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	ea 5e       	subi	r30, 0xEA	; 234
 8bc:	fe 4f       	sbci	r31, 0xFE	; 254
 8be:	80 81       	ld	r24, Z
 8c0:	89 2b       	or	r24, r25
 8c2:	85 b9       	out	0x05, r24	; 5
 8c4:	09 c0       	rjmp	.+18     	; 0x8d8 <display+0x46>
	}
	else
	{
		PORTB |= segDisplay[0x00u];
 8c6:	85 b1       	in	r24, 0x05	; 5
 8c8:	8f 63       	ori	r24, 0x3F	; 63
 8ca:	85 b9       	out	0x05, r24	; 5
		buttonCount = 0x00;
 8cc:	10 92 30 01 	sts	0x0130, r1
		eeprom_write(0x00u,0x00u);
 8d0:	60 e0       	ldi	r22, 0x00	; 0
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	f1 dc       	rcall	.-1566   	; 0x2ba <eeprom_write>
	}
}
 8d8:	cf 91       	pop	r28
 8da:	08 95       	ret

000008dc <uart_transmit>:

// transmit a char to uart
void uart_transmit( unsigned char data )
{
	// wait for empty transmit buffer
	while ( ! ( UCSR0A & ( 1 << UDRE0 ) ) )
 8dc:	e0 ec       	ldi	r30, 0xC0	; 192
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	90 81       	ld	r25, Z
 8e2:	95 ff       	sbrs	r25, 5
 8e4:	fd cf       	rjmp	.-6      	; 0x8e0 <uart_transmit+0x4>
	;
	// put data into buffer, sends data
	UDR0 = data;
 8e6:	80 93 c6 00 	sts	0x00C6, r24
 8ea:	08 95       	ret

000008ec <uart_print>:
}
// write a string to the uart
void uart_print( char data[] )
{
 8ec:	0f 93       	push	r16
 8ee:	1f 93       	push	r17
 8f0:	cf 93       	push	r28
 8f2:	df 93       	push	r29
	uint8_t count = 0;
	uint8_t length = strlen(data);
 8f4:	fc 01       	movw	r30, r24
 8f6:	01 90       	ld	r0, Z+
 8f8:	00 20       	and	r0, r0
 8fa:	e9 f7       	brne	.-6      	; 0x8f6 <uart_print+0xa>
 8fc:	31 97       	sbiw	r30, 0x01	; 1
 8fe:	1e 2f       	mov	r17, r30
 900:	18 1b       	sub	r17, r24
	
	for ( count = 0; count < length; count++ )
 902:	49 f0       	breq	.+18     	; 0x916 <__stack+0x17>
 904:	08 2f       	mov	r16, r24
 906:	c0 2f       	mov	r28, r16
 908:	d9 2f       	mov	r29, r25
	uart_transmit(data[count]);
 90a:	89 91       	ld	r24, Y+
 90c:	e7 df       	rcall	.-50     	; 0x8dc <uart_transmit>
 90e:	8c 2f       	mov	r24, r28
 910:	80 1b       	sub	r24, r16
void uart_print( char data[] )
{
	uint8_t count = 0;
	uint8_t length = strlen(data);
	
	for ( count = 0; count < length; count++ )
 912:	81 17       	cp	r24, r17
 914:	d0 f3       	brcs	.-12     	; 0x90a <__stack+0xb>
	uart_transmit(data[count]);
}
 916:	df 91       	pop	r29
 918:	cf 91       	pop	r28
 91a:	1f 91       	pop	r17
 91c:	0f 91       	pop	r16
 91e:	08 95       	ret

00000920 <led_ON>:
	PORTD |= (1 << led);
}

void togle_Led(uint8_t led)
{
	PORTD ^= (1 << led);
 920:	9b b1       	in	r25, 0x0b	; 11
 922:	21 e0       	ldi	r18, 0x01	; 1
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	02 c0       	rjmp	.+4      	; 0x92c <led_ON+0xc>
 928:	22 0f       	add	r18, r18
 92a:	33 1f       	adc	r19, r19
 92c:	8a 95       	dec	r24
 92e:	e2 f7       	brpl	.-8      	; 0x928 <led_ON+0x8>
 930:	20 95       	com	r18
 932:	92 23       	and	r25, r18
 934:	9b b9       	out	0x0b, r25	; 11
 936:	08 95       	ret

00000938 <led_OFF>:
 938:	4b b1       	in	r20, 0x0b	; 11
 93a:	21 e0       	ldi	r18, 0x01	; 1
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	b9 01       	movw	r22, r18
 940:	02 c0       	rjmp	.+4      	; 0x946 <led_OFF+0xe>
 942:	66 0f       	add	r22, r22
 944:	77 1f       	adc	r23, r23
 946:	8a 95       	dec	r24
 948:	e2 f7       	brpl	.-8      	; 0x942 <led_OFF+0xa>
 94a:	cb 01       	movw	r24, r22
 94c:	84 2b       	or	r24, r20
 94e:	8b b9       	out	0x0b, r24	; 11
 950:	08 95       	ret

00000952 <check_Led3>:
}

void check_Led3(void)
{
	if(led3 == 0x41 || led3 == 0x61)
 952:	80 91 32 01 	lds	r24, 0x0132
 956:	81 34       	cpi	r24, 0x41	; 65
 958:	21 f0       	breq	.+8      	; 0x962 <check_Led3+0x10>
 95a:	80 91 32 01 	lds	r24, 0x0132
 95e:	81 36       	cpi	r24, 0x61	; 97
 960:	11 f4       	brne	.+4      	; 0x966 <check_Led3+0x14>
	{
		led_ON(LED_3);
 962:	83 e0       	ldi	r24, 0x03	; 3
 964:	dd df       	rcall	.-70     	; 0x920 <led_ON>
		//led3 = 0x00;
	}
	if(led3 == 0x53 || led3 == 0x73)
 966:	80 91 32 01 	lds	r24, 0x0132
 96a:	83 35       	cpi	r24, 0x53	; 83
 96c:	21 f0       	breq	.+8      	; 0x976 <check_Led3+0x24>
 96e:	80 91 32 01 	lds	r24, 0x0132
 972:	83 37       	cpi	r24, 0x73	; 115
 974:	11 f4       	brne	.+4      	; 0x97a <check_Led3+0x28>
	{
		led_OFF(LED_3);
 976:	83 e0       	ldi	r24, 0x03	; 3
 978:	df cf       	rjmp	.-66     	; 0x938 <led_OFF>
 97a:	08 95       	ret

0000097c <getLedState>:
		//led3 = 0x00;
	}
}
uint8_t getLedState(void)
{
	return led3;
 97c:	80 91 32 01 	lds	r24, 0x0132
 980:	08 95       	ret

00000982 <initVirtualTimers>:
#include "D:\Repos\AtmelRepos\PS1\PS1\Header\util.h"

virtualTimer_T timers[10];

void initVirtualTimers()
{
 982:	cf 93       	push	r28
 984:	df 93       	push	r29
 986:	aa e3       	ldi	r26, 0x3A	; 58
 988:	b1 e0       	ldi	r27, 0x01	; 1
 98a:	e0 e4       	ldi	r30, 0x40	; 64
 98c:	f1 e0       	ldi	r31, 0x01	; 1
 98e:	8d e8       	ldi	r24, 0x8D	; 141
 990:	91 e0       	ldi	r25, 0x01	; 1
	uint8_t index = 0x00u;
	for(index = 0x00u; index < 0x0Bu; index++)
	{
		timers[index].period = TIMER_EXPIRED;
 992:	11 96       	adiw	r26, 0x01	; 1
 994:	1c 92       	st	X, r1
 996:	1e 92       	st	-X, r1
 998:	ef 01       	movw	r28, r30
 99a:	24 97       	sbiw	r28, 0x04	; 4
		timers[index].module = SHEDULER_MODULE;
 99c:	18 82       	st	Y, r1
		timers[index].f		 = 0x00u;
 99e:	14 96       	adiw	r26, 0x04	; 4
 9a0:	1c 92       	st	X, r1
 9a2:	1e 92       	st	-X, r1
 9a4:	13 97       	sbiw	r26, 0x03	; 3
 9a6:	23 96       	adiw	r28, 0x03	; 3
		timers[index].timerStarted = FLAG_CLEAR;
 9a8:	18 82       	st	Y, r1
		timers[index].msg   = FLAG_CLEAR;
 9aa:	10 82       	st	Z, r1
 9ac:	17 96       	adiw	r26, 0x07	; 7
 9ae:	37 96       	adiw	r30, 0x07	; 7
virtualTimer_T timers[10];

void initVirtualTimers()
{
	uint8_t index = 0x00u;
	for(index = 0x00u; index < 0x0Bu; index++)
 9b0:	e8 17       	cp	r30, r24
 9b2:	f9 07       	cpc	r31, r25
 9b4:	71 f7       	brne	.-36     	; 0x992 <initVirtualTimers+0x10>
		timers[index].module = SHEDULER_MODULE;
		timers[index].f		 = 0x00u;
		timers[index].timerStarted = FLAG_CLEAR;
		timers[index].msg   = FLAG_CLEAR;
	}
}
 9b6:	df 91       	pop	r29
 9b8:	cf 91       	pop	r28
 9ba:	08 95       	ret

000009bc <startNewVirtualTimer>:
uint8_t startNewVirtualTimer(uint16_t time, uint8_t module, callback fnc, uint8_t msg)
{
 9bc:	cf 93       	push	r28
 9be:	df 93       	push	r29
 9c0:	af e3       	ldi	r26, 0x3F	; 63
 9c2:	b1 e0       	ldi	r27, 0x01	; 1
 9c4:	e0 e0       	ldi	r30, 0x00	; 0
 9c6:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t index = 0;
	uint8_t timerStarted = 0x00u;
	while(index < 11)
	{
		if(TIMER_EMPTY == timers[index].timerStarted)
 9c8:	ef 01       	movw	r28, r30
 9ca:	3c 91       	ld	r19, X
 9cc:	33 23       	and	r19, r19
 9ce:	19 f0       	breq	.+6      	; 0x9d6 <startNewVirtualTimer+0x1a>
 9d0:	31 96       	adiw	r30, 0x01	; 1
 9d2:	17 96       	adiw	r26, 0x07	; 7
 9d4:	f9 cf       	rjmp	.-14     	; 0x9c8 <startNewVirtualTimer+0xc>
		{
			timerStarted = 0x01u;
			timers[index].timerStarted = 0x01u;
 9d6:	ee 0f       	add	r30, r30
 9d8:	ff 1f       	adc	r31, r31
 9da:	ee 0f       	add	r30, r30
 9dc:	ff 1f       	adc	r31, r31
 9de:	ee 0f       	add	r30, r30
 9e0:	ff 1f       	adc	r31, r31
 9e2:	ec 1b       	sub	r30, r28
 9e4:	fd 0b       	sbc	r31, r29
 9e6:	e6 5c       	subi	r30, 0xC6	; 198
 9e8:	fe 4f       	sbci	r31, 0xFE	; 254
 9ea:	31 e0       	ldi	r19, 0x01	; 1
 9ec:	35 83       	std	Z+5, r19	; 0x05
			timers[index].msg = msg;
 9ee:	26 83       	std	Z+6, r18	; 0x06
			timers[index].period = time;
 9f0:	91 83       	std	Z+1, r25	; 0x01
 9f2:	80 83       	st	Z, r24
			timers[index].module = module;
 9f4:	62 83       	std	Z+2, r22	; 0x02
			timers[index].f = fnc;
 9f6:	54 83       	std	Z+4, r21	; 0x04
 9f8:	43 83       	std	Z+3, r20	; 0x03
	}
	else
	{
		return 0x00u;
	}
}
 9fa:	81 e0       	ldi	r24, 0x01	; 1
 9fc:	df 91       	pop	r29
 9fe:	cf 91       	pop	r28
 a00:	08 95       	ret

00000a02 <stopVirtualTimer>:

uint8_t stopVirtualTimer(uint8_t module, callback fcn, uint8_t flag)
{
 a02:	ec e3       	ldi	r30, 0x3C	; 60
 a04:	f1 e0       	ldi	r31, 0x01	; 1
 a06:	af e3       	ldi	r26, 0x3F	; 63
 a08:	b1 e0       	ldi	r27, 0x01	; 1
 a0a:	29 e8       	ldi	r18, 0x89	; 137
 a0c:	31 e0       	ldi	r19, 0x01	; 1
	uint8_t index = 0;
	while(index < 11)
	{
		if(timers[index].module == module && timers[index].f == fcn)
 a0e:	90 81       	ld	r25, Z
 a10:	98 13       	cpse	r25, r24
 a12:	06 c0       	rjmp	.+12     	; 0xa20 <stopVirtualTimer+0x1e>
 a14:	41 81       	ldd	r20, Z+1	; 0x01
 a16:	52 81       	ldd	r21, Z+2	; 0x02
 a18:	46 17       	cp	r20, r22
 a1a:	57 07       	cpc	r21, r23
 a1c:	09 f4       	brne	.+2      	; 0xa20 <stopVirtualTimer+0x1e>
		{
			timers[index].timerStarted = TIMER_EMPTY;
 a1e:	1c 92       	st	X, r1
 a20:	37 96       	adiw	r30, 0x07	; 7
 a22:	17 96       	adiw	r26, 0x07	; 7
}

uint8_t stopVirtualTimer(uint8_t module, callback fcn, uint8_t flag)
{
	uint8_t index = 0;
	while(index < 11)
 a24:	e2 17       	cp	r30, r18
 a26:	f3 07       	cpc	r31, r19
 a28:	91 f7       	brne	.-28     	; 0xa0e <stopVirtualTimer+0xc>
			timers[index].timerStarted = TIMER_EMPTY;
		}
		index++;
	}
	return index;
 a2a:	8b e0       	ldi	r24, 0x0B	; 11
 a2c:	08 95       	ret

00000a2e <__subsf3>:
 a2e:	50 58       	subi	r21, 0x80	; 128

00000a30 <__addsf3>:
 a30:	bb 27       	eor	r27, r27
 a32:	aa 27       	eor	r26, r26
 a34:	0e d0       	rcall	.+28     	; 0xa52 <__addsf3x>
 a36:	70 c1       	rjmp	.+736    	; 0xd18 <__fp_round>
 a38:	61 d1       	rcall	.+706    	; 0xcfc <__fp_pscA>
 a3a:	30 f0       	brcs	.+12     	; 0xa48 <__addsf3+0x18>
 a3c:	66 d1       	rcall	.+716    	; 0xd0a <__fp_pscB>
 a3e:	20 f0       	brcs	.+8      	; 0xa48 <__addsf3+0x18>
 a40:	31 f4       	brne	.+12     	; 0xa4e <__addsf3+0x1e>
 a42:	9f 3f       	cpi	r25, 0xFF	; 255
 a44:	11 f4       	brne	.+4      	; 0xa4a <__addsf3+0x1a>
 a46:	1e f4       	brtc	.+6      	; 0xa4e <__addsf3+0x1e>
 a48:	56 c1       	rjmp	.+684    	; 0xcf6 <__fp_nan>
 a4a:	0e f4       	brtc	.+2      	; 0xa4e <__addsf3+0x1e>
 a4c:	e0 95       	com	r30
 a4e:	e7 fb       	bst	r30, 7
 a50:	4c c1       	rjmp	.+664    	; 0xcea <__fp_inf>

00000a52 <__addsf3x>:
 a52:	e9 2f       	mov	r30, r25
 a54:	72 d1       	rcall	.+740    	; 0xd3a <__fp_split3>
 a56:	80 f3       	brcs	.-32     	; 0xa38 <__addsf3+0x8>
 a58:	ba 17       	cp	r27, r26
 a5a:	62 07       	cpc	r22, r18
 a5c:	73 07       	cpc	r23, r19
 a5e:	84 07       	cpc	r24, r20
 a60:	95 07       	cpc	r25, r21
 a62:	18 f0       	brcs	.+6      	; 0xa6a <__addsf3x+0x18>
 a64:	71 f4       	brne	.+28     	; 0xa82 <__addsf3x+0x30>
 a66:	9e f5       	brtc	.+102    	; 0xace <__addsf3x+0x7c>
 a68:	8a c1       	rjmp	.+788    	; 0xd7e <__fp_zero>
 a6a:	0e f4       	brtc	.+2      	; 0xa6e <__addsf3x+0x1c>
 a6c:	e0 95       	com	r30
 a6e:	0b 2e       	mov	r0, r27
 a70:	ba 2f       	mov	r27, r26
 a72:	a0 2d       	mov	r26, r0
 a74:	0b 01       	movw	r0, r22
 a76:	b9 01       	movw	r22, r18
 a78:	90 01       	movw	r18, r0
 a7a:	0c 01       	movw	r0, r24
 a7c:	ca 01       	movw	r24, r20
 a7e:	a0 01       	movw	r20, r0
 a80:	11 24       	eor	r1, r1
 a82:	ff 27       	eor	r31, r31
 a84:	59 1b       	sub	r21, r25
 a86:	99 f0       	breq	.+38     	; 0xaae <__addsf3x+0x5c>
 a88:	59 3f       	cpi	r21, 0xF9	; 249
 a8a:	50 f4       	brcc	.+20     	; 0xaa0 <__addsf3x+0x4e>
 a8c:	50 3e       	cpi	r21, 0xE0	; 224
 a8e:	68 f1       	brcs	.+90     	; 0xaea <__addsf3x+0x98>
 a90:	1a 16       	cp	r1, r26
 a92:	f0 40       	sbci	r31, 0x00	; 0
 a94:	a2 2f       	mov	r26, r18
 a96:	23 2f       	mov	r18, r19
 a98:	34 2f       	mov	r19, r20
 a9a:	44 27       	eor	r20, r20
 a9c:	58 5f       	subi	r21, 0xF8	; 248
 a9e:	f3 cf       	rjmp	.-26     	; 0xa86 <__addsf3x+0x34>
 aa0:	46 95       	lsr	r20
 aa2:	37 95       	ror	r19
 aa4:	27 95       	ror	r18
 aa6:	a7 95       	ror	r26
 aa8:	f0 40       	sbci	r31, 0x00	; 0
 aaa:	53 95       	inc	r21
 aac:	c9 f7       	brne	.-14     	; 0xaa0 <__addsf3x+0x4e>
 aae:	7e f4       	brtc	.+30     	; 0xace <__addsf3x+0x7c>
 ab0:	1f 16       	cp	r1, r31
 ab2:	ba 0b       	sbc	r27, r26
 ab4:	62 0b       	sbc	r22, r18
 ab6:	73 0b       	sbc	r23, r19
 ab8:	84 0b       	sbc	r24, r20
 aba:	ba f0       	brmi	.+46     	; 0xaea <__addsf3x+0x98>
 abc:	91 50       	subi	r25, 0x01	; 1
 abe:	a1 f0       	breq	.+40     	; 0xae8 <__addsf3x+0x96>
 ac0:	ff 0f       	add	r31, r31
 ac2:	bb 1f       	adc	r27, r27
 ac4:	66 1f       	adc	r22, r22
 ac6:	77 1f       	adc	r23, r23
 ac8:	88 1f       	adc	r24, r24
 aca:	c2 f7       	brpl	.-16     	; 0xabc <__addsf3x+0x6a>
 acc:	0e c0       	rjmp	.+28     	; 0xaea <__addsf3x+0x98>
 ace:	ba 0f       	add	r27, r26
 ad0:	62 1f       	adc	r22, r18
 ad2:	73 1f       	adc	r23, r19
 ad4:	84 1f       	adc	r24, r20
 ad6:	48 f4       	brcc	.+18     	; 0xaea <__addsf3x+0x98>
 ad8:	87 95       	ror	r24
 ada:	77 95       	ror	r23
 adc:	67 95       	ror	r22
 ade:	b7 95       	ror	r27
 ae0:	f7 95       	ror	r31
 ae2:	9e 3f       	cpi	r25, 0xFE	; 254
 ae4:	08 f0       	brcs	.+2      	; 0xae8 <__addsf3x+0x96>
 ae6:	b3 cf       	rjmp	.-154    	; 0xa4e <__addsf3+0x1e>
 ae8:	93 95       	inc	r25
 aea:	88 0f       	add	r24, r24
 aec:	08 f0       	brcs	.+2      	; 0xaf0 <__addsf3x+0x9e>
 aee:	99 27       	eor	r25, r25
 af0:	ee 0f       	add	r30, r30
 af2:	97 95       	ror	r25
 af4:	87 95       	ror	r24
 af6:	08 95       	ret

00000af8 <__cmpsf2>:
 af8:	d4 d0       	rcall	.+424    	; 0xca2 <__fp_cmp>
 afa:	08 f4       	brcc	.+2      	; 0xafe <__cmpsf2+0x6>
 afc:	81 e0       	ldi	r24, 0x01	; 1
 afe:	08 95       	ret

00000b00 <__divsf3>:
 b00:	0c d0       	rcall	.+24     	; 0xb1a <__divsf3x>
 b02:	0a c1       	rjmp	.+532    	; 0xd18 <__fp_round>
 b04:	02 d1       	rcall	.+516    	; 0xd0a <__fp_pscB>
 b06:	40 f0       	brcs	.+16     	; 0xb18 <__divsf3+0x18>
 b08:	f9 d0       	rcall	.+498    	; 0xcfc <__fp_pscA>
 b0a:	30 f0       	brcs	.+12     	; 0xb18 <__divsf3+0x18>
 b0c:	21 f4       	brne	.+8      	; 0xb16 <__divsf3+0x16>
 b0e:	5f 3f       	cpi	r21, 0xFF	; 255
 b10:	19 f0       	breq	.+6      	; 0xb18 <__divsf3+0x18>
 b12:	eb c0       	rjmp	.+470    	; 0xcea <__fp_inf>
 b14:	51 11       	cpse	r21, r1
 b16:	34 c1       	rjmp	.+616    	; 0xd80 <__fp_szero>
 b18:	ee c0       	rjmp	.+476    	; 0xcf6 <__fp_nan>

00000b1a <__divsf3x>:
 b1a:	0f d1       	rcall	.+542    	; 0xd3a <__fp_split3>
 b1c:	98 f3       	brcs	.-26     	; 0xb04 <__divsf3+0x4>

00000b1e <__divsf3_pse>:
 b1e:	99 23       	and	r25, r25
 b20:	c9 f3       	breq	.-14     	; 0xb14 <__divsf3+0x14>
 b22:	55 23       	and	r21, r21
 b24:	b1 f3       	breq	.-20     	; 0xb12 <__divsf3+0x12>
 b26:	95 1b       	sub	r25, r21
 b28:	55 0b       	sbc	r21, r21
 b2a:	bb 27       	eor	r27, r27
 b2c:	aa 27       	eor	r26, r26
 b2e:	62 17       	cp	r22, r18
 b30:	73 07       	cpc	r23, r19
 b32:	84 07       	cpc	r24, r20
 b34:	38 f0       	brcs	.+14     	; 0xb44 <__divsf3_pse+0x26>
 b36:	9f 5f       	subi	r25, 0xFF	; 255
 b38:	5f 4f       	sbci	r21, 0xFF	; 255
 b3a:	22 0f       	add	r18, r18
 b3c:	33 1f       	adc	r19, r19
 b3e:	44 1f       	adc	r20, r20
 b40:	aa 1f       	adc	r26, r26
 b42:	a9 f3       	breq	.-22     	; 0xb2e <__divsf3_pse+0x10>
 b44:	33 d0       	rcall	.+102    	; 0xbac <__divsf3_pse+0x8e>
 b46:	0e 2e       	mov	r0, r30
 b48:	3a f0       	brmi	.+14     	; 0xb58 <__divsf3_pse+0x3a>
 b4a:	e0 e8       	ldi	r30, 0x80	; 128
 b4c:	30 d0       	rcall	.+96     	; 0xbae <__divsf3_pse+0x90>
 b4e:	91 50       	subi	r25, 0x01	; 1
 b50:	50 40       	sbci	r21, 0x00	; 0
 b52:	e6 95       	lsr	r30
 b54:	00 1c       	adc	r0, r0
 b56:	ca f7       	brpl	.-14     	; 0xb4a <__divsf3_pse+0x2c>
 b58:	29 d0       	rcall	.+82     	; 0xbac <__divsf3_pse+0x8e>
 b5a:	fe 2f       	mov	r31, r30
 b5c:	27 d0       	rcall	.+78     	; 0xbac <__divsf3_pse+0x8e>
 b5e:	66 0f       	add	r22, r22
 b60:	77 1f       	adc	r23, r23
 b62:	88 1f       	adc	r24, r24
 b64:	bb 1f       	adc	r27, r27
 b66:	26 17       	cp	r18, r22
 b68:	37 07       	cpc	r19, r23
 b6a:	48 07       	cpc	r20, r24
 b6c:	ab 07       	cpc	r26, r27
 b6e:	b0 e8       	ldi	r27, 0x80	; 128
 b70:	09 f0       	breq	.+2      	; 0xb74 <__divsf3_pse+0x56>
 b72:	bb 0b       	sbc	r27, r27
 b74:	80 2d       	mov	r24, r0
 b76:	bf 01       	movw	r22, r30
 b78:	ff 27       	eor	r31, r31
 b7a:	93 58       	subi	r25, 0x83	; 131
 b7c:	5f 4f       	sbci	r21, 0xFF	; 255
 b7e:	2a f0       	brmi	.+10     	; 0xb8a <__divsf3_pse+0x6c>
 b80:	9e 3f       	cpi	r25, 0xFE	; 254
 b82:	51 05       	cpc	r21, r1
 b84:	68 f0       	brcs	.+26     	; 0xba0 <__divsf3_pse+0x82>
 b86:	b1 c0       	rjmp	.+354    	; 0xcea <__fp_inf>
 b88:	fb c0       	rjmp	.+502    	; 0xd80 <__fp_szero>
 b8a:	5f 3f       	cpi	r21, 0xFF	; 255
 b8c:	ec f3       	brlt	.-6      	; 0xb88 <__divsf3_pse+0x6a>
 b8e:	98 3e       	cpi	r25, 0xE8	; 232
 b90:	dc f3       	brlt	.-10     	; 0xb88 <__divsf3_pse+0x6a>
 b92:	86 95       	lsr	r24
 b94:	77 95       	ror	r23
 b96:	67 95       	ror	r22
 b98:	b7 95       	ror	r27
 b9a:	f7 95       	ror	r31
 b9c:	9f 5f       	subi	r25, 0xFF	; 255
 b9e:	c9 f7       	brne	.-14     	; 0xb92 <__divsf3_pse+0x74>
 ba0:	88 0f       	add	r24, r24
 ba2:	91 1d       	adc	r25, r1
 ba4:	96 95       	lsr	r25
 ba6:	87 95       	ror	r24
 ba8:	97 f9       	bld	r25, 7
 baa:	08 95       	ret
 bac:	e1 e0       	ldi	r30, 0x01	; 1
 bae:	66 0f       	add	r22, r22
 bb0:	77 1f       	adc	r23, r23
 bb2:	88 1f       	adc	r24, r24
 bb4:	bb 1f       	adc	r27, r27
 bb6:	62 17       	cp	r22, r18
 bb8:	73 07       	cpc	r23, r19
 bba:	84 07       	cpc	r24, r20
 bbc:	ba 07       	cpc	r27, r26
 bbe:	20 f0       	brcs	.+8      	; 0xbc8 <__divsf3_pse+0xaa>
 bc0:	62 1b       	sub	r22, r18
 bc2:	73 0b       	sbc	r23, r19
 bc4:	84 0b       	sbc	r24, r20
 bc6:	ba 0b       	sbc	r27, r26
 bc8:	ee 1f       	adc	r30, r30
 bca:	88 f7       	brcc	.-30     	; 0xbae <__divsf3_pse+0x90>
 bcc:	e0 95       	com	r30
 bce:	08 95       	ret

00000bd0 <__fixunssfsi>:
 bd0:	bc d0       	rcall	.+376    	; 0xd4a <__fp_splitA>
 bd2:	88 f0       	brcs	.+34     	; 0xbf6 <__fixunssfsi+0x26>
 bd4:	9f 57       	subi	r25, 0x7F	; 127
 bd6:	90 f0       	brcs	.+36     	; 0xbfc <__fixunssfsi+0x2c>
 bd8:	b9 2f       	mov	r27, r25
 bda:	99 27       	eor	r25, r25
 bdc:	b7 51       	subi	r27, 0x17	; 23
 bde:	a0 f0       	brcs	.+40     	; 0xc08 <__fixunssfsi+0x38>
 be0:	d1 f0       	breq	.+52     	; 0xc16 <__fixunssfsi+0x46>
 be2:	66 0f       	add	r22, r22
 be4:	77 1f       	adc	r23, r23
 be6:	88 1f       	adc	r24, r24
 be8:	99 1f       	adc	r25, r25
 bea:	1a f0       	brmi	.+6      	; 0xbf2 <__fixunssfsi+0x22>
 bec:	ba 95       	dec	r27
 bee:	c9 f7       	brne	.-14     	; 0xbe2 <__fixunssfsi+0x12>
 bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__fixunssfsi+0x46>
 bf2:	b1 30       	cpi	r27, 0x01	; 1
 bf4:	81 f0       	breq	.+32     	; 0xc16 <__fixunssfsi+0x46>
 bf6:	c3 d0       	rcall	.+390    	; 0xd7e <__fp_zero>
 bf8:	b1 e0       	ldi	r27, 0x01	; 1
 bfa:	08 95       	ret
 bfc:	c0 c0       	rjmp	.+384    	; 0xd7e <__fp_zero>
 bfe:	67 2f       	mov	r22, r23
 c00:	78 2f       	mov	r23, r24
 c02:	88 27       	eor	r24, r24
 c04:	b8 5f       	subi	r27, 0xF8	; 248
 c06:	39 f0       	breq	.+14     	; 0xc16 <__fixunssfsi+0x46>
 c08:	b9 3f       	cpi	r27, 0xF9	; 249
 c0a:	cc f3       	brlt	.-14     	; 0xbfe <__fixunssfsi+0x2e>
 c0c:	86 95       	lsr	r24
 c0e:	77 95       	ror	r23
 c10:	67 95       	ror	r22
 c12:	b3 95       	inc	r27
 c14:	d9 f7       	brne	.-10     	; 0xc0c <__fixunssfsi+0x3c>
 c16:	3e f4       	brtc	.+14     	; 0xc26 <__fixunssfsi+0x56>
 c18:	90 95       	com	r25
 c1a:	80 95       	com	r24
 c1c:	70 95       	com	r23
 c1e:	61 95       	neg	r22
 c20:	7f 4f       	sbci	r23, 0xFF	; 255
 c22:	8f 4f       	sbci	r24, 0xFF	; 255
 c24:	9f 4f       	sbci	r25, 0xFF	; 255
 c26:	08 95       	ret

00000c28 <__floatunsisf>:
 c28:	e8 94       	clt
 c2a:	09 c0       	rjmp	.+18     	; 0xc3e <__floatsisf+0x12>

00000c2c <__floatsisf>:
 c2c:	97 fb       	bst	r25, 7
 c2e:	3e f4       	brtc	.+14     	; 0xc3e <__floatsisf+0x12>
 c30:	90 95       	com	r25
 c32:	80 95       	com	r24
 c34:	70 95       	com	r23
 c36:	61 95       	neg	r22
 c38:	7f 4f       	sbci	r23, 0xFF	; 255
 c3a:	8f 4f       	sbci	r24, 0xFF	; 255
 c3c:	9f 4f       	sbci	r25, 0xFF	; 255
 c3e:	99 23       	and	r25, r25
 c40:	a9 f0       	breq	.+42     	; 0xc6c <__floatsisf+0x40>
 c42:	f9 2f       	mov	r31, r25
 c44:	96 e9       	ldi	r25, 0x96	; 150
 c46:	bb 27       	eor	r27, r27
 c48:	93 95       	inc	r25
 c4a:	f6 95       	lsr	r31
 c4c:	87 95       	ror	r24
 c4e:	77 95       	ror	r23
 c50:	67 95       	ror	r22
 c52:	b7 95       	ror	r27
 c54:	f1 11       	cpse	r31, r1
 c56:	f8 cf       	rjmp	.-16     	; 0xc48 <__floatsisf+0x1c>
 c58:	fa f4       	brpl	.+62     	; 0xc98 <__floatsisf+0x6c>
 c5a:	bb 0f       	add	r27, r27
 c5c:	11 f4       	brne	.+4      	; 0xc62 <__floatsisf+0x36>
 c5e:	60 ff       	sbrs	r22, 0
 c60:	1b c0       	rjmp	.+54     	; 0xc98 <__floatsisf+0x6c>
 c62:	6f 5f       	subi	r22, 0xFF	; 255
 c64:	7f 4f       	sbci	r23, 0xFF	; 255
 c66:	8f 4f       	sbci	r24, 0xFF	; 255
 c68:	9f 4f       	sbci	r25, 0xFF	; 255
 c6a:	16 c0       	rjmp	.+44     	; 0xc98 <__floatsisf+0x6c>
 c6c:	88 23       	and	r24, r24
 c6e:	11 f0       	breq	.+4      	; 0xc74 <__floatsisf+0x48>
 c70:	96 e9       	ldi	r25, 0x96	; 150
 c72:	11 c0       	rjmp	.+34     	; 0xc96 <__floatsisf+0x6a>
 c74:	77 23       	and	r23, r23
 c76:	21 f0       	breq	.+8      	; 0xc80 <__floatsisf+0x54>
 c78:	9e e8       	ldi	r25, 0x8E	; 142
 c7a:	87 2f       	mov	r24, r23
 c7c:	76 2f       	mov	r23, r22
 c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__floatsisf+0x5e>
 c80:	66 23       	and	r22, r22
 c82:	71 f0       	breq	.+28     	; 0xca0 <__floatsisf+0x74>
 c84:	96 e8       	ldi	r25, 0x86	; 134
 c86:	86 2f       	mov	r24, r22
 c88:	70 e0       	ldi	r23, 0x00	; 0
 c8a:	60 e0       	ldi	r22, 0x00	; 0
 c8c:	2a f0       	brmi	.+10     	; 0xc98 <__floatsisf+0x6c>
 c8e:	9a 95       	dec	r25
 c90:	66 0f       	add	r22, r22
 c92:	77 1f       	adc	r23, r23
 c94:	88 1f       	adc	r24, r24
 c96:	da f7       	brpl	.-10     	; 0xc8e <__floatsisf+0x62>
 c98:	88 0f       	add	r24, r24
 c9a:	96 95       	lsr	r25
 c9c:	87 95       	ror	r24
 c9e:	97 f9       	bld	r25, 7
 ca0:	08 95       	ret

00000ca2 <__fp_cmp>:
 ca2:	99 0f       	add	r25, r25
 ca4:	00 08       	sbc	r0, r0
 ca6:	55 0f       	add	r21, r21
 ca8:	aa 0b       	sbc	r26, r26
 caa:	e0 e8       	ldi	r30, 0x80	; 128
 cac:	fe ef       	ldi	r31, 0xFE	; 254
 cae:	16 16       	cp	r1, r22
 cb0:	17 06       	cpc	r1, r23
 cb2:	e8 07       	cpc	r30, r24
 cb4:	f9 07       	cpc	r31, r25
 cb6:	c0 f0       	brcs	.+48     	; 0xce8 <__fp_cmp+0x46>
 cb8:	12 16       	cp	r1, r18
 cba:	13 06       	cpc	r1, r19
 cbc:	e4 07       	cpc	r30, r20
 cbe:	f5 07       	cpc	r31, r21
 cc0:	98 f0       	brcs	.+38     	; 0xce8 <__fp_cmp+0x46>
 cc2:	62 1b       	sub	r22, r18
 cc4:	73 0b       	sbc	r23, r19
 cc6:	84 0b       	sbc	r24, r20
 cc8:	95 0b       	sbc	r25, r21
 cca:	39 f4       	brne	.+14     	; 0xcda <__fp_cmp+0x38>
 ccc:	0a 26       	eor	r0, r26
 cce:	61 f0       	breq	.+24     	; 0xce8 <__fp_cmp+0x46>
 cd0:	23 2b       	or	r18, r19
 cd2:	24 2b       	or	r18, r20
 cd4:	25 2b       	or	r18, r21
 cd6:	21 f4       	brne	.+8      	; 0xce0 <__fp_cmp+0x3e>
 cd8:	08 95       	ret
 cda:	0a 26       	eor	r0, r26
 cdc:	09 f4       	brne	.+2      	; 0xce0 <__fp_cmp+0x3e>
 cde:	a1 40       	sbci	r26, 0x01	; 1
 ce0:	a6 95       	lsr	r26
 ce2:	8f ef       	ldi	r24, 0xFF	; 255
 ce4:	81 1d       	adc	r24, r1
 ce6:	81 1d       	adc	r24, r1
 ce8:	08 95       	ret

00000cea <__fp_inf>:
 cea:	97 f9       	bld	r25, 7
 cec:	9f 67       	ori	r25, 0x7F	; 127
 cee:	80 e8       	ldi	r24, 0x80	; 128
 cf0:	70 e0       	ldi	r23, 0x00	; 0
 cf2:	60 e0       	ldi	r22, 0x00	; 0
 cf4:	08 95       	ret

00000cf6 <__fp_nan>:
 cf6:	9f ef       	ldi	r25, 0xFF	; 255
 cf8:	80 ec       	ldi	r24, 0xC0	; 192
 cfa:	08 95       	ret

00000cfc <__fp_pscA>:
 cfc:	00 24       	eor	r0, r0
 cfe:	0a 94       	dec	r0
 d00:	16 16       	cp	r1, r22
 d02:	17 06       	cpc	r1, r23
 d04:	18 06       	cpc	r1, r24
 d06:	09 06       	cpc	r0, r25
 d08:	08 95       	ret

00000d0a <__fp_pscB>:
 d0a:	00 24       	eor	r0, r0
 d0c:	0a 94       	dec	r0
 d0e:	12 16       	cp	r1, r18
 d10:	13 06       	cpc	r1, r19
 d12:	14 06       	cpc	r1, r20
 d14:	05 06       	cpc	r0, r21
 d16:	08 95       	ret

00000d18 <__fp_round>:
 d18:	09 2e       	mov	r0, r25
 d1a:	03 94       	inc	r0
 d1c:	00 0c       	add	r0, r0
 d1e:	11 f4       	brne	.+4      	; 0xd24 <__fp_round+0xc>
 d20:	88 23       	and	r24, r24
 d22:	52 f0       	brmi	.+20     	; 0xd38 <__fp_round+0x20>
 d24:	bb 0f       	add	r27, r27
 d26:	40 f4       	brcc	.+16     	; 0xd38 <__fp_round+0x20>
 d28:	bf 2b       	or	r27, r31
 d2a:	11 f4       	brne	.+4      	; 0xd30 <__fp_round+0x18>
 d2c:	60 ff       	sbrs	r22, 0
 d2e:	04 c0       	rjmp	.+8      	; 0xd38 <__fp_round+0x20>
 d30:	6f 5f       	subi	r22, 0xFF	; 255
 d32:	7f 4f       	sbci	r23, 0xFF	; 255
 d34:	8f 4f       	sbci	r24, 0xFF	; 255
 d36:	9f 4f       	sbci	r25, 0xFF	; 255
 d38:	08 95       	ret

00000d3a <__fp_split3>:
 d3a:	57 fd       	sbrc	r21, 7
 d3c:	90 58       	subi	r25, 0x80	; 128
 d3e:	44 0f       	add	r20, r20
 d40:	55 1f       	adc	r21, r21
 d42:	59 f0       	breq	.+22     	; 0xd5a <__fp_splitA+0x10>
 d44:	5f 3f       	cpi	r21, 0xFF	; 255
 d46:	71 f0       	breq	.+28     	; 0xd64 <__fp_splitA+0x1a>
 d48:	47 95       	ror	r20

00000d4a <__fp_splitA>:
 d4a:	88 0f       	add	r24, r24
 d4c:	97 fb       	bst	r25, 7
 d4e:	99 1f       	adc	r25, r25
 d50:	61 f0       	breq	.+24     	; 0xd6a <__fp_splitA+0x20>
 d52:	9f 3f       	cpi	r25, 0xFF	; 255
 d54:	79 f0       	breq	.+30     	; 0xd74 <__fp_splitA+0x2a>
 d56:	87 95       	ror	r24
 d58:	08 95       	ret
 d5a:	12 16       	cp	r1, r18
 d5c:	13 06       	cpc	r1, r19
 d5e:	14 06       	cpc	r1, r20
 d60:	55 1f       	adc	r21, r21
 d62:	f2 cf       	rjmp	.-28     	; 0xd48 <__fp_split3+0xe>
 d64:	46 95       	lsr	r20
 d66:	f1 df       	rcall	.-30     	; 0xd4a <__fp_splitA>
 d68:	08 c0       	rjmp	.+16     	; 0xd7a <__fp_splitA+0x30>
 d6a:	16 16       	cp	r1, r22
 d6c:	17 06       	cpc	r1, r23
 d6e:	18 06       	cpc	r1, r24
 d70:	99 1f       	adc	r25, r25
 d72:	f1 cf       	rjmp	.-30     	; 0xd56 <__fp_splitA+0xc>
 d74:	86 95       	lsr	r24
 d76:	71 05       	cpc	r23, r1
 d78:	61 05       	cpc	r22, r1
 d7a:	08 94       	sec
 d7c:	08 95       	ret

00000d7e <__fp_zero>:
 d7e:	e8 94       	clt

00000d80 <__fp_szero>:
 d80:	bb 27       	eor	r27, r27
 d82:	66 27       	eor	r22, r22
 d84:	77 27       	eor	r23, r23
 d86:	cb 01       	movw	r24, r22
 d88:	97 f9       	bld	r25, 7
 d8a:	08 95       	ret

00000d8c <__gesf2>:
 d8c:	8a df       	rcall	.-236    	; 0xca2 <__fp_cmp>
 d8e:	08 f4       	brcc	.+2      	; 0xd92 <__gesf2+0x6>
 d90:	8f ef       	ldi	r24, 0xFF	; 255
 d92:	08 95       	ret

00000d94 <__mulsf3>:
 d94:	0b d0       	rcall	.+22     	; 0xdac <__mulsf3x>
 d96:	c0 cf       	rjmp	.-128    	; 0xd18 <__fp_round>
 d98:	b1 df       	rcall	.-158    	; 0xcfc <__fp_pscA>
 d9a:	28 f0       	brcs	.+10     	; 0xda6 <__mulsf3+0x12>
 d9c:	b6 df       	rcall	.-148    	; 0xd0a <__fp_pscB>
 d9e:	18 f0       	brcs	.+6      	; 0xda6 <__mulsf3+0x12>
 da0:	95 23       	and	r25, r21
 da2:	09 f0       	breq	.+2      	; 0xda6 <__mulsf3+0x12>
 da4:	a2 cf       	rjmp	.-188    	; 0xcea <__fp_inf>
 da6:	a7 cf       	rjmp	.-178    	; 0xcf6 <__fp_nan>
 da8:	11 24       	eor	r1, r1
 daa:	ea cf       	rjmp	.-44     	; 0xd80 <__fp_szero>

00000dac <__mulsf3x>:
 dac:	c6 df       	rcall	.-116    	; 0xd3a <__fp_split3>
 dae:	a0 f3       	brcs	.-24     	; 0xd98 <__mulsf3+0x4>

00000db0 <__mulsf3_pse>:
 db0:	95 9f       	mul	r25, r21
 db2:	d1 f3       	breq	.-12     	; 0xda8 <__mulsf3+0x14>
 db4:	95 0f       	add	r25, r21
 db6:	50 e0       	ldi	r21, 0x00	; 0
 db8:	55 1f       	adc	r21, r21
 dba:	62 9f       	mul	r22, r18
 dbc:	f0 01       	movw	r30, r0
 dbe:	72 9f       	mul	r23, r18
 dc0:	bb 27       	eor	r27, r27
 dc2:	f0 0d       	add	r31, r0
 dc4:	b1 1d       	adc	r27, r1
 dc6:	63 9f       	mul	r22, r19
 dc8:	aa 27       	eor	r26, r26
 dca:	f0 0d       	add	r31, r0
 dcc:	b1 1d       	adc	r27, r1
 dce:	aa 1f       	adc	r26, r26
 dd0:	64 9f       	mul	r22, r20
 dd2:	66 27       	eor	r22, r22
 dd4:	b0 0d       	add	r27, r0
 dd6:	a1 1d       	adc	r26, r1
 dd8:	66 1f       	adc	r22, r22
 dda:	82 9f       	mul	r24, r18
 ddc:	22 27       	eor	r18, r18
 dde:	b0 0d       	add	r27, r0
 de0:	a1 1d       	adc	r26, r1
 de2:	62 1f       	adc	r22, r18
 de4:	73 9f       	mul	r23, r19
 de6:	b0 0d       	add	r27, r0
 de8:	a1 1d       	adc	r26, r1
 dea:	62 1f       	adc	r22, r18
 dec:	83 9f       	mul	r24, r19
 dee:	a0 0d       	add	r26, r0
 df0:	61 1d       	adc	r22, r1
 df2:	22 1f       	adc	r18, r18
 df4:	74 9f       	mul	r23, r20
 df6:	33 27       	eor	r19, r19
 df8:	a0 0d       	add	r26, r0
 dfa:	61 1d       	adc	r22, r1
 dfc:	23 1f       	adc	r18, r19
 dfe:	84 9f       	mul	r24, r20
 e00:	60 0d       	add	r22, r0
 e02:	21 1d       	adc	r18, r1
 e04:	82 2f       	mov	r24, r18
 e06:	76 2f       	mov	r23, r22
 e08:	6a 2f       	mov	r22, r26
 e0a:	11 24       	eor	r1, r1
 e0c:	9f 57       	subi	r25, 0x7F	; 127
 e0e:	50 40       	sbci	r21, 0x00	; 0
 e10:	8a f0       	brmi	.+34     	; 0xe34 <__mulsf3_pse+0x84>
 e12:	e1 f0       	breq	.+56     	; 0xe4c <__mulsf3_pse+0x9c>
 e14:	88 23       	and	r24, r24
 e16:	4a f0       	brmi	.+18     	; 0xe2a <__mulsf3_pse+0x7a>
 e18:	ee 0f       	add	r30, r30
 e1a:	ff 1f       	adc	r31, r31
 e1c:	bb 1f       	adc	r27, r27
 e1e:	66 1f       	adc	r22, r22
 e20:	77 1f       	adc	r23, r23
 e22:	88 1f       	adc	r24, r24
 e24:	91 50       	subi	r25, 0x01	; 1
 e26:	50 40       	sbci	r21, 0x00	; 0
 e28:	a9 f7       	brne	.-22     	; 0xe14 <__mulsf3_pse+0x64>
 e2a:	9e 3f       	cpi	r25, 0xFE	; 254
 e2c:	51 05       	cpc	r21, r1
 e2e:	70 f0       	brcs	.+28     	; 0xe4c <__mulsf3_pse+0x9c>
 e30:	5c cf       	rjmp	.-328    	; 0xcea <__fp_inf>
 e32:	a6 cf       	rjmp	.-180    	; 0xd80 <__fp_szero>
 e34:	5f 3f       	cpi	r21, 0xFF	; 255
 e36:	ec f3       	brlt	.-6      	; 0xe32 <__mulsf3_pse+0x82>
 e38:	98 3e       	cpi	r25, 0xE8	; 232
 e3a:	dc f3       	brlt	.-10     	; 0xe32 <__mulsf3_pse+0x82>
 e3c:	86 95       	lsr	r24
 e3e:	77 95       	ror	r23
 e40:	67 95       	ror	r22
 e42:	b7 95       	ror	r27
 e44:	f7 95       	ror	r31
 e46:	e7 95       	ror	r30
 e48:	9f 5f       	subi	r25, 0xFF	; 255
 e4a:	c1 f7       	brne	.-16     	; 0xe3c <__mulsf3_pse+0x8c>
 e4c:	fe 2b       	or	r31, r30
 e4e:	88 0f       	add	r24, r24
 e50:	91 1d       	adc	r25, r1
 e52:	96 95       	lsr	r25
 e54:	87 95       	ror	r24
 e56:	97 f9       	bld	r25, 7
 e58:	08 95       	ret

00000e5a <__umulhisi3>:
 e5a:	a2 9f       	mul	r26, r18
 e5c:	b0 01       	movw	r22, r0
 e5e:	b3 9f       	mul	r27, r19
 e60:	c0 01       	movw	r24, r0
 e62:	a3 9f       	mul	r26, r19
 e64:	70 0d       	add	r23, r0
 e66:	81 1d       	adc	r24, r1
 e68:	11 24       	eor	r1, r1
 e6a:	91 1d       	adc	r25, r1
 e6c:	b2 9f       	mul	r27, r18
 e6e:	70 0d       	add	r23, r0
 e70:	81 1d       	adc	r24, r1
 e72:	11 24       	eor	r1, r1
 e74:	91 1d       	adc	r25, r1
 e76:	08 95       	ret

00000e78 <_exit>:
 e78:	f8 94       	cli

00000e7a <__stop_program>:
 e7a:	ff cf       	rjmp	.-2      	; 0xe7a <__stop_program>
