
PS1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001e8  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000098  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003e2  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000027a  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002e3  00000000  00000000  0000098a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000114  00000000  00000000  00000c70  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001f5  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000117  00000000  00000000  00000f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000068  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "Header/segDisplay.h"

volatile uint8_t blink = 0x00u;
int main(void)
{	
	initDisplay();
  a6:	0e 94 a0 00 	call	0x140	; 0x140 <initDisplay>
	initButtonISR();
  aa:	0e 94 c4 00 	call	0x188	; 0x188 <initButtonISR>
	initLeds();
  ae:	0e 94 a7 00 	call	0x14e	; 0x14e <initLeds>
	initTimer();
  b2:	0e 94 ae 00 	call	0x15c	; 0x15c <initTimer>
	
	uint8_t i = 0;
  b6:	c0 e0       	ldi	r28, 0x00	; 0
			display(i);
			i++;
		}
		else
		{
			i = 0x00;
  b8:	d0 e0       	ldi	r29, 0x00	; 0
  ba:	01 c0       	rjmp	.+2      	; 0xbe <main+0x18>
  bc:	cd 2f       	mov	r28, r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	89 e6       	ldi	r24, 0x69	; 105
  c2:	98 e1       	ldi	r25, 0x18	; 24
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x1e>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x28>
  ce:	00 00       	nop
	 while(1)
    {
		if(i < 10)
		{
			_delay_ms(500);
			display(i);
  d0:	8c 2f       	mov	r24, r28
  d2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <display>
			i++;
  d6:	cf 5f       	subi	r28, 0xFF	; 255
	
	uint8_t i = 0;
	
	 while(1)
    {
		if(i < 10)
  d8:	ca 30       	cpi	r28, 0x0A	; 10
  da:	80 f7       	brcc	.-32     	; 0xbc <main+0x16>
  dc:	f0 cf       	rjmp	.-32     	; 0xbe <main+0x18>

000000de <__vector_11>:
		}
		
    }
}
ISR (TIMER1_COMPA_vect)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
		PORTD ^= (1 << PORTD5);
  ec:	9b b1       	in	r25, 0x0b	; 11
  ee:	80 e2       	ldi	r24, 0x20	; 32
  f0:	89 27       	eor	r24, r25
  f2:	8b b9       	out	0x0b, r24	; 11
}
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_3>:
ISR(PCINT0_vect) {
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	2f 93       	push	r18
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
	if (PINC & _BV(PC1)) 
 112:	31 9b       	sbis	0x06, 1	; 6
 114:	04 c0       	rjmp	.+8      	; 0x11e <__vector_3+0x1c>
	{
		PORTD ^= (1 << 3);
 116:	9b b1       	in	r25, 0x0b	; 11
 118:	88 e0       	ldi	r24, 0x08	; 8
 11a:	89 27       	eor	r24, r25
 11c:	8b b9       	out	0x0b, r24	; 11
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	83 ef       	ldi	r24, 0xF3	; 243
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <__vector_3+0x22>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <__vector_3+0x2c>
 12e:	00 00       	nop
	}
	_delay_ms(40); 
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	2f 91       	pop	r18
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <initDisplay>:
#include "D:\AtmelRepos\PS1\PS1\Header\init.h"

void initDisplay()
{
	/* Initialize the Data Direction Registers as outputs for the 7 segments display*/
	DDRB |= (1 << DDB0) | (1 << DDB1) | (1 << DDB2) | (1 << DDB3) | (1 << DDB4) | (1 << DDB5);
 140:	84 b1       	in	r24, 0x04	; 4
 142:	8f 63       	ori	r24, 0x3F	; 63
 144:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << DDD6) | (1 << DDD7);
 146:	8a b1       	in	r24, 0x0a	; 10
 148:	80 6c       	ori	r24, 0xC0	; 192
 14a:	8a b9       	out	0x0a, r24	; 10
 14c:	08 95       	ret

0000014e <initLeds>:
	
}
void initLeds()
{
	  DDRD |= (1 << DDD5) | (1 << DDD3) | (1 << DDD2);
 14e:	8a b1       	in	r24, 0x0a	; 10
 150:	8c 62       	ori	r24, 0x2C	; 44
 152:	8a b9       	out	0x0a, r24	; 10
	  PORTD |= (1 << 2) | (1 << 3) | (1 << 5);
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	8c 62       	ori	r24, 0x2C	; 44
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	08 95       	ret

0000015c <initTimer>:
	DDRC &= ~(1 << DDC1);
	PORTC &= ~(1 << PORTC1);
}
void initTimer()
{
	cli();
 15c:	f8 94       	cli
	TCCR1B |= (1 << WGM12);
 15e:	e1 e8       	ldi	r30, 0x81	; 129
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	88 60       	ori	r24, 0x08	; 8
 166:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS12);
 168:	80 81       	ld	r24, Z
 16a:	84 60       	ori	r24, 0x04	; 4
 16c:	80 83       	st	Z, r24
	OCR1A   = 0xF424u;
 16e:	84 e2       	ldi	r24, 0x24	; 36
 170:	94 ef       	ldi	r25, 0xF4	; 244
 172:	90 93 89 00 	sts	0x0089, r25
 176:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A);
 17a:	ef e6       	ldi	r30, 0x6F	; 111
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	82 60       	ori	r24, 0x02	; 2
 182:	80 83       	st	Z, r24
	sei(); 
 184:	78 94       	sei
 186:	08 95       	ret

00000188 <initButtonISR>:
}
void initButtonISR()
{
	cli();
 188:	f8 94       	cli
	PCICR |= (1 << PCIE1);
 18a:	e8 e6       	ldi	r30, 0x68	; 104
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	82 60       	ori	r24, 0x02	; 2
 192:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT9);
 194:	ec e6       	ldi	r30, 0x6C	; 108
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	82 60       	ori	r24, 0x02	; 2
 19c:	80 83       	st	Z, r24
	sei();
 19e:	78 94       	sei
 1a0:	08 95       	ret

000001a2 <clear>:
	}
	PORTB |= segDisplay[value];
}
void clear()
{
	PORTB &= ~(1 << PORTB0) & ~(1 << PORTB1) & ~(1 << PORTB2) & ~(1 << PORTB3) & ~(1 << PORTB4) & ~(1 << PORTB5);
 1a2:	85 b1       	in	r24, 0x05	; 5
 1a4:	80 7c       	andi	r24, 0xC0	; 192
 1a6:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~(1 << PORTD6) & ~(1 << PORTD7);
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	8f 73       	andi	r24, 0x3F	; 63
 1ac:	8b b9       	out	0x0b, r24	; 11
 1ae:	08 95       	ret

000001b0 <display>:
#include "D:\AtmelRepos\PS1\PS1\Header\segDisplay.h"

const uint8_t segDisplay[10] = {0x3Fu, 0x06u, 0x1Bu, 0x0Fu, 0x26u, 0x2Du, 0x3D, 0x07u, 0x3F, 0x2F};

void display(uint8_t value)
{
 1b0:	cf 93       	push	r28
 1b2:	c8 2f       	mov	r28, r24
	clear();
 1b4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <clear>
	if((value != 0x00) & (value != 0x01) & (value != 0x07))
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	c7 30       	cpi	r28, 0x07	; 7
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <display+0x10>
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	88 23       	and	r24, r24
 1c2:	31 f0       	breq	.+12     	; 0x1d0 <display+0x20>
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	c2 30       	cpi	r28, 0x02	; 2
 1c8:	08 f4       	brcc	.+2      	; 0x1cc <display+0x1c>
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	81 11       	cpse	r24, r1
	{
		PORTD |= (1 << PORTD6);
 1ce:	5e 9a       	sbi	0x0b, 6	; 11
	}
	PORTB |= segDisplay[value];
 1d0:	95 b1       	in	r25, 0x05	; 5
 1d2:	ec 2f       	mov	r30, r28
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	e0 50       	subi	r30, 0x00	; 0
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	80 81       	ld	r24, Z
 1dc:	89 2b       	or	r24, r25
 1de:	85 b9       	out	0x05, r24	; 5
}
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
