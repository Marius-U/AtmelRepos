
VideoCam.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000052c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000052  00800100  00800100  000005a0  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000001b8  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c42  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000605  00000000  00000000  000013ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000080f  00000000  00000000  000019cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000374  00000000  00000000  000021e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000439  00000000  00000000  00002554  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003e6  00000000  00000000  0000298d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000148  00000000  00000000  00002d73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_3>
  10:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e2       	ldi	r30, 0x2C	; 44
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 35       	cpi	r26, 0x52	; 82
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <main>
  9e:	0c 94 94 02 	jmp	0x528	; 0x528 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <fw_dr_shortPress_callback>:
#include "D:\AtmelRepos\VideoCam\VideoCam\Header\callback.h"
#include "D:\AtmelRepos\VideoCam\VideoCam\Header\util.h"

void fw_dr_shortPress_callback(void)
{
	if(PINC & 0x04u)
  a6:	32 99       	sbic	0x06, 2	; 6
	{
		led_Toggle();
  a8:	0e 94 2a 02 	call	0x454	; 0x454 <led_Toggle>
  ac:	08 95       	ret

000000ae <fw_st_shortPress_callback>:
	}
}
void fw_st_shortPress_callback(void)
{
	if(PINB & 0x02u)
  ae:	19 99       	sbic	0x03, 1	; 3
	{
		led_OFF();
  b0:	0e 94 28 02 	call	0x450	; 0x450 <led_OFF>
  b4:	08 95       	ret

000000b6 <rec_shortPress_callback>:
	}
}
void rec_shortPress_callback(void)
{
	if(PINB & 0x01u)
  b6:	18 99       	sbic	0x03, 0	; 3
	{
		led_ON();
  b8:	0e 94 26 02 	call	0x44c	; 0x44c <led_ON>
  bc:	08 95       	ret

000000be <fw_dr_longPress_callback>:
	}
}
void fw_dr_longPress_callback(void)
{
  be:	08 95       	ret

000000c0 <fw_st_longPress_callback>:
	
}
void fw_st_longPress_callback(void)
{
  c0:	08 95       	ret

000000c2 <rec_longPress_callback>:
	
}
void rec_longPress_callback(void)
{
  c2:	08 95       	ret

000000c4 <initLeds>:
#include "D:\AtmelRepos\VideoCam\VideoCam\Header\segDisplay.h"
#include "D:\AtmelRepos\VideoCam\VideoCam\Header\eeprom.h"

void initLeds()
{
	  DDRC |= (1 << DDC5) | (1 << DDC4) |(1 << DDC2) | (1 << DDC1) | (1 << DDC0); // Leduri galbene + led rosu c4 + led capac c5
  c4:	87 b1       	in	r24, 0x07	; 7
  c6:	87 63       	ori	r24, 0x37	; 55
  c8:	87 b9       	out	0x07, r24	; 7
	  DDRB |= (1 << DDB5) | (1 << DDB4) | (1 << DDB3); // Leduri verzi
  ca:	84 b1       	in	r24, 0x04	; 4
  cc:	88 63       	ori	r24, 0x38	; 56
  ce:	84 b9       	out	0x04, r24	; 4
	  PORTC |=(1 << DDC2) | (1 << DDC1) | (1 << DDC0);
  d0:	88 b1       	in	r24, 0x08	; 8
  d2:	87 60       	ori	r24, 0x07	; 7
  d4:	88 b9       	out	0x08, r24	; 8
	  PORTC &= ~(1 << DDC4) & ~(1 << DDC5);
  d6:	88 b1       	in	r24, 0x08	; 8
  d8:	8f 7c       	andi	r24, 0xCF	; 207
  da:	88 b9       	out	0x08, r24	; 8
	  PORTB |= (1 << DDB5) | (1 << DDB4) | (1 << DDB3);
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	88 63       	ori	r24, 0x38	; 56
  e0:	85 b9       	out	0x05, r24	; 5
  e2:	08 95       	ret

000000e4 <initPWM>:
	sei(); 
}

void initPWM()
{
	OCR0B = 0x00;
  e4:	18 bc       	out	0x28, r1	; 40
	// set PWM for 00% duty cycle

	TCCR0A |= (1 << COM0B1);
  e6:	84 b5       	in	r24, 0x24	; 36
  e8:	80 62       	ori	r24, 0x20	; 32
  ea:	84 bd       	out	0x24, r24	; 36
	// set none-inverting mode

	TCCR0A |= (1 << WGM01) | (1 << WGM00);
  ec:	84 b5       	in	r24, 0x24	; 36
  ee:	83 60       	ori	r24, 0x03	; 3
  f0:	84 bd       	out	0x24, r24	; 36
	// set fast PWM Mode

	TCCR0B |= (1 << CS01);
  f2:	85 b5       	in	r24, 0x25	; 37
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	85 bd       	out	0x25, r24	; 37
  f8:	08 95       	ret

000000fa <initMotors>:
	// set prescaler to 8 and starts PWM
}

void initMotors(void)
{
	DDRD |= 0x1Fu;
  fa:	8a b1       	in	r24, 0x0a	; 10
  fc:	8f 61       	ori	r24, 0x1F	; 31
  fe:	8a b9       	out	0x0a, r24	; 10
	PORTD &= 0xF0u;
 100:	8b b1       	in	r24, 0x0b	; 11
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	8b b9       	out	0x0b, r24	; 11
 106:	08 95       	ret

00000108 <initPeriodical>:
}
void initPeriodical()
{
		cli();
 108:	f8 94       	cli
		TCCR1B |= (1 << WGM12);
 10a:	e1 e8       	ldi	r30, 0x81	; 129
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	88 60       	ori	r24, 0x08	; 8
 112:	80 83       	st	Z, r24
		TCCR1B |= (1 << CS12);
 114:	80 81       	ld	r24, Z
 116:	84 60       	ori	r24, 0x04	; 4
 118:	80 83       	st	Z, r24
		OCR1A   = 0x3F;
 11a:	8f e3       	ldi	r24, 0x3F	; 63
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	90 93 89 00 	sts	0x0089, r25
 122:	80 93 88 00 	sts	0x0088, r24
		TIMSK1 |= (1 << OCIE1A);
 126:	ef e6       	ldi	r30, 0x6F	; 111
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	80 83       	st	Z, r24
		sei();
 130:	78 94       	sei
 132:	08 95       	ret

00000134 <initBuzzer>:
	sei();
}

void initBuzzer(void)
{
	DDRB |= (1 << DDB1);
 134:	21 9a       	sbi	0x04, 1	; 4
	PORTB &= ~(1 << PORTB1);
 136:	29 98       	cbi	0x05, 1	; 5
 138:	08 95       	ret

0000013a <initButtons>:
}
void initButtons()
{
		DDRC &= ~(1 << DDC3);
 13a:	3b 98       	cbi	0x07, 3	; 7
		DDRB &= ~(1 << DDB2);
 13c:	22 98       	cbi	0x04, 2	; 4
		DDRB &= ~(1 << DDB0);
 13e:	20 98       	cbi	0x04, 0	; 4
		PORTC &= ~(1 << PORTC3);
 140:	43 98       	cbi	0x08, 3	; 8
		PORTB &= ~(1 << PORTB2);
 142:	2a 98       	cbi	0x05, 2	; 5
		PORTB &= ~(1 << PORTB0);
 144:	28 98       	cbi	0x05, 0	; 5
 146:	08 95       	ret

00000148 <__vector_18>:
volatile uint16_t count = 0x00u;
volatile uint8_t led3;
uint8_t flags[10];

ISR (USART_RX_vect)
{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
}
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_11>:

ISR (TIMER1_COMPA_vect)
{
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	2f 93       	push	r18
 168:	3f 93       	push	r19
 16a:	4f 93       	push	r20
 16c:	5f 93       	push	r21
 16e:	6f 93       	push	r22
 170:	7f 93       	push	r23
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
 176:	af 93       	push	r26
 178:	bf 93       	push	r27
 17a:	ef 93       	push	r30
 17c:	ff 93       	push	r31
	count++;
 17e:	80 91 00 01 	lds	r24, 0x0100
 182:	90 91 01 01 	lds	r25, 0x0101
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	90 93 01 01 	sts	0x0101, r25
 18c:	80 93 00 01 	sts	0x0100, r24
	scheduler();
 190:	0e 94 50 01 	call	0x2a0	; 0x2a0 <scheduler>
}
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	7f 91       	pop	r23
 1a2:	6f 91       	pop	r22
 1a4:	5f 91       	pop	r21
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <__vector_14>:

ISR (TIMER0_COMPA_vect)
{
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
	//count++;
	//scheduler();
}
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <__vector_4>:

ISR(PCINT1_vect) {
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	8f 93       	push	r24
	
	if (PINC & 0x04u) // FW Dreapta
 1d6:	32 9b       	sbis	0x06, 2	; 6
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <__vector_4+0x16>
	{
		flags[BUTTON_FW_DR_SHORT_PRESS_FLAG] = FLAG_SET;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 93 02 01 	sts	0x0102, r24
	}
}
 1e0:	8f 91       	pop	r24
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <__vector_3>:
ISR(PCINT0_vect) {
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	8f 93       	push	r24
	
	if (PINB & 0x01u) // FILMARE
 1f8:	18 9b       	sbis	0x03, 0	; 3
 1fa:	03 c0       	rjmp	.+6      	; 0x202 <__vector_3+0x16>
	{
		flags[BUTTON_REC_SHORT_PRESS_FLAG] = FLAG_SET;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	80 93 04 01 	sts	0x0104, r24
	}
	if(PINB & 0x02u) // FW Stanga
 202:	19 9b       	sbis	0x03, 1	; 3
 204:	03 c0       	rjmp	.+6      	; 0x20c <__vector_3+0x20>
	{
		flags[BUTTON_FW_ST_SHORT_PRESS_FLAG] = FLAG_SET;
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	80 93 03 01 	sts	0x0103, r24
	}
}
 20c:	8f 91       	pop	r24
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <checkVirtualTimers>:

		checkVirtualTimers();
		
}
void checkVirtualTimers()
{
 218:	bf 92       	push	r11
 21a:	cf 92       	push	r12
 21c:	df 92       	push	r13
 21e:	ef 92       	push	r14
 220:	ff 92       	push	r15
 222:	0f 93       	push	r16
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	c1 e1       	ldi	r28, 0x11	; 17
 22c:	d1 e0       	ldi	r29, 0x01	; 1
 22e:	0c e0       	ldi	r16, 0x0C	; 12
 230:	11 e0       	ldi	r17, 0x01	; 1
 232:	0f 2e       	mov	r0, r31
 234:	f7 e5       	ldi	r31, 0x57	; 87
 236:	cf 2e       	mov	r12, r31
 238:	f1 e0       	ldi	r31, 0x01	; 1
 23a:	df 2e       	mov	r13, r31
 23c:	f0 2d       	mov	r31, r0
				timers[index].timerStarted = TIMER_EXPIRED;
			}
			else if(TIMER_EXPIRED == timers[index].period)
			{
				//if timer expired and there is no callback function, set action flag
				flags[timers[index].module] = FLAG_SET;
 23e:	bb 24       	eor	r11, r11
 240:	b3 94       	inc	r11
{
	uint8_t index = 0x00u;
	
	while(10 > index)
	{
		if(timers[index].timerStarted)
 242:	88 81       	ld	r24, Y
 244:	88 23       	and	r24, r24
 246:	e1 f0       	breq	.+56     	; 0x280 <checkVirtualTimers+0x68>
		{
			if (timers[index].period)
 248:	d8 01       	movw	r26, r16
 24a:	8d 91       	ld	r24, X+
 24c:	9c 91       	ld	r25, X
 24e:	11 97       	sbiw	r26, 0x01	; 1
 250:	00 97       	sbiw	r24, 0x00	; 0
 252:	21 f0       	breq	.+8      	; 0x25c <checkVirtualTimers+0x44>
			{
				timers[index].period -= 0x01u;
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	8d 93       	st	X+, r24
 258:	9c 93       	st	X, r25
 25a:	12 c0       	rjmp	.+36     	; 0x280 <checkVirtualTimers+0x68>
			}
			else if((TIMER_EXPIRED == timers[index].period) && (0x00u != timers[index].f))
 25c:	d8 01       	movw	r26, r16
 25e:	13 96       	adiw	r26, 0x03	; 3
 260:	ed 91       	ld	r30, X+
 262:	fc 91       	ld	r31, X
 264:	14 97       	sbiw	r26, 0x04	; 4
 266:	30 97       	sbiw	r30, 0x00	; 0
 268:	19 f0       	breq	.+6      	; 0x270 <checkVirtualTimers+0x58>
			{
				//if timer expired call the callback function
				timers[index].f();
 26a:	09 95       	icall
				timers[index].timerStarted = TIMER_EXPIRED;
 26c:	18 82       	st	Y, r1
 26e:	08 c0       	rjmp	.+16     	; 0x280 <checkVirtualTimers+0x68>
 270:	fe 01       	movw	r30, r28
 272:	33 97       	sbiw	r30, 0x03	; 3
			}
			else if(TIMER_EXPIRED == timers[index].period)
			{
				//if timer expired and there is no callback function, set action flag
				flags[timers[index].module] = FLAG_SET;
 274:	e0 81       	ld	r30, Z
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	ee 5f       	subi	r30, 0xFE	; 254
 27a:	fe 4f       	sbci	r31, 0xFE	; 254
 27c:	b0 82       	st	Z, r11
				timers[index].timerStarted = TIMER_EXPIRED;
 27e:	18 82       	st	Y, r1
 280:	27 96       	adiw	r28, 0x07	; 7
 282:	09 5f       	subi	r16, 0xF9	; 249
 284:	1f 4f       	sbci	r17, 0xFF	; 255
}
void checkVirtualTimers()
{
	uint8_t index = 0x00u;
	
	while(10 > index)
 286:	cc 15       	cp	r28, r12
 288:	dd 05       	cpc	r29, r13
 28a:	d9 f6       	brne	.-74     	; 0x242 <checkVirtualTimers+0x2a>
				timers[index].timerStarted = TIMER_EXPIRED;
			}
		}
		index += 0x01u;
	}
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	ff 90       	pop	r15
 296:	ef 90       	pop	r14
 298:	df 90       	pop	r13
 29a:	cf 90       	pop	r12
 29c:	bf 90       	pop	r11
 29e:	08 95       	ret

000002a0 <scheduler>:
	
volatile uint8_t buttonCount;

void scheduler(void)
{
	if((count % 1000 == 0) && (count >= 1000))
 2a0:	40 91 00 01 	lds	r20, 0x0100
 2a4:	50 91 01 01 	lds	r21, 0x0101
 2a8:	9a 01       	movw	r18, r20
 2aa:	36 95       	lsr	r19
 2ac:	27 95       	ror	r18
 2ae:	36 95       	lsr	r19
 2b0:	27 95       	ror	r18
 2b2:	36 95       	lsr	r19
 2b4:	27 95       	ror	r18
 2b6:	a5 ec       	ldi	r26, 0xC5	; 197
 2b8:	b0 e2       	ldi	r27, 0x20	; 32
 2ba:	0e 94 85 02 	call	0x50a	; 0x50a <__umulhisi3>
 2be:	92 95       	swap	r25
 2c0:	82 95       	swap	r24
 2c2:	8f 70       	andi	r24, 0x0F	; 15
 2c4:	89 27       	eor	r24, r25
 2c6:	9f 70       	andi	r25, 0x0F	; 15
 2c8:	89 27       	eor	r24, r25
 2ca:	68 ee       	ldi	r22, 0xE8	; 232
 2cc:	73 e0       	ldi	r23, 0x03	; 3
 2ce:	86 9f       	mul	r24, r22
 2d0:	90 01       	movw	r18, r0
 2d2:	87 9f       	mul	r24, r23
 2d4:	30 0d       	add	r19, r0
 2d6:	96 9f       	mul	r25, r22
 2d8:	30 0d       	add	r19, r0
 2da:	11 24       	eor	r1, r1
 2dc:	42 17       	cp	r20, r18
 2de:	53 07       	cpc	r21, r19
 2e0:	21 f4       	brne	.+8      	; 0x2ea <scheduler+0x4a>
 2e2:	80 91 00 01 	lds	r24, 0x0100
 2e6:	90 91 01 01 	lds	r25, 0x0101
	{		
	
	}
	if((count % 4 == 0) &&(count >=4))
 2ea:	80 91 00 01 	lds	r24, 0x0100
 2ee:	90 91 01 01 	lds	r25, 0x0101
 2f2:	83 70       	andi	r24, 0x03	; 3
 2f4:	99 27       	eor	r25, r25
 2f6:	89 2b       	or	r24, r25
 2f8:	09 f0       	breq	.+2      	; 0x2fc <scheduler+0x5c>
 2fa:	49 c0       	rjmp	.+146    	; 0x38e <scheduler+0xee>
 2fc:	80 91 00 01 	lds	r24, 0x0100
 300:	90 91 01 01 	lds	r25, 0x0101
 304:	04 97       	sbiw	r24, 0x04	; 4
 306:	08 f4       	brcc	.+2      	; 0x30a <scheduler+0x6a>
 308:	42 c0       	rjmp	.+132    	; 0x38e <scheduler+0xee>
	{	
		if(flags[BUTTON_FW_DR_SHORT_PRESS_FLAG])
 30a:	80 91 02 01 	lds	r24, 0x0102
 30e:	88 23       	and	r24, r24
 310:	91 f0       	breq	.+36     	; 0x336 <scheduler+0x96>
		{
			startNewVirtualTimer(30,BUTTON_MODULE,fw_dr_shortPress_callback,1);
 312:	21 e0       	ldi	r18, 0x01	; 1
 314:	43 e5       	ldi	r20, 0x53	; 83
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	8e e1       	ldi	r24, 0x1E	; 30
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 3b 02 	call	0x476	; 0x476 <startNewVirtualTimer>
			startNewVirtualTimer(3000,BUTTON_MODULE,fw_dr_longPress_callback,1);
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	4f e5       	ldi	r20, 0x5F	; 95
 326:	50 e0       	ldi	r21, 0x00	; 0
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	88 eb       	ldi	r24, 0xB8	; 184
 32c:	9b e0       	ldi	r25, 0x0B	; 11
 32e:	0e 94 3b 02 	call	0x476	; 0x476 <startNewVirtualTimer>
			flags[BUTTON_FW_DR_SHORT_PRESS_FLAG] = FLAG_CLEAR;
 332:	10 92 02 01 	sts	0x0102, r1
		}
		if(flags[BUTTON_FW_ST_LONG_PRESS_FLAG])
 336:	80 91 06 01 	lds	r24, 0x0106
 33a:	88 23       	and	r24, r24
 33c:	91 f0       	breq	.+36     	; 0x362 <scheduler+0xc2>
		{
			startNewVirtualTimer(30,BUTTON_MODULE,fw_st_shortPress_callback,1);
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	47 e5       	ldi	r20, 0x57	; 87
 342:	50 e0       	ldi	r21, 0x00	; 0
 344:	61 e0       	ldi	r22, 0x01	; 1
 346:	8e e1       	ldi	r24, 0x1E	; 30
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 3b 02 	call	0x476	; 0x476 <startNewVirtualTimer>
			startNewVirtualTimer(3000,BUTTON_MODULE,fw_st_longPress_callback,1);
 34e:	21 e0       	ldi	r18, 0x01	; 1
 350:	40 e6       	ldi	r20, 0x60	; 96
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	88 eb       	ldi	r24, 0xB8	; 184
 358:	9b e0       	ldi	r25, 0x0B	; 11
 35a:	0e 94 3b 02 	call	0x476	; 0x476 <startNewVirtualTimer>
			flags[BUTTON_FW_DR_SHORT_PRESS_FLAG] = FLAG_CLEAR;
 35e:	10 92 02 01 	sts	0x0102, r1
		}
		if(flags[BUTTON_REC_SHORT_PRESS_FLAG])
 362:	80 91 04 01 	lds	r24, 0x0104
 366:	88 23       	and	r24, r24
 368:	91 f0       	breq	.+36     	; 0x38e <scheduler+0xee>
		{
			startNewVirtualTimer(30,BUTTON_MODULE,rec_shortPress_callback,1);
 36a:	21 e0       	ldi	r18, 0x01	; 1
 36c:	4b e5       	ldi	r20, 0x5B	; 91
 36e:	50 e0       	ldi	r21, 0x00	; 0
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	8e e1       	ldi	r24, 0x1E	; 30
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 3b 02 	call	0x476	; 0x476 <startNewVirtualTimer>
			startNewVirtualTimer(3000,BUTTON_MODULE,rec_longPress_callback,1);
 37a:	21 e0       	ldi	r18, 0x01	; 1
 37c:	41 e6       	ldi	r20, 0x61	; 97
 37e:	50 e0       	ldi	r21, 0x00	; 0
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	88 eb       	ldi	r24, 0xB8	; 184
 384:	9b e0       	ldi	r25, 0x0B	; 11
 386:	0e 94 3b 02 	call	0x476	; 0x476 <startNewVirtualTimer>
			flags[BUTTON_FW_DR_SHORT_PRESS_FLAG] = FLAG_CLEAR;
 38a:	10 92 02 01 	sts	0x0102, r1
		}
	}
	if((count % 5 == 0) && (count >= 5))
 38e:	40 91 00 01 	lds	r20, 0x0100
 392:	50 91 01 01 	lds	r21, 0x0101
 396:	9a 01       	movw	r18, r20
 398:	ad ec       	ldi	r26, 0xCD	; 205
 39a:	bc ec       	ldi	r27, 0xCC	; 204
 39c:	0e 94 85 02 	call	0x50a	; 0x50a <__umulhisi3>
 3a0:	96 95       	lsr	r25
 3a2:	87 95       	ror	r24
 3a4:	96 95       	lsr	r25
 3a6:	87 95       	ror	r24
 3a8:	9c 01       	movw	r18, r24
 3aa:	22 0f       	add	r18, r18
 3ac:	33 1f       	adc	r19, r19
 3ae:	22 0f       	add	r18, r18
 3b0:	33 1f       	adc	r19, r19
 3b2:	82 0f       	add	r24, r18
 3b4:	93 1f       	adc	r25, r19
 3b6:	48 17       	cp	r20, r24
 3b8:	59 07       	cpc	r21, r25
 3ba:	21 f4       	brne	.+8      	; 0x3c4 <scheduler+0x124>
 3bc:	80 91 00 01 	lds	r24, 0x0100
 3c0:	90 91 01 01 	lds	r25, 0x0101
	{
		
	}
	 if((count % 10 == 0) && (count >= 10))
 3c4:	40 91 00 01 	lds	r20, 0x0100
 3c8:	50 91 01 01 	lds	r21, 0x0101
 3cc:	9a 01       	movw	r18, r20
 3ce:	ad ec       	ldi	r26, 0xCD	; 205
 3d0:	bc ec       	ldi	r27, 0xCC	; 204
 3d2:	0e 94 85 02 	call	0x50a	; 0x50a <__umulhisi3>
 3d6:	96 95       	lsr	r25
 3d8:	87 95       	ror	r24
 3da:	96 95       	lsr	r25
 3dc:	87 95       	ror	r24
 3de:	96 95       	lsr	r25
 3e0:	87 95       	ror	r24
 3e2:	9c 01       	movw	r18, r24
 3e4:	22 0f       	add	r18, r18
 3e6:	33 1f       	adc	r19, r19
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	82 0f       	add	r24, r18
 3f6:	93 1f       	adc	r25, r19
 3f8:	48 17       	cp	r20, r24
 3fa:	59 07       	cpc	r21, r25
 3fc:	21 f4       	brne	.+8      	; 0x406 <scheduler+0x166>
 3fe:	80 91 00 01 	lds	r24, 0x0100
 402:	90 91 01 01 	lds	r25, 0x0101
	{
		
	}
	 if(count % 20 == 0)
 406:	80 91 00 01 	lds	r24, 0x0100
 40a:	90 91 01 01 	lds	r25, 0x0101
			//if(PINB & 0x02u) // FW Stanga
			//{
				//flags[BUTTON_FW_ST_SHORT_PRESS_FLAG] = FLAG_SET;
			//}
	}
	if((count % 100 == 0) && (count > 100))
 40e:	40 91 00 01 	lds	r20, 0x0100
 412:	50 91 01 01 	lds	r21, 0x0101
 416:	9a 01       	movw	r18, r20
 418:	36 95       	lsr	r19
 41a:	27 95       	ror	r18
 41c:	36 95       	lsr	r19
 41e:	27 95       	ror	r18
 420:	ab e7       	ldi	r26, 0x7B	; 123
 422:	b4 e1       	ldi	r27, 0x14	; 20
 424:	0e 94 85 02 	call	0x50a	; 0x50a <__umulhisi3>
 428:	96 95       	lsr	r25
 42a:	87 95       	ror	r24
 42c:	64 e6       	ldi	r22, 0x64	; 100
 42e:	68 9f       	mul	r22, r24
 430:	90 01       	movw	r18, r0
 432:	69 9f       	mul	r22, r25
 434:	30 0d       	add	r19, r0
 436:	11 24       	eor	r1, r1
 438:	42 17       	cp	r20, r18
 43a:	53 07       	cpc	r21, r19
 43c:	21 f4       	brne	.+8      	; 0x446 <scheduler+0x1a6>
 43e:	80 91 00 01 	lds	r24, 0x0100
 442:	90 91 01 01 	lds	r25, 0x0101
	{
		
	}

		checkVirtualTimers();
 446:	0e 94 0c 01 	call	0x218	; 0x218 <checkVirtualTimers>
 44a:	08 95       	ret

0000044c <led_ON>:

volatile uint8_t led3 ;

void led_ON()
{
	PORTC |= (1 << PORTC5);
 44c:	45 9a       	sbi	0x08, 5	; 8
 44e:	08 95       	ret

00000450 <led_OFF>:
}

void led_OFF()
{
	PORTC &= ~(1 << PORTC5);
 450:	45 98       	cbi	0x08, 5	; 8
 452:	08 95       	ret

00000454 <led_Toggle>:
}

void led_Toggle(void)
{
	PORTC ^= (1 << PORTC5);
 454:	98 b1       	in	r25, 0x08	; 8
 456:	80 e2       	ldi	r24, 0x20	; 32
 458:	89 27       	eor	r24, r25
 45a:	88 b9       	out	0x08, r24	; 8
 45c:	08 95       	ret

0000045e <motorsSt>:
}
void motorsSt(uint8_t value)
{
	OCR0B = value;
 45e:	88 bd       	out	0x28, r24	; 40
	PORTD |= (1 << PORTD0) | (1 << PORTD2);
 460:	8b b1       	in	r24, 0x0b	; 11
 462:	85 60       	ori	r24, 0x05	; 5
 464:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PORTD1) & ~(1 << PORTD3);
 466:	8b b1       	in	r24, 0x0b	; 11
 468:	85 7f       	andi	r24, 0xF5	; 245
 46a:	8b b9       	out	0x0b, r24	; 11
 46c:	08 95       	ret

0000046e <motorsStop>:
	PORTD |= (1 << PORTD1) | (1 << PORTD3);
	PORTD &= ~(1 << PORTD0) & ~(1 << PORTD2);
}
void motorsStop(void)
{
	PORTD &= 0xE0u;
 46e:	8b b1       	in	r24, 0x0b	; 11
 470:	80 7e       	andi	r24, 0xE0	; 224
 472:	8b b9       	out	0x0b, r24	; 11
 474:	08 95       	ret

00000476 <startNewVirtualTimer>:
		timers[index].timerStarted = FLAG_CLEAR;
		timers[index].msg   = FLAG_CLEAR;
	}
}
uint8_t startNewVirtualTimer(uint16_t time, uint8_t module, callback fnc, uint8_t msg)
{
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	a1 e1       	ldi	r26, 0x11	; 17
 47c:	b1 e0       	ldi	r27, 0x01	; 1
 47e:	e0 e0       	ldi	r30, 0x00	; 0
 480:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t index = 0;
	uint8_t timerStarted = 0x00u;
	while(index < 11)
	{
		if(TIMER_EMPTY == timers[index].timerStarted)
 482:	ef 01       	movw	r28, r30
 484:	3c 91       	ld	r19, X
 486:	33 23       	and	r19, r19
 488:	19 f0       	breq	.+6      	; 0x490 <startNewVirtualTimer+0x1a>
 48a:	31 96       	adiw	r30, 0x01	; 1
 48c:	17 96       	adiw	r26, 0x07	; 7
 48e:	f9 cf       	rjmp	.-14     	; 0x482 <startNewVirtualTimer+0xc>
		{
			timerStarted = 0x01u;
			timers[index].timerStarted = 0x01u;
 490:	ee 0f       	add	r30, r30
 492:	ff 1f       	adc	r31, r31
 494:	ee 0f       	add	r30, r30
 496:	ff 1f       	adc	r31, r31
 498:	ee 0f       	add	r30, r30
 49a:	ff 1f       	adc	r31, r31
 49c:	ec 1b       	sub	r30, r28
 49e:	fd 0b       	sbc	r31, r29
 4a0:	e4 5f       	subi	r30, 0xF4	; 244
 4a2:	fe 4f       	sbci	r31, 0xFE	; 254
 4a4:	31 e0       	ldi	r19, 0x01	; 1
 4a6:	35 83       	std	Z+5, r19	; 0x05
			timers[index].msg = msg;
 4a8:	26 83       	std	Z+6, r18	; 0x06
			timers[index].period = time;
 4aa:	91 83       	std	Z+1, r25	; 0x01
 4ac:	80 83       	st	Z, r24
			timers[index].module = module;
 4ae:	62 83       	std	Z+2, r22	; 0x02
			timers[index].f = fnc;
 4b0:	54 83       	std	Z+4, r21	; 0x04
 4b2:	43 83       	std	Z+3, r20	; 0x03
	}
	else
	{
		return 0x00u;
	}
}
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <main>:
#include "Header/virtualTimers.h"
#include "D:\AtmelRepos\VideoCam\VideoCam\Header\eeprom.h"

int main(void)
{
	initLeds();
 4bc:	0e 94 62 00 	call	0xc4	; 0xc4 <initLeds>
	initButtons();
 4c0:	0e 94 9d 00 	call	0x13a	; 0x13a <initButtons>
	initBuzzer();
 4c4:	0e 94 9a 00 	call	0x134	; 0x134 <initBuzzer>
	initMotors();
 4c8:	0e 94 7d 00 	call	0xfa	; 0xfa <initMotors>
	initPWM();
 4cc:	0e 94 72 00 	call	0xe4	; 0xe4 <initPWM>
	motorsSt(0x10u);
 4d0:	80 e1       	ldi	r24, 0x10	; 16
 4d2:	0e 94 2f 02 	call	0x45e	; 0x45e <motorsSt>
	initPeriodical();
 4d6:	0e 94 84 00 	call	0x108	; 0x108 <initPeriodical>
	
    while(1)
    {	
		motorsSt(0x00u);
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	0e 94 2f 02 	call	0x45e	; 0x45e <motorsSt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e0:	2f ef       	ldi	r18, 0xFF	; 255
 4e2:	83 ed       	ldi	r24, 0xD3	; 211
 4e4:	90 e3       	ldi	r25, 0x30	; 48
 4e6:	21 50       	subi	r18, 0x01	; 1
 4e8:	80 40       	sbci	r24, 0x00	; 0
 4ea:	90 40       	sbci	r25, 0x00	; 0
 4ec:	e1 f7       	brne	.-8      	; 0x4e6 <main+0x2a>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <main+0x34>
 4f0:	00 00       	nop
		_delay_ms(1000);
		motorsStop();
 4f2:	0e 94 37 02 	call	0x46e	; 0x46e <motorsStop>
 4f6:	2f ef       	ldi	r18, 0xFF	; 255
 4f8:	83 ed       	ldi	r24, 0xD3	; 211
 4fa:	90 e3       	ldi	r25, 0x30	; 48
 4fc:	21 50       	subi	r18, 0x01	; 1
 4fe:	80 40       	sbci	r24, 0x00	; 0
 500:	90 40       	sbci	r25, 0x00	; 0
 502:	e1 f7       	brne	.-8      	; 0x4fc <main+0x40>
 504:	00 c0       	rjmp	.+0      	; 0x506 <main+0x4a>
 506:	00 00       	nop
 508:	e8 cf       	rjmp	.-48     	; 0x4da <main+0x1e>

0000050a <__umulhisi3>:
 50a:	a2 9f       	mul	r26, r18
 50c:	b0 01       	movw	r22, r0
 50e:	b3 9f       	mul	r27, r19
 510:	c0 01       	movw	r24, r0
 512:	a3 9f       	mul	r26, r19
 514:	70 0d       	add	r23, r0
 516:	81 1d       	adc	r24, r1
 518:	11 24       	eor	r1, r1
 51a:	91 1d       	adc	r25, r1
 51c:	b2 9f       	mul	r27, r18
 51e:	70 0d       	add	r23, r0
 520:	81 1d       	adc	r24, r1
 522:	11 24       	eor	r1, r1
 524:	91 1d       	adc	r25, r1
 526:	08 95       	ret

00000528 <_exit>:
 528:	f8 94       	cli

0000052a <__stop_program>:
 52a:	ff cf       	rjmp	.-2      	; 0x52a <__stop_program>
