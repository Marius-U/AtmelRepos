
Piatra.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000002f6  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000f8  00000000  00000000  000003ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000ae3  00000000  00000000  000004b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000492  00000000  00000000  00000f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000537  00000000  00000000  00001427  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001b4  00000000  00000000  00001960  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002b2  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000004e9  00000000  00000000  00001dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b8  00000000  00000000  000022af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_29>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e6 ef       	ldi	r30, 0xF6	; 246
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 32       	cpi	r26, 0x20	; 32
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a0 e2       	ldi	r26, 0x20	; 32
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a0 32       	cpi	r26, 0x20	; 32
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 1b 01 	call	0x236	; 0x236 <main>
  e2:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <__vector_29>:
#include "/AtmelRepos/Piatra/Piatra/Headers/USART.h"
#include <avr/interrupt.h>


ISR (ADC_vect)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
//	adc_value = ADC;
}
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <dim>:
		flash();
    }
}

void dim(uint8_t bec)
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
	uint8_t i = 0;
	
	switch(bec)
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	19 f0       	breq	.+6      	; 0x10c <dim+0xe>
 106:	82 30       	cpi	r24, 0x02	; 2
 108:	d1 f0       	breq	.+52     	; 0x13e <dim+0x40>
 10a:	37 c0       	rjmp	.+110    	; 0x17a <dim+0x7c>
 10c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		case 1:
		{
				for(i = 0; i < 255; i++)
				{
					setOC1A(i);
 10e:	8c 2f       	mov	r24, r28
 110:	0e 94 4a 01 	call	0x294	; 0x294 <setOC1A>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	8f ed       	ldi	r24, 0xDF	; 223
 116:	9e e2       	ldi	r25, 0x2E	; 46
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <dim+0x1a>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <dim+0x20>
 11e:	00 00       	nop
	
	switch(bec)
	{
		case 1:
		{
				for(i = 0; i < 255; i++)
 120:	cf 5f       	subi	r28, 0xFF	; 255
 122:	cf 3f       	cpi	r28, 0xFF	; 255
 124:	a1 f7       	brne	.-24     	; 0x10e <dim+0x10>
					_delay_ms(3);
					
				}
				for(i = 255; i > 0; i--)
				{
					setOC1A(i);
 126:	8c 2f       	mov	r24, r28
 128:	0e 94 4a 01 	call	0x294	; 0x294 <setOC1A>
 12c:	8f ed       	ldi	r24, 0xDF	; 223
 12e:	9e e2       	ldi	r25, 0x2E	; 46
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <dim+0x32>
 134:	00 c0       	rjmp	.+0      	; 0x136 <dim+0x38>
 136:	00 00       	nop
				{
					setOC1A(i);
					_delay_ms(3);
					
				}
				for(i = 255; i > 0; i--)
 138:	c1 50       	subi	r28, 0x01	; 1
 13a:	a9 f7       	brne	.-22     	; 0x126 <dim+0x28>
 13c:	41 c0       	rjmp	.+130    	; 0x1c0 <dim+0xc2>

void dim(uint8_t bec)
{
	uint8_t i = 0;
	
	switch(bec)
 13e:	c0 e0       	ldi	r28, 0x00	; 0
 140:	d0 e0       	ldi	r29, 0x00	; 0
		break;
		case 2: 
		{
				for(i = 0; i < 255; i++)
				{
					setOC1B(i);
 142:	ce 01       	movw	r24, r28
 144:	0e 94 50 01 	call	0x2a0	; 0x2a0 <setOC1B>
 148:	8f ed       	ldi	r24, 0xDF	; 223
 14a:	9e e2       	ldi	r25, 0x2E	; 46
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <dim+0x4e>
 150:	00 c0       	rjmp	.+0      	; 0x152 <dim+0x54>
 152:	00 00       	nop
 154:	21 96       	adiw	r28, 0x01	; 1
				}
		}
		break;
		case 2: 
		{
				for(i = 0; i < 255; i++)
 156:	cf 3f       	cpi	r28, 0xFF	; 255
 158:	d1 05       	cpc	r29, r1
 15a:	99 f7       	brne	.-26     	; 0x142 <dim+0x44>
 15c:	cf ef       	ldi	r28, 0xFF	; 255
 15e:	d0 e0       	ldi	r29, 0x00	; 0
					setOC1B(i);
					_delay_ms(3);
				}
				for(i = 255; i > 0; i--)
				{
					setOC1B(i);
 160:	ce 01       	movw	r24, r28
 162:	0e 94 50 01 	call	0x2a0	; 0x2a0 <setOC1B>
 166:	8f ed       	ldi	r24, 0xDF	; 223
 168:	9e e2       	ldi	r25, 0x2E	; 46
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <dim+0x6c>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <dim+0x72>
 170:	00 00       	nop
 172:	21 97       	sbiw	r28, 0x01	; 1
				for(i = 0; i < 255; i++)
				{
					setOC1B(i);
					_delay_ms(3);
				}
				for(i = 255; i > 0; i--)
 174:	20 97       	sbiw	r28, 0x00	; 0
 176:	a1 f7       	brne	.-24     	; 0x160 <dim+0x62>
 178:	23 c0       	rjmp	.+70     	; 0x1c0 <dim+0xc2>

void dim(uint8_t bec)
{
	uint8_t i = 0;
	
	switch(bec)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
 17c:	d0 e0       	ldi	r29, 0x00	; 0
		break;
		default:
		{
			for(i = 0; i < 255; i++)
			{
				setOC1B(i);
 17e:	ce 01       	movw	r24, r28
 180:	0e 94 50 01 	call	0x2a0	; 0x2a0 <setOC1B>
				setOC1A(i);
 184:	8c 2f       	mov	r24, r28
 186:	0e 94 4a 01 	call	0x294	; 0x294 <setOC1A>
 18a:	8f e3       	ldi	r24, 0x3F	; 63
 18c:	9c e9       	ldi	r25, 0x9C	; 156
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <dim+0x90>
 192:	00 c0       	rjmp	.+0      	; 0x194 <dim+0x96>
 194:	00 00       	nop
 196:	21 96       	adiw	r28, 0x01	; 1
				}
		}
		break;
		default:
		{
			for(i = 0; i < 255; i++)
 198:	cf 3f       	cpi	r28, 0xFF	; 255
 19a:	d1 05       	cpc	r29, r1
 19c:	81 f7       	brne	.-32     	; 0x17e <dim+0x80>
 19e:	cf ef       	ldi	r28, 0xFF	; 255
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
				setOC1A(i);
				_delay_ms(10);
			}
			for(i = 255; i > 0; i--)
			{
				setOC1B(i);
 1a2:	ce 01       	movw	r24, r28
 1a4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <setOC1B>
				setOC1A(i);
 1a8:	8c 2f       	mov	r24, r28
 1aa:	0e 94 4a 01 	call	0x294	; 0x294 <setOC1A>
 1ae:	8f e3       	ldi	r24, 0x3F	; 63
 1b0:	9c e9       	ldi	r25, 0x9C	; 156
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <dim+0xb4>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <dim+0xba>
 1b8:	00 00       	nop
 1ba:	21 97       	sbiw	r28, 0x01	; 1
			{
				setOC1B(i);
				setOC1A(i);
				_delay_ms(10);
			}
			for(i = 255; i > 0; i--)
 1bc:	20 97       	sbiw	r28, 0x00	; 0
 1be:	89 f7       	brne	.-30     	; 0x1a2 <dim+0xa4>
			}
		}
	}

	
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <flash>:
void flash(void)
{
 1c6:	cf 93       	push	r28
 1c8:	ca e0       	ldi	r28, 0x0A	; 10
	uint8_t i = 0;
	for(i = 0;i<10;i++)
	{
		setOC1A(255);
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	0e 94 4a 01 	call	0x294	; 0x294 <setOC1A>
 1d0:	2f ef       	ldi	r18, 0xFF	; 255
 1d2:	87 ee       	ldi	r24, 0xE7	; 231
 1d4:	93 e0       	ldi	r25, 0x03	; 3
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	80 40       	sbci	r24, 0x00	; 0
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <flash+0x10>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <flash+0x1a>
 1e0:	00 00       	nop
		_delay_ms(80);
		setOC1B(255);
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <setOC1B>
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	89 ef       	ldi	r24, 0xF9	; 249
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <flash+0x2a>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <flash+0x34>
 1fa:	00 00       	nop
		_delay_ms(20);
		setOC1A(0);
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 4a 01 	call	0x294	; 0x294 <setOC1A>
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	87 ee       	ldi	r24, 0xE7	; 231
 206:	93 e0       	ldi	r25, 0x03	; 3
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <flash+0x42>
 210:	00 c0       	rjmp	.+0      	; 0x212 <flash+0x4c>
 212:	00 00       	nop
		_delay_ms(80);
		setOC1B(0);
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 50 01 	call	0x2a0	; 0x2a0 <setOC1B>
 21c:	2f ef       	ldi	r18, 0xFF	; 255
 21e:	89 ef       	ldi	r24, 0xF9	; 249
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	21 50       	subi	r18, 0x01	; 1
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	90 40       	sbci	r25, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <flash+0x5c>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <flash+0x66>
 22c:	00 00       	nop
 22e:	c1 50       	subi	r28, 0x01	; 1
	
}
void flash(void)
{
	uint8_t i = 0;
	for(i = 0;i<10;i++)
 230:	61 f6       	brne	.-104    	; 0x1ca <flash+0x4>
		_delay_ms(80);
		setOC1B(0);
		_delay_ms(20);
	}
	
}
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <main>:
void flash(void);


int main(void)
{	
	DDRB |=  (1<<DDB5) ;
 236:	25 9a       	sbi	0x04, 5	; 4
	pwm_init();                            //PWM init
 238:	0e 94 27 01 	call	0x24e	; 0x24e <pwm_init>
	

    while(1)
    {
		dim(1);
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 7f 00 	call	0xfe	; 0xfe <dim>
		dim(2);
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	0e 94 7f 00 	call	0xfe	; 0xfe <dim>
		flash();
 248:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <flash>
 24c:	f7 cf       	rjmp	.-18     	; 0x23c <main+0x6>

0000024e <pwm_init>:
#include "/AtmelRepos/Piatra/Piatra/Headers/USART.h"

void pwm_init()
{
	//Set the direction pins as output for the motor driver.
	DDRB |= (1 << DDB4) | (1 << DDB7);
 24e:	84 b1       	in	r24, 0x04	; 4
 250:	80 69       	ori	r24, 0x90	; 144
 252:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << DDC7);
 254:	3f 9a       	sbi	0x07, 7	; 7
	DDRF |= (1 << DDF7);
 256:	87 9a       	sbi	0x10, 7	; 16
	DDRB |= (1 << DDB5)|(1 << DDB6);//PWM pins
 258:	84 b1       	in	r24, 0x04	; 4
 25a:	80 66       	ori	r24, 0x60	; 96
 25c:	84 b9       	out	0x04, r24	; 4
	
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1);
 25e:	e0 e8       	ldi	r30, 0x80	; 128
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	80 6a       	ori	r24, 0xA0	; 160
 266:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM11);
 268:	80 81       	ld	r24, Z
 26a:	82 60       	ori	r24, 0x02	; 2
 26c:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 <<WGM12);
 26e:	e1 e8       	ldi	r30, 0x81	; 129
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	88 61       	ori	r24, 0x18	; 24
 276:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS10);
 278:	80 81       	ld	r24, Z
 27a:	81 60       	ori	r24, 0x01	; 1
 27c:	80 83       	st	Z, r24
	ICR1=0xFF;
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	90 93 87 00 	sts	0x0087, r25
 286:	80 93 86 00 	sts	0x0086, r24
	uart_print("PWM initialization finished!\r\n");
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <uart_print>
 292:	08 95       	ret

00000294 <setOC1A>:
	//uart_flush();
	
}
void setOC1A(uint8_t value)
{
	OCR1A = value;
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	90 93 89 00 	sts	0x0089, r25
 29a:	80 93 88 00 	sts	0x0088, r24
 29e:	08 95       	ret

000002a0 <setOC1B>:
}
void setOC1B(uint8_t value)
{
	OCR1B = value;
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	90 93 8b 00 	sts	0x008B, r25
 2a6:	80 93 8a 00 	sts	0x008A, r24
 2aa:	08 95       	ret

000002ac <uart_transmit>:

// transmit a char to uart
void uart_transmit( unsigned char data )
{
	// wait for empty transmit buffer
	while ( ! ( UCSR1A & ( 1 << UDRE1 ) ) )
 2ac:	e8 ec       	ldi	r30, 0xC8	; 200
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	90 81       	ld	r25, Z
 2b2:	95 ff       	sbrs	r25, 5
 2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <uart_transmit+0x4>
	;
	
	// put data into buffer, sends data
	UDR1 = data;
 2b6:	80 93 ce 00 	sts	0x00CE, r24
 2ba:	08 95       	ret

000002bc <uart_print>:
}
// write a string to the uart
void uart_print( char data[] )
{
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
	uint8_t count = 0;
	uint8_t length = strlen(data);
 2c4:	fc 01       	movw	r30, r24
 2c6:	01 90       	ld	r0, Z+
 2c8:	00 20       	and	r0, r0
 2ca:	e9 f7       	brne	.-6      	; 0x2c6 <uart_print+0xa>
 2cc:	31 97       	sbiw	r30, 0x01	; 1
 2ce:	1e 2f       	mov	r17, r30
 2d0:	18 1b       	sub	r17, r24
	
	for ( count = 0; count < length; count++ )
 2d2:	51 f0       	breq	.+20     	; 0x2e8 <uart_print+0x2c>
 2d4:	08 2f       	mov	r16, r24
 2d6:	c0 2f       	mov	r28, r16
 2d8:	d9 2f       	mov	r29, r25
	uart_transmit(data[count]);
 2da:	89 91       	ld	r24, Y+
 2dc:	0e 94 56 01 	call	0x2ac	; 0x2ac <uart_transmit>
 2e0:	8c 2f       	mov	r24, r28
 2e2:	80 1b       	sub	r24, r16
void uart_print( char data[] )
{
	uint8_t count = 0;
	uint8_t length = strlen(data);
	
	for ( count = 0; count < length; count++ )
 2e4:	81 17       	cp	r24, r17
 2e6:	c8 f3       	brcs	.-14     	; 0x2da <uart_print+0x1e>
	uart_transmit(data[count]);
}
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	08 95       	ret

000002f2 <_exit>:
 2f2:	f8 94       	cli

000002f4 <__stop_program>:
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <__stop_program>
