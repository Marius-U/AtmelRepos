
HMR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  0000020a  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b8  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000068a  00000000  00000000  00000396  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000404  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000381  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000013c  00000000  00000000  000011a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000264  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000186  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  000016ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ea e0       	ldi	r30, 0x0A	; 10
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 33       	cpi	r26, 0x30	; 48
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a0 e3       	ldi	r26, 0x30	; 48
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a0 33       	cpi	r26, 0x30	; 48
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 75 00 	call	0xea	; 0xea <main>
  e2:	0c 94 03 01 	jmp	0x206	; 0x206 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <main>:
#include "pwm.h"


int main(void)
{
	cli();
  ea:	f8 94       	cli
	uart_init();
  ec:	0e 94 e5 00 	call	0x1ca	; 0x1ca <uart_init>
	pwm_init();
  f0:	0e 94 96 00 	call	0x12c	; 0x12c <pwm_init>
	sei();
  f4:	78 94       	sei
	
	while(1)
	{
		
		uint16_t ADC_read();
		uart_print("Fata!\r\n");
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	0e 94 c3 00 	call	0x186	; 0x186 <uart_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	83 ed       	ldi	r24, 0xD3	; 211
 102:	90 e3       	ldi	r25, 0x30	; 48
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x1a>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x24>
 10e:	00 00       	nop
		_delay_ms(1000);
		uart_print("Spate!\r\n");
 110:	88 e0       	ldi	r24, 0x08	; 8
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	0e 94 c3 00 	call	0x186	; 0x186 <uart_print>
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	83 ed       	ldi	r24, 0xD3	; 211
 11c:	90 e3       	ldi	r25, 0x30	; 48
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x34>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x3e>
 128:	00 00       	nop
 12a:	e5 cf       	rjmp	.-54     	; 0xf6 <main+0xc>

0000012c <pwm_init>:
#include "usart.h"

void pwm_init()
{
	//Set the direction pins as output for the motor driver.
	DDRB |= (1 << DDB4) | (1 << DDB7);
 12c:	84 b1       	in	r24, 0x04	; 4
 12e:	80 69       	ori	r24, 0x90	; 144
 130:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << DDC7);
 132:	3f 9a       	sbi	0x07, 7	; 7
	DDRF |= (1 << DDF7);
 134:	87 9a       	sbi	0x10, 7	; 16
	DDRB |= (1 << DDB5)|(1 << DDB6);//PWM pins
 136:	84 b1       	in	r24, 0x04	; 4
 138:	80 66       	ori	r24, 0x60	; 96
 13a:	84 b9       	out	0x04, r24	; 4
	
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1);
 13c:	e0 e8       	ldi	r30, 0x80	; 128
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	80 6a       	ori	r24, 0xA0	; 160
 144:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM11);
 146:	80 81       	ld	r24, Z
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 <<WGM12);
 14c:	e1 e8       	ldi	r30, 0x81	; 129
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	88 61       	ori	r24, 0x18	; 24
 154:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS10);
 156:	80 81       	ld	r24, Z
 158:	81 60       	ori	r24, 0x01	; 1
 15a:	80 83       	st	Z, r24
	ICR1=0xFF;
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 87 00 	sts	0x0087, r25
 164:	80 93 86 00 	sts	0x0086, r24
	uart_print("PWM initialization finished!\r\n");
 168:	81 e1       	ldi	r24, 0x11	; 17
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 c3 00 	call	0x186	; 0x186 <uart_print>
	uart_flush();
 170:	0e 94 f6 00 	call	0x1ec	; 0x1ec <uart_flush>
 174:	08 95       	ret

00000176 <uart_transmit>:

// transmit a char to uart
void uart_transmit( unsigned char data )
{
	// wait for empty transmit buffer
	while ( ! ( UCSR1A & ( 1 << UDRE1 ) ) )
 176:	e8 ec       	ldi	r30, 0xC8	; 200
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	90 81       	ld	r25, Z
 17c:	95 ff       	sbrs	r25, 5
 17e:	fd cf       	rjmp	.-6      	; 0x17a <uart_transmit+0x4>
	;
	
	// put data into buffer, sends data
	UDR1 = data;
 180:	80 93 ce 00 	sts	0x00CE, r24
 184:	08 95       	ret

00000186 <uart_print>:
}
// write a string to the uart
void uart_print( char data[] )
{
 186:	ef 92       	push	r14
 188:	ff 92       	push	r15
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	8c 01       	movw	r16, r24
 194:	7c 01       	movw	r14, r24
	int c = 0;
	
	for ( c = 0; c < strlen(data); c++ )
 196:	c0 e0       	ldi	r28, 0x00	; 0
 198:	d0 e0       	ldi	r29, 0x00	; 0
 19a:	06 c0       	rjmp	.+12     	; 0x1a8 <uart_print+0x22>
	uart_transmit(data[c]);
 19c:	f7 01       	movw	r30, r14
 19e:	81 91       	ld	r24, Z+
 1a0:	7f 01       	movw	r14, r30
 1a2:	0e 94 bb 00 	call	0x176	; 0x176 <uart_transmit>
// write a string to the uart
void uart_print( char data[] )
{
	int c = 0;
	
	for ( c = 0; c < strlen(data); c++ )
 1a6:	21 96       	adiw	r28, 0x01	; 1
 1a8:	f8 01       	movw	r30, r16
 1aa:	01 90       	ld	r0, Z+
 1ac:	00 20       	and	r0, r0
 1ae:	e9 f7       	brne	.-6      	; 0x1aa <uart_print+0x24>
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	e0 1b       	sub	r30, r16
 1b4:	f1 0b       	sbc	r31, r17
 1b6:	ce 17       	cp	r28, r30
 1b8:	df 07       	cpc	r29, r31
 1ba:	80 f3       	brcs	.-32     	; 0x19c <uart_print+0x16>
	uart_transmit(data[c]);
}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	08 95       	ret

000001ca <uart_init>:
void uart_init(void)
{
	// set baud rate
	unsigned int baud = 16u;//BAUD_PRESCALE;
	
	UBRR1H = (unsigned char) (baud >> 8 );
 1ca:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = (unsigned char)baud;
 1ce:	80 e1       	ldi	r24, 0x10	; 16
 1d0:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A |= (1 << U2X1);
 1d4:	e8 ec       	ldi	r30, 0xC8	; 200
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	82 60       	ori	r24, 0x02	; 2
 1dc:	80 83       	st	Z, r24
	
	// enable received and transmitter
	UCSR1B = ( 1 << RXEN1 ) | ( 1 << TXEN1 );
 1de:	88 e1       	ldi	r24, 0x18	; 24
 1e0:	80 93 c9 00 	sts	0x00C9, r24
	
	// set frame format ( 8data, 1stop )
	UCSR1C = (1 << UCSZ10) | (1 << UCSZ11);
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	80 93 ca 00 	sts	0x00CA, r24
 1ea:	08 95       	ret

000001ec <uart_flush>:
}

void uart_flush(void)
{
	unsigned char dummy;
	while(UCSR1A & (1 << RXC1))
 1ec:	80 91 c8 00 	lds	r24, 0x00C8
 1f0:	88 23       	and	r24, r24
 1f2:	44 f4       	brge	.+16     	; 0x204 <uart_flush+0x18>
	dummy = UDR1;
 1f4:	ae ec       	ldi	r26, 0xCE	; 206
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
}

void uart_flush(void)
{
	unsigned char dummy;
	while(UCSR1A & (1 << RXC1))
 1f8:	e8 ec       	ldi	r30, 0xC8	; 200
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
	dummy = UDR1;
 1fc:	8c 91       	ld	r24, X
}

void uart_flush(void)
{
	unsigned char dummy;
	while(UCSR1A & (1 << RXC1))
 1fe:	80 81       	ld	r24, Z
 200:	88 23       	and	r24, r24
 202:	e4 f3       	brlt	.-8      	; 0x1fc <uart_flush+0x10>
 204:	08 95       	ret

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
