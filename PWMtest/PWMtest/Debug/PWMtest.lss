
PWMtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001e6  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000129  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000015b  00000000  00000000  000004c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000064  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000181  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000005a  00000000  00000000  00000805  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  0000085f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <motorsSt>:
#define F_CPU 16000000UL
#include <util/delay.h>

void motorsSt(uint8_t value)
{
	OCR0B = value;
  80:	88 bd       	out	0x28, r24	; 40
	PORTD |= (1 << PORTD0) | (1 << PORTD2);
  82:	8b b1       	in	r24, 0x0b	; 11
  84:	85 60       	ori	r24, 0x05	; 5
  86:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PORTD1) & ~(1 << PORTD3);
  88:	8b b1       	in	r24, 0x0b	; 11
  8a:	85 7f       	andi	r24, 0xF5	; 245
  8c:	8b b9       	out	0x0b, r24	; 11
  8e:	08 95       	ret

00000090 <motorsStop>:
	PORTD |= (1 << PORTD1) | (1 << PORTD3);
	PORTD &= ~(1 << PORTD0) & ~(1 << PORTD2);
}
void motorsStop(void)
{
	PORTD &= ~(1 << PORTD1) & ~(1 << PORTD3);
  90:	8b b1       	in	r24, 0x0b	; 11
  92:	85 7f       	andi	r24, 0xF5	; 245
  94:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PORTD0) & ~(1 << PORTD2);
  96:	8b b1       	in	r24, 0x0b	; 11
  98:	8a 7f       	andi	r24, 0xFA	; 250
  9a:	8b b9       	out	0x0b, r24	; 11
  9c:	08 95       	ret

0000009e <main>:
	//PORTD &= 0xF0u;
}

int main(void)
{
	OCR0B = 0x7f;
  9e:	8f e7       	ldi	r24, 0x7F	; 127
  a0:	88 bd       	out	0x28, r24	; 40
	// set PWM for 00% duty cycle

	TCCR0A |= (1 << COM0B1);
  a2:	84 b5       	in	r24, 0x24	; 36
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	84 bd       	out	0x24, r24	; 36
	// set none-inverting mode

	TCCR0A |= (1 << WGM01) | (1 << WGM00);
  a8:	84 b5       	in	r24, 0x24	; 36
  aa:	83 60       	ori	r24, 0x03	; 3
  ac:	84 bd       	out	0x24, r24	; 36
	// set fast PWM Mode

	TCCR0B |= (1 << CS01);
  ae:	85 b5       	in	r24, 0x25	; 37
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	85 bd       	out	0x25, r24	; 37
	// set prescaler to 8 and starts PWM
	//initMotors();
	DDRD |= 0x2Fu;
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	8f 62       	ori	r24, 0x2F	; 47
  b8:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x0fu;
  ba:	8f e0       	ldi	r24, 0x0F	; 15
  bc:	8b b9       	out	0x0b, r24	; 11
    while(1)
    {
         motorsSt(0xffu);
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	0e 94 40 00 	call	0x80	; 0x80 <motorsSt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	83 ed       	ldi	r24, 0xD3	; 211
  c8:	90 e3       	ldi	r25, 0x30	; 48
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x2c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x36>
  d4:	00 00       	nop
         _delay_ms(1000);
         motorsStop();
  d6:	0e 94 48 00 	call	0x90	; 0x90 <motorsStop>
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	83 ed       	ldi	r24, 0xD3	; 211
  de:	90 e3       	ldi	r25, 0x30	; 48
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x42>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x4c>
  ea:	00 00       	nop
  ec:	e8 cf       	rjmp	.-48     	; 0xbe <main+0x20>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
